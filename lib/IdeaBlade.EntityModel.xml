<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IdeaBlade.EntityModel</name>
    </assembly>
    <members>
        <member name="T:IdeaBlade.EntityModel.AllowRpcAttribute">
            <summary>
              Defines an attribute that marks a server method as being callable from a client.
              <seealso cref="M:IdeaBlade.EntityModel.EntityManager.InvokeServerMethod(ServerMethodDelegate, Object[])"/>
            </summary>
            <remarks>Methods with the <b>AllowRpc</b> attribute may be invoked from client-side code
            using <see cref="M:IdeaBlade.EntityModel.EntityManager.InvokeServerMethod(ServerMethodDelegate, System.Object[])">EntityManager.InvokeServerMethod</see>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.AllowRpcAttribute.#ctor">
            <summary>
              Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.AbstractEntityFinder">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityFinder">
            <summary>
            For internal use only. 
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityFinder.Execute">
            <summary>
            For internal use only. 
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityFinder.ExecuteFind(System.Guid)">
            <summary>
            For internal use only. 
            </summary>
            <param name="queryId"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityFinder.Reset">
            <summary>
            For internal use only. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityFinder.Query">
            <summary>
            For internal use only. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityFinder.QueryStrategy">
            <summary>
            For internal use only. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityFinder.ServerQuery">
            <summary>
            For internal use only. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityFinder.ServerQuerySurrogate">
            <summary>
            For internal use only. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityFinder.IsExecuteQuery">
            <summary>
            For internal use only. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityFinder.IsAsync">
            <summary>
            For internal use only. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityFinder.CompletedSynchronously">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityFinder.Cancelled">
            <summary>
            For internal use only. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityFinder.Result">
            <summary>
            For internal use only. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityFinder.ChangedObjects">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityFinder.WasFetched">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityFinder.ResolvedFetchStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.AbstractEntityFinder.Initialize(IdeaBlade.EntityModel.EntityManager,IdeaBlade.EntityModel.IEntityQuery)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.AbstractEntityFinder.IsGhostCandidate(IdeaBlade.EntityModel.EntityAspect,System.Guid)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.AbstractEntityFinder.Reset">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.AbstractEntityFinder.Execute">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.AbstractEntityFinder.ExecuteFind(System.Guid)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AbstractEntityFinder.Query">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AbstractEntityFinder.EntityManager">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AbstractEntityFinder.QueryStrategy">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AbstractEntityFinder.ServerQuery">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AbstractEntityFinder.ServerQuerySurrogate">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AbstractEntityFinder.IsExecuteQuery">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AbstractEntityFinder.IsAsync">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AbstractEntityFinder.CompletedSynchronously">
            <summary>
            For internal use only;
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AbstractEntityFinder.Cancelled">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AbstractEntityFinder.Result">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AbstractEntityFinder.ChangedObjects">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AbstractEntityFinder.WasFetched">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AbstractEntityFinder.ResolvedFetchStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.AsyncEventArgs`1">
            <summary>
            <see cref="T:IdeaBlade.EntityModel.AsyncEventArgs"/> providing a strongly-typed <b>Result</b> for an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:IdeaBlade.EntityModel.AsyncEventArgs">
            <summary>
            Base class for arguments to the completed event handler for an asynchronous operation.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.INotifyCompletedArgs">
            <summary>
            Arguments to a completion action.
            <seealso cref="T:IdeaBlade.EntityModel.Coroutine"/>
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.INotifyCompletedArgs.Error">
            <summary>
            The exception if the action failed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.INotifyCompletedArgs.Cancelled">
            <summary>
            Whether the action was cancelled.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.INotifyCompletedArgs.IsErrorHandled">
            <summary>
            Whether the error was handled.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IHasAsyncEventArgs">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IHasAsyncEventArgs.OnCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IHasAsyncEventArgs.AsyncArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.AsyncEventArgs.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="userState"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.AsyncEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
            <summary>
            Arguments to an asynchronous operation or handler.
            </summary>
            <param name="error"></param>
            <param name="cancelled"></param>
            <param name="userState"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.AsyncEventArgs.MarkErrorAsHandled">
            <summary>
            Mark the error as handled;
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncEventArgs.UserState">
            <summary>
            Uniquely identifies the asynchronous operation.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncEventArgs.Cancelled">
            <summary>
            Returns whether the operation was cancelled.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncEventArgs.IsCompleted">
            <summary>
            Returns whether the operation completed. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncEventArgs.CompletedSuccessfully">
            <summary>
            Returns whether the operation completed successfully. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncEventArgs.CompletedSynchronously">
            <summary>
            Returns whether the operation was completed synchronously.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncEventArgs.HasError">
            <summary>
            Returns whether the operation failed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncEventArgs.Error">
            <summary>
            The exception, if any, thrown by the underlying operation.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncEventArgs.IsErrorHandled">
            <summary>
            Whether the Error was handled ( if one exists).
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncEventArgs.WorkState">
            <summary>
            Internal workState for the operation.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncEventArgs.IsUnavailable">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.AsyncEventArgs.AsyncWorkState">
            <summary>
            Represents the work state of an asynchronous operation.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.AsyncEventArgs.AsyncWorkState.#ctor">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.AsyncEventArgs.AsyncWorkState.#ctor(IdeaBlade.EntityModel.AsyncEventArgs.AsyncWorkState)">
            <summary>
            Internal use only.
            </summary>
            <param name="workState"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.AsyncEventArgs.AsyncWorkState.#ctor(IdeaBlade.EntityModel.AsyncEventArgs.AsyncWorkState,System.Exception,System.Boolean)">
            <summary>
            Internal use only.
            </summary>
            <param name="workState"></param>
            <param name="error"></param>
            <param name="cancelled"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.AsyncEventArgs.AsyncWorkState.#ctor(System.Exception,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="error"></param>
            <param name="cancelled"></param>
            <param name="completed"></param>
            <param name="completedSync"></param>
            <param name="isErrorHandled"></param>
        </member>
        <member name="F:IdeaBlade.EntityModel.AsyncEventArgs.AsyncWorkState.Error">
            <summary>
            Set by pre-, async-, and post- actions when an exception occurs.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.AsyncEventArgs.AsyncWorkState.Cancelled">
            <summary>
            Set by pre- and async- actions when the operation is cancelled.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.AsyncEventArgs.AsyncWorkState.IsCompleted">
            <summary>
            Can be set by any action when the operation completes.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.AsyncEventArgs.AsyncWorkState.CompletedSynchronously">
            <summary>
            Set by a pre- action when the operation completes synchronously.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.AsyncEventArgs.AsyncWorkState.IsErrorHandled">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.AsyncEventArgs.AsyncWorkState.MarkErrorAsHandled">
            <summary>
            Marks the exception as handled.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.AsyncEventArgs`1.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="userState"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.AsyncEventArgs`1.#ctor(System.Exception,System.Boolean,System.Object)">
            <summary>
            
            </summary>
            <param name="error"></param>
            <param name="cancelled"></param>
            <param name="userState"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.AsyncOpManager">
            <summary>
            Not to be confused with AsyncOperationManager in System.ComponentModel.
            Used to support cancelling of async operations in the EntityManager.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.AsyncProcessor`1">
            <summary>
            Support asynchronous operations in the EntityManager.
            </summary>
            <typeparam name="TArgs"></typeparam>
        </member>
        <member name="F:IdeaBlade.EntityModel.AsyncProcessor`1.PreAction">
            <summary>
            Optional action performed prior to going asynchronous.  Action should
            include input validation and throw exception if necessary.  Further
            processing can be cancelled, and can also be stopped if processing
            completed synchronously - the action should set the Args.Workstate flags
            to indicate this.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.AsyncProcessor`1.AsyncAction">
            <summary>
            Asynchronous action performed on a worker thread.  Should not access
            non-local objects which are not threadsafe.  If an exception occurs 
            the Args.Workstate.Exception can be set.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.AsyncProcessor`1.PostAction">
            <summary>
            Optional action performed on the calling thread after the asynchronous
            action completes.  
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.AsyncProcessor`1.Execute">
            <summary>
            Begin the action sequence.  This returns when the PreAction completes.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncProcessor`1.Args">
            <summary>
            Current workState of the request.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncProcessor`1.UseThreadPool">
            <summary>
            Whether to use the ThreadPool for the <see cref="F:IdeaBlade.EntityModel.AsyncProcessor`1.AsyncAction"/>.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.AsyncResult">
            <summary>
            Returned by calls to BeginOperationName methods within the EntityManager to initiate
            an asynchronous operation.
            <seealso cref="T:IdeaBlade.EntityModel.IEntityManagerAsync"/>
            </summary>
            <remarks>
            Use the <b>AsyncResult</b> returned from a <b>Begin</b>OperationName call when calling the corresponding
            <b>End</b>OperationName to complete the asynchronous operation.  The <b>AsyncResult</b> is also
            passed to <see cref="T:System.AsyncCallback"/> delegates provided to <b>Begin</b>OperationName calls.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncResult.AsyncState">
            <summary>
            Returns the user state information passed on the Begin call.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncResult.AsyncWaitHandle">
            <summary>
            Returns the wait handle for the asynchronous operation.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncResult.CompletedSynchronously">
            <summary>
            Returns whether the operation completed synchronously.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncResult.IsCompleted">
            <summary>
            Returns whether the operation has completed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncResult.Cancelled">
            <summary>
            Returns true if the operation was cancelled.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncResult.Callback">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncResult.AsyncArgs">
            <summary>
            The arguments returned by the asynchronous operation.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.AsyncResult.Exception">
            <summary>
            Any exception that occured.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.ClientQueryPermissionsAttribute">
            <summary>
            Can be used to indicate the authorized access to query operations on an entity type.
            </summary>
            <remarks>
            You can decorate your auto-generated entity classes with this attribute by setting
            the "Allow includes" and "Allow projections" attributes for the client query in the Entity Data Model designer for the entity.
            <para>
            This attribute may be applied multiple times, and may be applied to both entities and named query methods.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.ClientQueryPermissionsAttribute.#ctor(IdeaBlade.EntityModel.ClientQueryPermissions)">
            <summary>
            Copy constructor.
            </summary>
            <param name="permissions"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ClientQueryPermissionsAttribute.#ctor(IdeaBlade.EntityModel.ClientQueryPermissions,System.String[])">
            <summary>
            Create an instance of this class with the specified permissions and roles.
            </summary>
            <param name="roles"></param>
            <param name="permissions"></param>
            <exception cref="T:System.ArgumentNullException">Thrown if roles is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if roles is empty</exception>
            <remarks>
            The <see cref="P:IdeaBlade.EntityModel.ClientQueryPermissionsAttribute.AuthorizeRolesMode"/> defaults to "Any".
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.ClientQueryPermissionsAttribute.#ctor(IdeaBlade.EntityModel.ClientQueryPermissions,IdeaBlade.EntityModel.AuthorizeRolesMode,System.String[])">
            <summary>
            Create an instance of this class with the specified permissions, authorization mode, and roles.
            </summary>
            <param name="authorizeRolesMode"></param>
            <param name="roles"></param>
            <param name="permissions"></param>
            <exception cref="T:System.ArgumentNullException">Thrown if roles is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if roles is empty</exception>
            <remarks>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.ClientQueryPermissionsAttribute.GetClientQueryPermissions(System.Security.Principal.IPrincipal)">
            <summary>
            Retrieves the query permissions for the user.
            </summary>
            <param name="principal"></param>
            <returns></returns>
            <remarks>
            If <see cref="P:IdeaBlade.EntityModel.ClientQueryPermissionsAttribute.Roles"/> are specified and the user is not in any or all roles, depending on the
            <see cref="P:IdeaBlade.EntityModel.ClientQueryPermissionsAttribute.AuthorizeRolesMode"/>, then <see cref="F:IdeaBlade.EntityModel.ClientQueryPermissions.Minimal"/> is returned.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.ClientQueryPermissionsAttribute.Authorize(IdeaBlade.EntityModel.ClientQueryPermissions,System.Security.Principal.IPrincipal)">
            <summary>
            Called prior to method invocation to determine if the user has the permissions required.
            </summary>
            <param name="neededPermission"></param>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.ClientQueryPermissionsAttribute.Permissions">
            <summary>
            The query permissions allowed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ClientQueryPermissionsAttribute.AuthorizeRolesMode">
            <summary>
            How users will be authorized against the <see cref="P:IdeaBlade.EntityModel.ClientQueryPermissionsAttribute.Roles"/>.
            </summary>
            <remarks>
            The user must either be in "Any" role or "All" roles.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.ClientQueryPermissionsAttribute.Roles">
            <summary>
            List of authorized roles.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.ClientQueryPermissions">
            <summary>
            Enumerates query permissions.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.ClientQueryPermissions.Minimal">
            <summary>
            Only basic queries permitted.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.ClientQueryPermissions.AllowIncludes">
            <summary>
            Queries may use the <b>Include</b> method. 
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.ClientQueryPermissions.AllowProjections">
            <summary>
            Queries may use projections, where the return type is not the same as the queried type.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.ClientQueryPermissions.All">
            <summary>
            All queries are permitted.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.ComplexAspect">
            <summary>
            Provides entity services to a <see cref="P:IdeaBlade.EntityModel.ComplexAspect.ComplexObject"/>.
            </summary>
            <remarks>
            The <b>ComplexAspect</b> provides verification and change tracking capaibilities to the ComplexObject.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.IStructuralObject">
            <summary>
            Interface implemented by entities and complex types.  Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IStructuralObject.GetValueRaw(IdeaBlade.EntityModel.DataEntityProperty,IdeaBlade.EntityModel.EntityVersion)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IStructuralObject.SetValueRaw(IdeaBlade.EntityModel.DataEntityProperty,System.Object)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.IStructuralObject.ValidatePropertyBeforeSet(IdeaBlade.EntityModel.EntityProperty,System.Object)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IStructuralObject.ValidatePropertyAfterSet(IdeaBlade.EntityModel.EntityProperty,System.Object)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.IStructuralObject.SetValueWithChangeNotification(IdeaBlade.EntityModel.DataEntityProperty,System.Object)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="newValue"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.IStructuralObject.SerializationContext">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IStructuralObject.EntityGroup">
            <summary>
            The EntityGroup containing the object.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IStructuralObject.VerifierEngine">
            <summary>
            The verifier engine managing verification for the object.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IStructuralObject.Instance">
            <summary>
            The entity or complex type.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IStructuralObject.EntityMetadata">
            <summary>
            Metadata for the object.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IStructuralObject.RawValues">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexAspect.ViolationCheck(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexAspect.Wrap(IdeaBlade.EntityModel.IComplexObject)">
            <summary>
            Wraps the provided <see cref="T:IdeaBlade.EntityModel.IComplexObject"/>.
            </summary>
            <param name="co"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexAspect.ValidatePropertyBeforeSet(IdeaBlade.EntityModel.EntityProperty,System.Object)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexAspect.ValidatePropertyAfterSet(IdeaBlade.EntityModel.EntityProperty,System.Object)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexAspect.OnErrorsChanged(System.Collections.Generic.IEnumerable{IdeaBlade.Validation.VerifierResult})">
            <summary>
            Only those verifier results that are relevent to this complex object get sent here.
            </summary>
            <param name="verifierResults"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexAspect.OnErrorsChanged(System.String)">
            <summary>
            Raises the ErrorsChanged event.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexAspect.GetValue(System.String)">
            <summary>
            Retrieves the value of the specified property on this object.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
            <remarks>
            All getter interceptor actions are called when using this method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexAspect.GetValue``1(System.String)">
            <summary>
            Retrieves the value of the specified property on this object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
            <remarks>
            All getter interceptor actions are called when using this method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexAspect.GetValue(IdeaBlade.EntityModel.EntityProperty)">
            <summary>
            Retrieves the value of the specified property on this object.
            </summary>
            <param name="entityProperty"></param>
            <returns></returns>
            <remarks>
            All getter interceptor actions are called when using this method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexAspect.SetValue(System.String,System.Object)">
            <summary>
            Sets the value of the specified property on this object.
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
            <remarks>
            All setter interceptor actions are called when using this method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexAspect.SetValue(IdeaBlade.EntityModel.EntityProperty,System.Object)">
            <summary>
            Sets the value of the specified property on this object.
            </summary>
            <param name="entityProperty"></param>
            <param name="value"></param>
            <remarks>
            All setter interceptor actions are called when using this method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexAspect.GetDataProperty(System.String)">
            <summary>
            Returns the DataEntityProperty corresponding to the specified name.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Property not found</exception>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexAspect.SetValueRaw(IdeaBlade.EntityModel.DataEntityProperty,System.Object)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexAspect.ClearBackupVersion(IdeaBlade.EntityModel.EntityVersion)">
            <summary>
            
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexAspect.RestoreBackupVersion(IdeaBlade.EntityModel.EntityVersion)">
            <summary>
            
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexAspect.Equals(System.Object)">
            <summary>
            Equality comparison .  No two independent Complex objects are ever equal - Reference equality is used.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>Do NOT override this implementation because it can cause Entity Framework saves to fail.  The 
            Entity framework assumes reference equality for Complex types.</remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexAspect.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexAspect.StructuralEquals(System.Object)">
            <summary>
            Performs an equality comparison of complex objects determined by their constituent values.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.ComplexAspect.ComplexObject">
            <summary>
            Returns the wrapped IComplexObject.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ComplexAspect.Parent">
            <summary>
            The parent object (either an Entity or a ComplexObject) to this ComplexObject.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ComplexAspect.ParentProperty">
            <summary>
            The EntityProperty of the <see cref="P:IdeaBlade.EntityModel.ComplexAspect.Parent"/> that contains this object.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ComplexAspect.ParentEntity">
            <summary>
            The top level parent <see cref="T:IdeaBlade.EntityModel.IEntity"/> that owns this complex object.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ComplexAspect.ParentEntityProperty">
            <summary>
            The property on the top level parent entity that owns this complex object.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ComplexAspect.VerifierEngine">
            <summary>
            Gets the <see cref="T:IdeaBlade.Validation.VerifierEngine"/>
            shared by all entities within the same EntityManager.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ComplexAspect.EntityManager">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityManager"/> that manages the <see cref="P:IdeaBlade.EntityModel.ComplexAspect.ParentEntity"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ComplexAspect.EntityMetadata">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityMetadata"/> that describes this object.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ComplexAspect.IdeaBlade#Core#ComponentModel#INotifyDataErrorInfo#HasErrors">
            <summary>
            True if there are any validation errors.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.ComplexAspect.IdeaBlade#Core#ComponentModel#INotifyDataErrorInfo#ErrorsChanged">
            <summary>
            Raised when validation errors have changed for a property or the object.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ComplexAspect.ValidationErrors">
            <summary>
            Returns an enumeration of all of the currently detected validation errors on this complex object. Validation errors on
            complex children of this complex object will NOT be included here.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ComplexAspect.SerializationContext">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IComplexObject">
            <summary>
            Interface implemented by a <see cref="T:IdeaBlade.EntityModel.ComplexObject"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IComplexObject.ComplexAspect">
            <summary>
            Returns the <see cref="P:IdeaBlade.EntityModel.IComplexObject.ComplexAspect"/>.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IComplexObjectSvcs">
            <summary>
            Interface implemented by a <see cref="T:IdeaBlade.EntityModel.ComplexObject"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IComplexObjectSvcs.ShallowClone">
            <summary>
            Returns a shallow copy of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IComplexObjectSvcs.SetComplexAspect(IdeaBlade.EntityModel.ComplexAspect)">
            <summary>
            Sets the <see cref="T:IdeaBlade.EntityModel.ComplexAspect"/>.
            </summary>
            <param name="aspect"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.ComplexObject">
            <summary>
            <c>Abstract</c> (<c>MustInherit</c> in Visual Basic) base class for any complex type properties used in entities within DevForce.
            <seealso cref="T:IdeaBlade.EntityModel.EntityManager"/>
            <seealso cref="T:IdeaBlade.EntityModel.IEntity"/>
            </summary>
            <remarks>
            <b>ComplexObjects</b> are effectively lightweight entities with no primary key (i.e. no independent identity) 
            that are hosted as properties of an <see cref="T:IdeaBlade.EntityModel.IEntity"/> or nested within another ComplexObject.  
            They are analogous to the <see cref="T:System.Data.Objects.DataClasses.ComplexObject"/> used within the Microsoft
            Entity Framework.  When you define a complex type within your conceptual model, the DevForce Object Mapper generates a sub-classed
            <b>ComplexObject</b> in the auto-generated domain model for it.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexObject.StructuralEquals(System.Object)">
            <summary>
            Performs an equality comparison of complext objects.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.ComplexObject.IdeaBlade#EntityModel#IComplexObjectSvcs#SetComplexAspect(IdeaBlade.EntityModel.ComplexAspect)">
            <summary>
            Returns a gateway object that provides access to DevForce entity-related features.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ComplexObject.ComplexAspect">
            <summary>
            Returns the ComplexAspect.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ComplexObject.IdeaBlade#Core#ComponentModel#INotifyDataErrorInfo#HasErrors">
            <summary>
            True if there are any validation errors.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.ComplexObject.IdeaBlade#Core#ComponentModel#INotifyDataErrorInfo#ErrorsChanged">
            <summary>
            Raised when validation errors have changed for a property or the object.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ComplexObject.SerializationContext">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.ComplexObject.EntityPropertyNames">
            <summary>
            Base for all EntityPropertyNames.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.CacheStateManager">
            <summary>
            Used to store and retrieve the EntityManager's cache from a stream or file.
            <seealso cref="T:IdeaBlade.EntityModel.EntityManager"/>
            </summary>
            <remarks>
            You can access the <b>CacheStateManager</b> used by an EntityManager through
            the <see cref="P:IdeaBlade.EntityModel.EntityManager.CacheStateManager"/> property.  Use 
            <see cref="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.String,System.Boolean)"/> to store the entity cache to an external source,
            and <see cref="M:IdeaBlade.EntityModel.CacheStateManager.RestoreCacheState(System.String,System.Boolean)"/> to restore a previously saved cache.
            </remarks>
            <example>
        <code lang="C#">
       private void SampleEntityCacheUsage() {

          DomainModelEntityManager mgr = new DomainModelEntityManager();

          // Cache all employees.
          mgr.ExecuteQuery&lt;Employee&gt;();

          // Save the cache to local storage.
          mgr.CacheStateManager.SaveCacheState(@"c:\temp\entitycache.bin");

          // Ocassionally-connected users will normally connect, cache all data required,
          // then disconnect and work from local cache and/or locally saved cache until they can reconnect.
          // In this example, we'll mimic a disconnected login for this user by clearing all cached data
          // and then re-loading the cache from local storage.
          mgr.Disconnect();
          mgr.Clear();

          mgr.CacheStateManager.RestoreCacheState(@"c:\temp\entitycache.bin");

          // Let's reconnect and get more data now.
          mgr.Connect();
          mgr.ExecuteQuery&lt;Customer&gt;();
       }
        </code>
      </example><example>
        <code lang="VB">
        Private Sub SampleEntityCacheUsage()

          Dim mgr As New DomainModelEntityManager()

          ' Cache all employees.
          mgr.ExecuteQuery(Of Employee)()

          ' Save the cache to local storage.
          mgr.CacheStateManager.SaveCacheState("c:\temp\entitycache.bin")

          ' Ocassionally-connected users will normally connect, cache all data required,
          ' then disconnect and work from local cache and/or locally saved cache until they can reconnect.
          ' In this example, we'll mimic a disconnected login for this user by clearing all cached data
          ' and then re-loading the cache from local storage.
          mgr.Disconnect()
          mgr.Clear()

          mgr.CacheStateManager.RestoreCacheState("c:\temp\entitycache.bin")

          ' Let's reconnect and get more data now.
          mgr.Connect()
          mgr.ExecuteQuery(Of Customer)()
        End Sub
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheStateManager.#ctor(IdeaBlade.EntityModel.EntityManager)">
            <summary>
            Initialize a new instance of the CacheStateManager class.
            </summary>
            <param name="entityManager"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheStateManager.GetCacheState">
            <summary>
            Returns an <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> that can be serialized to a stream or file
            to store the current state of the EntityManager.
            </summary>
            <remarks>
            You can work directly with an <b>EntityCacheState</b> using its <see cref="M:IdeaBlade.EntityModel.EntityCacheState.Save(System.String,System.Boolean)"/>,
            <see cref="M:IdeaBlade.EntityModel.EntityCacheState.Restore(System.String,System.Boolean)"/> and <see cref="M:IdeaBlade.EntityModel.EntityCacheState.Merge(IdeaBlade.EntityModel.EntityManager,IdeaBlade.EntityModel.RestoreStrategy)"/> features, or instead use the corresponding 
            <b>EntityCacheManager</b> methods <see cref="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.String,System.Boolean)"/> and <see cref="M:IdeaBlade.EntityModel.CacheStateManager.RestoreCacheState(System.String,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheStateManager.GetCacheState(System.Collections.IEnumerable)">
            <summary>
            Returns an <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> that can be serialized to a stream or file
            to store the current state of this EntityManager and the specified entities.
            </summary>
            <remarks>
            You can work directly with an <b>EntityCacheState</b> using its <see cref="M:IdeaBlade.EntityModel.EntityCacheState.Save(System.String,System.Boolean)"/>,
            <see cref="M:IdeaBlade.EntityModel.EntityCacheState.Restore(System.String,System.Boolean)"/> and <see cref="M:IdeaBlade.EntityModel.EntityCacheState.Merge(IdeaBlade.EntityModel.EntityManager,IdeaBlade.EntityModel.RestoreStrategy)"/> features, or instead use the corresponding 
            <b>EntityCacheManager</b> methods <see cref="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.String,System.Boolean)"/> and <see cref="M:IdeaBlade.EntityModel.CacheStateManager.RestoreCacheState(System.String,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.String,System.Boolean)">
            <overloads>
            <summary>Stores the state of this EntityManager and cached entities to a stream or file.
            </summary>
            </overloads>
             <summary>
             Stores the state of this EntityManager and all cached entities to a file system file.
            <seealso cref="T:IdeaBlade.EntityModel.EntityCacheState"/>
            <seealso cref="M:IdeaBlade.EntityModel.CacheStateManager.RestoreCacheState(System.String,System.Boolean)"/>
             </summary>
             <param name="fileName">Name of file to use.  Will be overwritten if it exists.</param>
             <param name="useBinaryFormat">True to save the file in binary format; false to use text format.</param>
             <remarks>
             All entities in the EntityManager cache will be saved to the file specified.  The file will
             contain the cache and current state in either binary or text format.  The user must have write permissions to the
             folder, and if the file exists it will be overwritten.
             </remarks>
             <exception cref="T:System.UnauthorizedAccessException"/>
             <exception cref="T:System.Security.SecurityException"/>
             <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.Collections.IEnumerable,System.String,System.Boolean)">
            <summary>
            Stores the state of this EntityManager and the specified entities to a file system file.
            </summary>
            <param name="entities">List of entities</param>
            <param name="fileName">Name of file to use.  Will be overwritten if it exists.</param>
            <param name="useBinaryFormat">True to save the file in binary format; false to use text format.</param>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.IOException"/>
            <remarks>
            The specified entities and the current state of the EntityManager will be saved to the
            specified file in either binary or text format.  The user must have write permissions to the
            folder, and if the file exists it will be overwritten.
            </remarks>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.IO.Stream,System.Boolean,System.Boolean)">
             <summary>
             Stores the state of this EntityManager and all cached entities to a stream.
            <seealso cref="T:IdeaBlade.EntityModel.EntityCacheState"/>
            <seealso cref="M:IdeaBlade.EntityModel.CacheStateManager.RestoreCacheState(System.IO.Stream,IdeaBlade.EntityModel.RestoreStrategy,System.Boolean,System.Boolean)"/>
             </summary>
             <param name="stream">Stream to be written to.</param>
             <param name="closeOnExit">Whether or not to close the stream on exiting this method.</param>
             <param name="useBinaryFormat">True to save the data in binary format; false to use text format.</param>
             <remarks>
             The current state of the EntityManager and all entities in its cache will be saved to the stream in either binary or text format.
             <para>
             You can use a <see cref="T:System.Security.Cryptography.CryptoStream"/> with this method to create an encrypted output file.
             </para>
             <para>In Silverlight and other applications running with reduced privileges, you 
             can use an <see cref="T:System.IO.IsolatedStorageFileStream"/> with this method.
             </para>
             </remarks>    
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.Collections.IEnumerable,System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Stores the state of this EntityManager and the specified entities to a stream.
            </summary>
            <param name="entities">List of entities</param>
            <param name="stream">Stream to be written to.</param>
            <param name="closeOnExit">Whether or not to close the stream on exiting this method.</param>
            <param name="useBinaryFormat">True to save the data in binary format; false to use text format.</param>
            <remarks>
            The current state of the EntityManager and the specified entities will be saved to the stream in binary format.
            <para>
            You can use a <see cref="T:System.Security.Cryptography.CryptoStream"/> with this method to create an encrypted output file.
            </para>
            <para>In Silverlight and other applications running with reduced privileges, you 
            can use an <see cref="T:System.IO.IsolatedStorageFileStream"/> with this method.
            </para>
            </remarks>    
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheStateManager.RestoreCacheState(IdeaBlade.EntityModel.EntityCacheState)">
            <overloads>
            <summary>Restores the EntityManager cache state from either a stream or file.
            </summary>
            </overloads>
             <summary>
             Merges an EntityCacheState into this EntityManager using the <b>Normal</b> <see cref="T:IdeaBlade.EntityModel.RestoreStrategy"/>.
             <seealso cref="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.String,System.Boolean)"/>
             <seealso cref="M:IdeaBlade.EntityModel.CacheStateManager.RestoreCacheState(System.String,System.Boolean)"/>
             </summary>
             <param name="entityCacheState">EntityCacheState object to be merged</param>
             <remarks>
             The <paramref name="entityCacheState"/> provided can be an EntityCacheState deserialized using the
             <see cref="M:IdeaBlade.EntityModel.EntityCacheState.Restore(System.String,System.Boolean)"/> method or an EntityCacheState created from another EntityManager.
             </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheStateManager.RestoreCacheState(IdeaBlade.EntityModel.EntityCacheState,IdeaBlade.EntityModel.RestoreStrategy)">
            <summary>
            Merges an EntityCacheState into this EntityManager using the <see cref="T:IdeaBlade.EntityModel.RestoreStrategy"/> specified.
            <seealso cref="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.String,System.Boolean)"/>
            <seealso cref="M:IdeaBlade.EntityModel.CacheStateManager.RestoreCacheState(System.String,System.Boolean)"/>
            </summary>
            <param name="entityCacheState">EntityCacheState to be merged</param>
            <param name="strategy">The restore strategy to use</param>
            <remarks>
            The <paramref name="entityCacheState"/> provided can be an EntityCacheState deserialized using the
            <see cref="M:IdeaBlade.EntityModel.EntityCacheState.Restore(System.String,System.Boolean)"/> method or an EntityCacheState created from another EntityManager.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheStateManager.RestoreCacheState(System.String,System.Boolean)">
             <summary>
             Restores entities from a file system file into this EntityManager using the <b>Normal</b> <see cref="T:IdeaBlade.EntityModel.RestoreStrategy"/>.
            <seealso cref="T:IdeaBlade.EntityModel.EntityCacheState"/>
            <seealso cref="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.String,System.Boolean)"/>
             </summary>
             <param name="fileName">Name of file to read.</param>
             <param name="useBinaryFormat">True to restore a file in binary format; false if using text format.</param>
             <remarks>
             This loads an EntityCacheState from the file and then performs an <see cref="M:IdeaBlade.EntityModel.EntityCacheState.Merge(IdeaBlade.EntityModel.EntityManager,IdeaBlade.EntityModel.RestoreStrategy)"/> into this EntityManager. 
             </remarks>
             <exception cref="T:System.UnauthorizedAccessException"/>
             <exception cref="T:System.Security.SecurityException"/>
             <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheStateManager.RestoreCacheState(System.String,IdeaBlade.EntityModel.RestoreStrategy,System.Boolean)">
             <summary>
             Restores entities from a file system file into this EntityManager using the <see cref="T:IdeaBlade.EntityModel.RestoreStrategy"/> specified.
            <seealso cref="T:IdeaBlade.EntityModel.EntityCacheState"/>
            <seealso cref="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.String,System.Boolean)"/>
             </summary>
             <param name="fileName">Name of file to read.</param>
             <param name="strategy">The restore strategy to use.</param>
             <param name="useBinaryFormat">True to restore a file in binary format; false if using text format.</param>
             <remarks>
             This loads an EntityCacheState from the file and then performs an <see cref="M:IdeaBlade.EntityModel.EntityCacheState.Merge(IdeaBlade.EntityModel.EntityManager,IdeaBlade.EntityModel.RestoreStrategy)"/> into this EntityManager. 
             </remarks>
             <exception cref="T:System.UnauthorizedAccessException"/>
             <exception cref="T:System.Security.SecurityException"/>
             <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheStateManager.RestoreCacheState(System.IO.Stream,IdeaBlade.EntityModel.RestoreStrategy,System.Boolean,System.Boolean)">
             <summary>
             Restores entities from a stream into this EntityManager using the <see cref="T:IdeaBlade.EntityModel.RestoreStrategy"/> specified.
            <seealso cref="T:IdeaBlade.EntityModel.EntityCacheState"/>
            <seealso cref="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.IO.Stream,System.Boolean,System.Boolean)"/>
             </summary>
             <param name="stream">Stream to be read </param>
             <param name="strategy">The restore strategy to use</param>
             <param name="closeOnExit">Whether to close the stream when done</param>
             <param name="useBinaryFormat">True to restore a stream in binary format; false if using text format.</param>
             <remarks>
             This loads an EntityCacheState from the stream and then performs an <see cref="M:IdeaBlade.EntityModel.EntityCacheState.Merge(IdeaBlade.EntityModel.EntityManager,IdeaBlade.EntityModel.RestoreStrategy)"/> into this EntityManager. 
             <para>Use a <see cref="T:System.Security.Cryptography.CryptoStream"/> to read an encrypted input file.</para>
             <para>In Silverlight and other applications running with reduced privileges, you 
             can use an <see cref="T:System.IO.IsolatedStorageFileStream"/> with this method.
             </para>
             </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.BaseOperation`2">
            <summary>
            Information about an asynchronous operation.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.BaseOperation">
            <summary>
            Information about an asynchronous operation.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.INotifyCompleted">
            <summary>
            Interface implemented by asynchronous actions within a <see cref="T:IdeaBlade.EntityModel.Coroutine"/> iterator.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.INotifyCompleted.WhenCompleted(System.Action{IdeaBlade.EntityModel.INotifyCompletedArgs})">
            <summary>
            Action to be performed when the asynchronous operation completes.
            </summary>
            <param name="completedAction"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.BaseOperation.#ctor(System.Object,System.Action{IdeaBlade.EntityModel.BaseOperation})">
            <summary>
            Created by DevForce for an asynchronous operation.
            </summary>
            <param name="userState"></param>
            <param name="callback"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.BaseOperation.#ctor(System.Action{IdeaBlade.EntityModel.BaseOperation},IdeaBlade.EntityModel.AsyncEventArgs)">
            <summary>
            WB for testing only. Do not remove even though marked obsolete
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.BaseOperation.#ctor(IdeaBlade.EntityModel.AsyncEventArgs)">
            <summary>
            
            </summary>
            <param name="acEventArgs"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.BaseOperation.Cancel">
            <summary>
            Cancel the asynchronous operation.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.BaseOperation.CancelCore">
            <summary>
            Performs cancel processing.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.BaseOperation.MarkErrorAsHandled">
            <summary>
            Mark any error as handled.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.BaseOperation.ForcePropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.BaseOperation.PropertyChanged">
            <summary>
            Raised when a property changes.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.BaseOperation.CanCancel">
            <summary>
            Returns whether the operation can be cancelled.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.BaseOperation.Error">
            <summary>
            Returns the exception if the operation failed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.BaseOperation.HasError">
            <summary>
            Returns whether the operation failed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.BaseOperation.IsErrorHandled">
            <summary>
            Was any error that occured handled?
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.BaseOperation.Cancelled">
            <summary>
            Returns whether the operation was cancelled.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.BaseOperation.IsCompleted">
            <summary>
            Returns whether the operation is completed regardless of whether it was cancelled or failed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.BaseOperation.CompletedSuccessfully">
            <summary>
            Returns whether the operation completed success
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.BaseOperation.CompletedSynchronously">
            <summary>
            Returns whether the operation completed synchronously.
            </summary>
            <remarks>
            Fetch operations may complete synchronously if the query can be
            satisfied from cache.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.BaseOperation.UserState">
            <summary>
            Returns the user state which identifies the operation.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.BaseOperation.Completed">
            <summary>
            Raised when the operation finishes.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.BaseOperation`2.Completed">
            <summary>
            Raised when the operation finishes.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.CacheQueryOptions">
            <summary>
            Options that allow queries that will be run against cache to share the same semantics as the corresponding
            query against the Entity Framework and the backend database.  Linq To Objects (CLR) and Linq To Entities do
            not share the same semantics.  This class allows IdeaBlade Entity queries against the Entity cache (Linq to Objects queries)
            to be interpreted like they will be against the Entity Framework.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.CacheQueryOptions.None">
            <summary>
            To be used when standard CLR semantics should be used and no compatibility with the backend datastore is needed.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.CacheQueryOptions.DefaultSqlServerCompatibility">
            <summary>
            Options that represents a default SQL Server installations and settings.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheQueryOptions.#ctor(System.StringComparison,System.Boolean,IdeaBlade.EntityModel.GuidOrdering)">
            <summary>
            Ctor.
            </summary>
            <param name="stringComparison"></param>
            <param name="useSql92CompliantStringComparison"></param>
            <param name="guidOrdering"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheQueryOptions.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheQueryOptions.op_Equality(IdeaBlade.EntityModel.CacheQueryOptions,IdeaBlade.EntityModel.CacheQueryOptions)">
            <summary>
            Operator == overload.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheQueryOptions.op_Inequality(IdeaBlade.EntityModel.CacheQueryOptions,IdeaBlade.EntityModel.CacheQueryOptions)">
            <summary>
            Operator != overload.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheQueryOptions.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.CacheQueryOptions.Default">
            <summary>
            The default value for CacheQueryOptions. May be modified and will affect all of the standard QueryStrategies. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.CacheQueryOptions.IsDefault">
            <summary>
            Is this instance the default instance. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.CacheQueryOptions.StringComparison">
            <summary>
            Determines case sensitivity of Cache queries.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.CacheQueryOptions.UseSql92CompliantStringComparison">
            <summary>
            Determines whether String comparisons are performed according to the ANSI SQL92 specification.  In particular, 
            the ANSI standard requires padding for the character strings used in comparisons so that their lengths match before comparing them.
            </summary>
            <remarks>
            Note that this is typically NOT enforced for operations that rely on the SQL 'Like' operator such as 'StartsWith'
            'EndsWith' and 'Contains'. So, for example:
            "ABC" == "ABC  " -> true  
            but
            "ABC".StartsWith("ABC  ") -> false
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.CacheQueryOptions.GuidOrdering">
            <summary>
            Determines whether to use standard CLR semantics for sorting Guids or the SQL Server default mechanism 
            in which only the last 6 bytes of a value are evaluated.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.GuidOrdering">
            <summary>
            Different semantics for ordering Guids.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.GuidOrdering.CLR">
            <summary>
            Standard CLR ordering
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.GuidOrdering.SqlServer">
            <summary>
            SQL Server ordering.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.SqlServerGuidComparer">
            <summary>
            A comparer that emulates SQL Server's comparison semantics for Guids.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.SqlServerGuidComparer.Compare(System.Guid,System.Guid)">
            <summary>
            <see cref="T:System.Collections.Generic.IComparer`1"/>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheQueryExpressionComparer.AreEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheQueryExpressionComparer.CompareConstant(System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression)">
            <summary>
            
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.CacheQueryHashCodeCalculator">
            <summary>
            For internal use only. Called to convert a query to a cache only in memory query
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheQueryHashCodeCalculator.CalculateHashCode(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheQueryHashCodeCalculator.GetHashCodeConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.ConcurrencyStrategyAttribute">
            <summary>
            Attribute applied to a concurrency property to indicate the <see cref="T:IdeaBlade.EntityModel.ConcurrencyStrategy"/> in effect.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.ConcurrencyStrategyAttribute.#ctor(IdeaBlade.EntityModel.ConcurrencyStrategy)">
            <summary>
              Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.ConcurrencyStrategyAttribute.Equals(System.Object)">
            <summary>
            This attribute implements value equality.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>
            Two <b>ConcurrencyStrategyAttribute</b> instances are considered equal if they have the same strategy.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.ConcurrencyStrategyAttribute.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.ConcurrencyStrategyAttribute.Strategy">
            <summary>
            The concurrency strategy.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.ConnectionStateChangedEventArgs">
            <summary>
            Arguments to the <see cref="E:IdeaBlade.EntityModel.EntityManager.ConnectionStateChanged"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.ConnectionStateChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            Creates and instance of this class.
            </summary>
            <param name="isConnected"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.ConnectionStateChangedEventArgs.IsConnected">
            <summary>
            Whether the <see cref="T:IdeaBlade.EntityModel.EntityManager"/> on which this event fired is now connected to an EntityServer.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IDataBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IDataBlock.Resolve(IdeaBlade.EntityModel.EntityQueryResult)">
            <summary>
            For internal use only.
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IDataBlock.GetDataBlocks">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.BaseDataBlock">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.BaseDataBlock.GetDataBlocks">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.BaseDataBlock.Resolve(IdeaBlade.EntityModel.EntityQueryResult)">
            <summary>
            
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityDataBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.PassthruDataBlock">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.PassthruDataBlock.#ctor(System.Object)">
            <summary>
            For internal use only.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.PassthruDataBlock.#ctor(System.Collections.IEnumerable,System.Type)">
            <summary>
            For internal use only.
            </summary>
            <param name="items"></param>
            <param name="itemType"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.PassthruDataBlock.Resolve(IdeaBlade.EntityModel.EntityQueryResult)">
            <summary>
            For internal use only.
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.PassthruDataBlock.Value">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityDataBlock">
            <summary>
            For internal use only. An entityblock representing a single entity
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityDataBlock.#ctor(IdeaBlade.EntityModel.IEntity,IdeaBlade.EntityModel.NavigationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityDataBlock.Resolve(IdeaBlade.EntityModel.EntityQueryResult)">
            <summary>
            For internal use only.
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntitiesDataBlock">
            <summary>
            For internal use only.
            A DataBlock containing multiple entities of the same type.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntitiesDataBlock.#ctor(System.Collections.IEnumerable,System.Type,IdeaBlade.EntityModel.NavigationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntitiesDataBlock.Resolve(IdeaBlade.EntityModel.EntityQueryResult)">
            <summary>
            For internal use only.
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntitiesDataBlock.EntityTypeWrapper">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.TupleDataBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.TupleDataBlock.#ctor">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.TupleDataBlock.Resolve(IdeaBlade.EntityModel.EntityQueryResult)">
            <summary>
            For internal use only.
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="F:IdeaBlade.EntityModel.TupleDataBlock.Blocks">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.TupleDataBlock.IndexOf(IdeaBlade.EntityModel.IDataBlock)">
            <summary>
            For internal use only.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.TupleDataBlock.Insert(System.Int32,IdeaBlade.EntityModel.IDataBlock)">
            <summary>
            For internal use only.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.TupleDataBlock.RemoveAt(System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.TupleDataBlock.Add(IdeaBlade.EntityModel.IDataBlock)">
            <summary>
            For internal use only.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.TupleDataBlock.Clear">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.TupleDataBlock.Contains(IdeaBlade.EntityModel.IDataBlock)">
            <summary>
            For internal use only.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.TupleDataBlock.CopyTo(IdeaBlade.EntityModel.IDataBlock[],System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.TupleDataBlock.Remove(IdeaBlade.EntityModel.IDataBlock)">
            <summary>
            For internal use only.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.TupleDataBlock.GetEnumerator">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.TupleDataBlock.Item(System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.TupleDataBlock.Count">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.TupleDataBlock.IsReadOnly">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.TuplesDataBlock">
            <summary>
            For internal use only.
            A TuplesDataBlock represents a collection of tuples all of the same schema
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.TuplesDataBlock.#ctor">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.TuplesDataBlock.Resolve(IdeaBlade.EntityModel.EntityQueryResult)">
            <summary>
            For internal use only.
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="F:IdeaBlade.EntityModel.TuplesDataBlock.Blocks">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.TuplesDataBlock.IndexOf(IdeaBlade.EntityModel.TupleDataBlock)">
            <summary>
            For internal use only.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.TuplesDataBlock.Insert(System.Int32,IdeaBlade.EntityModel.TupleDataBlock)">
            <summary>
            For internal use only.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.TuplesDataBlock.RemoveAt(System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.TuplesDataBlock.Add(IdeaBlade.EntityModel.TupleDataBlock)">
            <summary>
            For internal use only.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.TuplesDataBlock.Clear">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.TuplesDataBlock.Contains(IdeaBlade.EntityModel.TupleDataBlock)">
            <summary>
            For internal use only.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.TuplesDataBlock.CopyTo(IdeaBlade.EntityModel.TupleDataBlock[],System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.TuplesDataBlock.Remove(IdeaBlade.EntityModel.TupleDataBlock)">
            <summary>
            For internal use only.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.TuplesDataBlock.GetEnumerator">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.TuplesDataBlock.Item(System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.TuplesDataBlock.Count">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.TuplesDataBlock.IsReadOnly">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.PrimitiveDataBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.PrimitiveDataBlock.#ctor(System.Object,System.Type)">
            <summary>
            For internal use only.
            </summary>
            <param name="item"></param>
            <param name="primitiveType"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.PrimitiveDataBlock.Resolve(IdeaBlade.EntityModel.EntityQueryResult)">
            <summary>
            For internal use only.
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.PrimitiveDataBlock.PrimitiveType">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PrimitiveDataBlock.PrimitiveTypeWrapper">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PrimitiveDataBlock.Value">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.PrimitivesDataBlock">
            <summary>
            For internal use only.
            A primitivesDataBlock represents a collection of primitive objects all of the same type
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.PrimitivesDataBlock.#ctor(System.Collections.IEnumerable,System.Type)">
            <summary>
            For internal use only.
            </summary>
            <param name="primitiveType"></param>
            <param name="values"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.PrimitivesDataBlock.Resolve(IdeaBlade.EntityModel.EntityQueryResult)">
            <summary>
            For internal use only.
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.PrimitivesDataBlock.PrimitiveType">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PrimitivesDataBlock.PrimitiveTypeWrapper">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PrimitivesDataBlock.Values">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.ListDataBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.ListDataBlock.#ctor(System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.IDataBlock})">
            <summary>
            For internal use only.
            </summary>
            <param name="blocks"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ListDataBlock.Resolve(IdeaBlade.EntityModel.EntityQueryResult)">
            <summary>
            For internal use only.
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.ListDataBlock.Blocks">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.GroupDataBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.GroupDataBlock.#ctor(IdeaBlade.EntityModel.IDataBlock,System.Type,System.Collections.Generic.List{IdeaBlade.EntityModel.IDataBlock},System.Type)">
            <summary>
            
            </summary>
            <param name="keyBlock"></param>
            <param name="keyType"></param>
            <param name="itemBlocks"></param>
            <param name="itemType"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.GroupDataBlock.Resolve(IdeaBlade.EntityModel.EntityQueryResult)">
            <summary>
            For internal use only.
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntity">
            <summary>
            Marker interface for an EF enabled entity. may be CodeFirst, ModelFirst or DatabaseFirst.
            </summary>
            <remarks>
            A "Code First" entity can implement this interface to allow for easier access to its <see cref="P:IdeaBlade.EntityModel.IEntity.EntityAspect"/> property.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntity.EntityAspect">
            <summary>
            Returns the <see cref="P:IdeaBlade.EntityModel.IEntity.EntityAspect"/> for the entity.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntitySvcs">
            <summary>
            Interface providing entity services to an entity.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntitySvcs.SetEntityAspect(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            Set the EntityAspect for the entity.
            </summary>
            <param name="aspect"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.IHasPocoEntityAspect">
            <summary>
            Implement for any POCO type which will be managed by an EntityManager.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IHasPocoEntityAspect.EntityAspect">
            <summary>
            Returns the EntityAspect providing entity-related operations and properties to the POCO object.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IPropertyChangedInterceptor">
            <summary>
            Interface which allows an entity to receive property changed notifications.
            </summary>
            <remarks>
            "Code First" entities can implement this interface if property change interception is needed.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.IPropertyChangedInterceptor.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the entity has changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.IPropertyValidationInterceptor">
            <summary>
            Interface which allows an entity to intercept property validation. 
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IPropertyValidationInterceptor.ValidatePropertyBeforeSet(IdeaBlade.EntityModel.EntityProperty,System.Object)">
            <summary>
            Called by the framework when "before set" validation is wanted.
            </summary>
            <param name="property"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IPropertyValidationInterceptor.ValidatePropertyAfterSet(IdeaBlade.EntityModel.EntityProperty,System.Object)">
            <summary>
            Called by the framework when "after set" validation is wanted.
            </summary>
            <param name="property"></param>
            <param name="newValue"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.IUpdateNullEntity">
            <summary>
            Interface which allows a null entity to be customized.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IUpdateNullEntity.UpdateNullEntity">
            <summary>
            Update the null entity.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEditableObjectInterceptor">
            <summary>
            Interface which allows an entity to intercept edit actions.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEditableObjectInterceptor.BeginEditCore">
            <summary>
            Begin edit.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEditableObjectInterceptor.EndEditCore">
            <summary>
            End edit.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEditableObjectInterceptor.CancelEditCore">
            <summary>
            Cancel edit.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.Entity">
            <summary>
            <c>Abstract</c> (<c>MustInherit</c> in Visual Basic) base class for all persistable business objects used within DevForce.  
            <seealso cref="T:IdeaBlade.EntityModel.EntityManager"/>
            <seealso cref="T:IdeaBlade.EntityModel.EntityQuery"/>
            <seealso cref="T:IdeaBlade.EntityModel.EntityGroup"/>
            </summary>
            <remarks>
            Instances of <b>Entity</b> are not created directly; instead, every persistable business object type inherits from Entity.
            <para><b>Entity</b> objects are managed and cached by a <see cref="T:IdeaBlade.EntityModel.EntityManager"/>.
            You'll use an EntityManager to create, retrieve and save your entities.  The EntityManager
            will also handle serialization and transfer of entities to a distributed Object Server.
            </para>
            <para>When working with business objects, you will generally focus on creating additional properties 
            to support business logic and rules; basic properties are auto-generated for you by the 
            <b>IdeaBlade DevForce Object Mapping Tool</b> when business objects are designed. 
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Entity.ValidatePropertyBeforeSet(IdeaBlade.EntityModel.EntityProperty,System.Object)">
            <summary>
            Method that can be overridden to participate in the property validation lifecycle. Base implementation should be called when
            overriding this method.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.Entity.ValidatePropertyAfterSet(IdeaBlade.EntityModel.EntityProperty,System.Object)">
            <summary>
            Method that can be overridden to participate in the property validation lifecycle. Base implementation should be called when
            overriding this method.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.Entity.UpdateNullEntity">
            <summary>
            Method that can be overridden to customize the null entity. Base implementation does not need to be called when
            overriding this method.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.Entity.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Method that can be overridden to participate in INotifyPropertyChanged lifecycle. Base implementation should be called when
            overriding this method.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.Entity.BeginEditCore">
            <summary>
            Method that can be overridden to participate in IEditableObject lifecycle. Base implementation should be called when
            overriding this method.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.Entity.EndEditCore">
            <summary>
            Method that can be overridden to participate in IEditableObject lifecycle. Base implementation should be called when
            overriding this method.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.Entity.CancelEditCore">
            <summary>
            Method that can be overridden to participate in IEditableObject lifecycle. Base implementation should be called when
            overriding this method.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.Entity.CompareTo(System.Object)">
            <summary>
            Base implementation of <see cref="M:System.IComparable.CompareTo(System.Object)"/>.
            </summary>
            <param name="obj">Object to compare with this instance</param>
            <returns></returns>
            <remarks>This will compare Entities by <see cref="T:IdeaBlade.EntityModel.EntityKey"/>.  Derived classes
            can override this implementation as needed to modify the default sort order of objects of this type.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.Entity.EntityAspect">
            <summary>
            The EntityAspect associated with this Entity.  All DevForce services are available via the EntityAspect.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.Entity.PropertyChanged">
            <summary>
            Fired whenever a property value on this Entity changes.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.Entity.SerializationContext">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.Entity.EntityPropertyNames">
            <summary>
            The names of entity properties.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQueryPager">
            <summary>
            A pager which allows <see cref="T:IdeaBlade.EntityModel.EntityQuery`1"/> results to be paged either synchronously or asynchronously.
            </summary>
            <remarks>
            See <see cref="T:IdeaBlade.EntityModel.EntityQueryPager`1"/> for details.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryPager.Create``1(IdeaBlade.EntityModel.IEntityQuery{``0},IdeaBlade.Core.ISortSelector,System.Int32)">
            <summary>
            Creates a pager.
            </summary>
            <typeparam name="T">Entity or anonymous type</typeparam>
            <param name="baseQuery">The base query</param>
            <param name="sortSelector">Sort criteria</param>
            <param name="pageSize">Page size</param>
            <returns></returns>
            <remarks>
            See <see cref="T:IdeaBlade.EntityModel.EntityQueryPager`1"/> for details.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQueryPager`1">
            <summary>
            A pager which allows <see cref="T:IdeaBlade.EntityModel.EntityQuery`1"/> results to be paged either synchronously or asynchronously.
            </summary>
            <typeparam name="T">The query type</typeparam>
            <remarks>
            Use the <b>EntityQueryPager</b> to manage paging of query results.  The query can return items of an entity or anonymous type.  When creating
            the <b>EntityQueryPager</b> the <b>baseQuery</b> determines the selection criteria, and also indicates the <see cref="T:IdeaBlade.EntityModel.QueryStrategy"/> in effect and 
            the <see cref="T:IdeaBlade.EntityModel.EntityManager"/> used.
            <para>
            The QueryStrategy of the baseQuery controls whether paging is managed over just the local cache (QueryStrategy.CacheOnly),
            just the database (QueryStrategy.DataSourceOnly), or both ( QueryStrategy.DataSourceThenCache). Merge semantics are 
            determined by the baseQuery.QueryStrategy.MergeStrategy.  
            </para>
            <para>
            No query is executed until the first <b>MoveTo</b> method is called. You'll usually call <see cref="M:IdeaBlade.EntityModel.EntityQueryPager`1.MoveToFirstPage"/> or <see cref="M:IdeaBlade.EntityModel.EntityQueryPager`1.MoveToFirstPageAsync"/>
            to get things started.  You can then move forward and backward through query results using the <see cref="M:IdeaBlade.EntityModel.EntityQueryPager`1.MoveToNextPage"/> and <see cref="M:IdeaBlade.EntityModel.EntityQueryPager`1.MoveToPreviousPage"/>
            methods or their asynchronous counterparts.  As paging is performed a query is executed for the specific "page" of the overall query results using the 
            appropriate "skip" and "take" LINQ operators.  <see cref="M:IdeaBlade.EntityModel.EntityQueryPager`1.MoveToLastPage"/> allows you to go directly to the final page of results.  The <see cref="P:IdeaBlade.EntityModel.EntityQueryPager`1.PageIndex"/>
            and <see cref="P:IdeaBlade.EntityModel.EntityQueryPager`1.CurrentPageResults"/> are used to indicate the current page and its data.
            When using the asynchronous API, query results are also returned in the <see cref="T:IdeaBlade.EntityModel.PageChangedOperation`1"/>.
            </para>
            <para>
            The <see cref="E:IdeaBlade.EntityModel.EntityQueryPager`1.PageChanging"/> and <see cref="E:IdeaBlade.EntityModel.EntityQueryPager`1.PageChanged"/> events are fired for all syncrhonous and asynchronous "MoveTo" calls.
            </para>
            <para>
            An <see cref="T:IdeaBlade.Core.ISortSelector"/> is required to provide for ordered, and orderly, paging.  
            Ideally the sort selector should guarantee that no two records have the same sort position, however the pager will 
            still work with 'nonunique' sorts but performance will be improved the more unique the sort. 
            </para>
            <para>
            If the baseQuery's EntityManager is cleared then this will trigger a <see cref="M:IdeaBlade.EntityModel.EntityQueryPager`1.Reset"/> call within this instance.
            </para> 
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryPager`1.#ctor(IdeaBlade.EntityModel.IEntityQuery{`0},IdeaBlade.Core.ISortSelector,System.Int32)">
            <summary>
            Creates a pager to manage query results.
            </summary>
            <param name="baseQuery">The base query</param>
            <param name="sortSelector">Sort criteria</param>
            <param name="pageSize">Page size</param>
            <remarks>
            The <paramref name="baseQuery"/> provided must be "attached" to an <see cref="T:IdeaBlade.EntityModel.EntityManager"/>, since it's the EntityManger which will
            execute the query and cache its results.  The <paramref name="sortSelector"/> is required and can be a simple or composite expression.
            The <paramref name="pageSize"/> must be greater than 0.  
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown during argument validation</exception>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryPager`1.MoveToFirstPage">
            <summary>
            Moves to the first page.
            </summary>
            <returns>False if the page cannot be moved </returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryPager`1.MoveToLastPage">
            <summary>
            Moves to the last page.
            </summary>
            <returns>False if the page cannot be moved</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryPager`1.MoveToPreviousPage">
            <summary>
            Moves to the page before the current page.
            </summary>
            <returns>False if the page cannot be moved</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryPager`1.MoveToNextPage">
            <summary>
            Moves to the page after the current page.
            </summary>
            <returns>False if the page cannot be moved</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryPager`1.MoveToPage(System.Int32)">
            <summary>
            Moves to the page at the specified index.
            </summary>
            <param name="pageIndex"></param>
            <returns>False if the page cannot be moved</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryPager`1.MoveToFirstPageAsync">
            <summary>
            Moves to the first page.
            </summary>
            <returns>When the asynchronous operation completes the PageChangedOperation will contain paging results.</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryPager`1.MoveToLastPageAsync">
            <summary>
            Moves to the last page.
            </summary>
            <returns>When the asynchronous operation completes the PageChangedOperation will contain paging results.</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryPager`1.MoveToPreviousPageAsync">
            <summary>
            Moves to the page before the current page.
            </summary>
            <returns>When the asynchronous operation completes the PageChangedOperation will contain paging results.</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryPager`1.MoveToNextPageAsync">
            <summary>
            Moves to the page after the current page.
            </summary>
            <returns>When the asynchronous operation completes the PageChangedOperation will contain paging results.</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryPager`1.MoveToPageAsync(System.Int32)">
            <summary>
            Moves to the page at the specified index.
            </summary>
            <param name="pageIndex"></param>
            <returns>When the asynchronous operation completes the PageChangedOperation will contain paging results.</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryPager`1.Reset">
            <summary>
            Resets this EntityQueryPager to the same state it was when first created.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryPager`1.OnPageChanging(IdeaBlade.EntityModel.EntityQueryPageChangingEventArgs)">
            <summary>
            Raises the <see cref="E:IdeaBlade.EntityModel.EntityQueryPager`1.PageChanging"/> event.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryPager`1.OnPageChanged(IdeaBlade.EntityModel.EntityQueryPageChangedEventArgs{`0})">
            <summary>
            Raises the <see cref="E:IdeaBlade.EntityModel.EntityQueryPager`1.PageChanged"/> event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryPager`1.OnPageFetching(IdeaBlade.EntityModel.EntityQueryPageFetchingEventArgs{`0})">
            <summary>
            Raises the <see cref="E:IdeaBlade.EntityModel.EntityQueryPager`1.PageFetching"/> event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityQueryPager`1.PageChanging">
            <summary>
            Fired before a page changes.
            </summary>
            <remarks>
            The <see cref="T:IdeaBlade.EntityModel.EntityQueryPageChangingEventArgs"/> contain the index of the page being requested and 
            allow the page change event to be cancelled.
            </remarks>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityQueryPager`1.PageChanged">
            <summary>
            Fired after a page changes. 
            </summary>
            <remarks>
            The <see cref="T:IdeaBlade.EntityModel.EntityQueryPageChangedEventArgs`1"/> contain both the index of the new page and the contents of that page.
            </remarks>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityQueryPager`1.PageFetching">
            <summary>
            Fired whenever a datasource query is about to be executed.  
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryPager`1.BaseQuery">
            <summary>
            The EntityQuery for which paging is managed.
            </summary>
            <remarks>
            Changes to the EntityQuery will not affect the behavior of this pager.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryPager`1.SortSelector">
            <summary>
            The SortSelector which determines the order of items returned.
            </summary>  
            <remarks>
             Changes to the SortSelector will not affect the behavior of this pager.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryPager`1.IsPageChanging">
            <summary>
             Whether an asynchronous page change is in progress.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryPager`1.PageIndex">
            <summary>
            Gets the zero-based index of the current page. 
            </summary>
            <remarks>
            Until a <b>MoveTo</b> method has been called this will return -1.
            The <see cref="P:IdeaBlade.EntityModel.EntityQueryPager`1.CurrentPageResults"/> returns the items for this page.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryPager`1.PageSize">
            <summary>
            Returns the number of records requested for each page. 
            </summary>
            <remarks>
            The page size cannot be changed after the pager is constructed.</remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryPager`1.TotalItemCount">
            <summary>
            Returns the total number of items returned by the base query.  
            </summary>
            <remarks>
            This property will return -1 until all pages are fetched or the <see cref="P:IdeaBlade.EntityModel.EntityQueryPager`1.TotalDataSourceItemCount"/> is known.  The number will
            be an approximation when a large number of inserts and deletes have occurred.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryPager`1.TotalDataSourceItemCount">
            <summary>
            Returns the number of records available to be returned from the datasource.
            </summary>
            <remarks>
            This property will return -1 until the last page is fetched via a call to <see cref="M:IdeaBlade.EntityModel.EntityQueryPager`1.MoveToLastPage"/>.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryPager`1.CurrentPageResults">
            <summary>
            The contents of the current page. 
            </summary>
            <remarks>
            The <see cref="P:IdeaBlade.EntityModel.EntityQueryPager`1.PageIndex"/> represents the current page.  For synchronous <b>MoveTo</b> operations the <b>CurrentPageResults</b>
            are available immediately following the call.  For asynchronous operations the <b>CurrentPageResults</b> are loaded when the
            asynchronous operation completes.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQueryPageChangingEventArgs">
            <summary>
            Arguments to the <see cref="E:IdeaBlade.EntityModel.EntityQueryPager`1.PageChanging"/> event.
            </summary>
            <remarks>
            You may cancel the page movement by setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to true.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryPageChangingEventArgs.#ctor(System.Int32)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="pageIndex"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryPageChangingEventArgs.PageIndex">
            <summary>
            The index of the page to be moved to.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQueryPageChangedEventArgs`1">
            <summary>
            Arguments to the <see cref="E:IdeaBlade.EntityModel.EntityQueryPager`1.PageChanged"/> event.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryPageChangedEventArgs`1.#ctor(System.Int32,System.Collections.Generic.List{`0})">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="pageIndex"></param>
            <param name="results"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryPageChangedEventArgs`1.PageIndex">
            <summary>
            The index of the page moved to.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryPageChangedEventArgs`1.Results">
            <summary>
            The query results for the page.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQueryPageFetchingEventArgs`1">
            <summary>
            Arguments to the <see cref="E:IdeaBlade.EntityModel.EntityQueryPager`1.PageFetching"/> event.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryPageFetchingEventArgs`1.#ctor(IdeaBlade.EntityModel.IEntityQuery{`0},System.Int32)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="query"></param>
            <param name="pageIndex"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryPageFetchingEventArgs`1.Query">
            <summary>
            The query to be executed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryPageFetchingEventArgs`1.PageIndex">
            <summary>
            The index of the page for which the query will be run.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.PageChangedOperation`1">
            <summary>
            Information about an asynchronous paging operation.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            Returned by an asynchronous "MoveTo" operation on the <see cref="T:IdeaBlade.EntityModel.EntityQueryPager`1"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.PageChangedOperation`1.Cancel">
            <summary>
            Cancel asynchronous MoveTo operation.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.PageChangedOperation`1.IdeaBlade#EntityModel#INotifyCompleted#WhenCompleted(System.Action{IdeaBlade.EntityModel.INotifyCompletedArgs})">
            <summary>
            Action to be performed when the asynchronous operation completes.
            </summary>
            <param name="notifyCompletedAction"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.PageChangedOperation`1.OnCompleted">
            <summary>
            Raises the <see cref="E:IdeaBlade.EntityModel.PageChangedOperation`1.Completed"/> event.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PageChangedOperation`1.CanCancel">
            <summary>
            Returns whether the async MoveTo operation can be cancelled.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PageChangedOperation`1.Cancelled">
            <summary>
            Returns whether the async MoveTo operation was cancelled.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PageChangedOperation`1.Results">
            <summary>
            The query results for the page.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PageChangedOperation`1.PageIndex">
            <summary>
            The index of the page moved to.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PageChangedOperation`1.PageWasFound">
            <summary>
            Returns false when the requested page was not found.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.PageChangedOperation`1.Completed">
            <summary>
            Raised when the operation finishes.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PageChangedOperation`1.IsCompleted">
            <summary>
            Returns true if the asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityModelMetadata">
            <summary>
            Internal use only.  Holds metadata for a single entity model.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityModelMetadata.#ctor(System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.EntityMetadata},System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.EntityRelation})">
            <summary>
            Internal use only.
            </summary>
            <param name="entityMetadataCollection"></param>
            <param name="entityRelationCollection"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityModelMetadata.GetHashCode">
            <summary>
            Hashcode is based on all entities, relations, and the encrypted license key.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.DataSourceResolver">
            <summary>
            Used by the framework to manage and resolve data source keys.  Internal use only.
            </summary>
            <remarks>
            There is one <b>DataSourceResolver</b> for each data source extension name used.  
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataSourceResolver.#ctor(System.String,IdeaBlade.Core.Composition.CompositionContext)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="dataSourceExtension">The DataSourceExtension name</param>
            <param name="compositionContext"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataSourceResolver.GetDataSourceKey(System.Type)">
            <summary>
            Returns the data source key for the specified <see cref="T:IdeaBlade.EntityModel.IEntity"/> type.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataSourceResolver.GetDataSourceKey(System.String)">
            <summary>
            Returns the data source key for the specified key name.
            </summary>
            <param name="dataSourceKeyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataSourceResolver.GetIdGenerator(System.Type)">
            <summary>
            Returns the ID generator for the specified <see cref="T:IdeaBlade.EntityModel.IEntity"/> type.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataSourceResolver.GetIdGenerator(System.String)">
            <summary>
            Returns the ID generator for the specified key name.
            </summary>
            <param name="dataSourceKeyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataSourceResolver.GetConcurrencyStrategy(IdeaBlade.EntityModel.IDataSourceKey)">
            <summary>
            Returns the custom concurrency strategy implementation for the specified data source key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataSourceResolver.Merge(IdeaBlade.EntityModel.DataSourceResolver)">
            <summary>
            Merges another DataSourceResolver into this one. Internal use only.
            </summary>
            <param name="resolver">resolver</param>
            <remarks>
            IdGenerators are merged only if the current IdGenerator does not contain uncommitted temporary IDs.
            A merge of <b>DataSourceResolvers</b> is automatically done when loading or restoring
            an <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> into an <see cref="T:IdeaBlade.EntityModel.EntityManager"/>.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataSourceResolver.DataSourceExtension">
            <summary>
            Gets the name of the data source extension for this resolver.
            </summary>
            <value>The name of the data source extension.</value>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataSourceResolver.DataSourceInfoMap">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataSourceResolver.CompositionContext">
            <summary>
            The CompositionContext used to provide interface implementations to this resolver.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataSourceResolver.ProbedKeyResolver">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataSourceResolver.DataSourceKeyNames">
            <summary>
            Gets the list of data source key names managed by this resolver.
            </summary>
            <value>The data source key names.</value>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataSourceResolver.DataSourceKeys">
            <summary>
            Gets the list of data source keys managed by this resolver.
            </summary>
            <value>The data source keys.</value>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataSourceResolver.IdGenerators">
            <summary>
            Gets the list of ID generators managed by this resolver.
            </summary>
            <value>The id generators.</value>
        </member>
        <member name="T:IdeaBlade.EntityModel.KeyRelatedInfo">
            <summary>
            For internal use only. 
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.KeyRelatedInfo.#ctor(IdeaBlade.EntityModel.IDataSourceKey,IdeaBlade.EntityModel.IIdGenerator,IdeaBlade.EntityModel.IConcurrencyStrategy)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="idGenerator"></param>
            <param name="strategy"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.KeyRelatedInfo.IdGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityQuerySurrogate">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityQuerySurrogate.ToIEntityQuery">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQuerySurrogate">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuerySurrogate.QueryableTypeWrapper">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuerySurrogate.SerializedExpression">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuerySurrogate.EntitySetName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuerySurrogate.IsExecuteQuery">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuerySurrogate.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuerySurrogate.CommandTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuerySurrogate.QueryStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuerySurrogate.IncludePaths">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityAspect">
            <summary>
            Provides entity services for all persistable business objects used within DevForce.  
            <seealso cref="T:IdeaBlade.EntityModel.EntityManager"/>
            <seealso cref="T:IdeaBlade.EntityModel.EntityQuery"/>
            <seealso cref="T:IdeaBlade.EntityModel.IEntity"/>
            </summary>
            <remarks>
            The <b>EntityAspect</b> implements interfaces to support editing, change tracking and change notification.
            One instance of the EntityAspect class is associated with each persistable entity within a domain model.
            The <see cref="T:IdeaBlade.EntityModel.PocoEntityAspect"/> also extends the EntityAspect
            <para>
            An EntityAspect can be used to <see cref="M:IdeaBlade.EntityModel.EntityAspect.Wrap(System.Object)"/> an object and provide it with entity-related
            services. 
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.ViolationCheck(System.Object)">
            <summary>
            See <see cref="M:IdeaBlade.Core.TraceFns.Assert(System.Boolean)"/>
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityAspect.AllErrors">
            <summary>
            'Magic' string that can be used to return all errors from <see cref="M:IdeaBlade.Core.ComponentModel.INotifyDataErrorInfo.GetErrors(System.String)"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.AddToManager">
            <summary>
            Adds a newly created entity to its associated <see cref="T:IdeaBlade.EntityModel.EntityManager"/>. 
            </summary>
            <remarks>The associated EntityManager will either be the EntityManager that was called to create this Entity
            (<see cref="M:IdeaBlade.EntityModel.EntityManager.CreateEntity``1"/>) or that was used to generate its ids ( <see cref="M:IdeaBlade.EntityModel.EntityManager.GenerateId(System.Object,IdeaBlade.EntityModel.DataEntityProperty)"/>)
            If neither of these cases apply, then the <see cref="P:IdeaBlade.EntityModel.EntityAspect.InternalEntityManager"/>'s DefaultManager"/&gt; will be used.
            There is no difference between <b>AddToManager</b> and 
            <see cref="M:IdeaBlade.EntityModel.EntityManager.AddEntity(IdeaBlade.EntityModel.Entity)"/>.
            Use either method to add a business object created by the <see cref="M:IdeaBlade.EntityModel.EntityManager.CreateEntity(System.Type)"/> method
            to the EntityManager cache.  The object must have a "detached" <see cref="M:IdeaBlade.EntityModel.Entity.EntityState"/>, must not
            have ever been associated with another EntityManager and must have a unique EntityKey within the EntityManager to which it will
            be added. 
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.RemoveFromManager">
             <summary>
             Removes the entity from the EntityManager cache.
             </summary>
             <remarks>The Entity will be in a "detached" state after the remove. 
             <b>RemoveFromManager</b> and <see cref="M:IdeaBlade.EntityModel.EntityManager.RemoveEntity(IdeaBlade.EntityModel.Entity)"/>
              can be used interchangeably. Calling <b>RemoveFromManager</b> also clears the EntityManager's <see cref="P:IdeaBlade.EntityModel.EntityManager.QueryCache"/>.
            <para>This does not delete the object from the backend server.  To delete an entity,
            use the <see cref="M:IdeaBlade.EntityModel.Entity.Delete"/> method.</para>
             </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.RemoveFromManager(System.Boolean)">
             <summary>
             Removes the entity from the EntityManager cache.
             </summary>
             <remarks>The Entity will be in a "detached" state after the remove. 
             <b>RemoveFromManager</b> and <see cref="M:IdeaBlade.EntityModel.EntityManager.RemoveEntity(IdeaBlade.EntityModel.Entity)"/>
              can be used interchangeably. Calling <b>RemoveFromManager</b> also clears the EntityManager's <see cref="P:IdeaBlade.EntityModel.EntityManager.QueryCache"/>.
            <para>This does not delete the object from the backend server.  To delete an entity,
            use the <see cref="M:IdeaBlade.EntityModel.Entity.Delete"/> method.</para>
             </remarks>
             <param name="clearQueryCache"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.AcceptChanges">
            <summary>
             Accepts all changes to this Entity, returning the EntityState to Unchanged.
            </summary>
            <remarks>
            <b>AcceptChanges</b> is automatically called by the EntityManager after a successful 
            <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges()"/> call; there is rarely a need to call this method directly.
            <para>
            The <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanging"/> and <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanged"/>
            events are fired with an EntityAction of <see cref="F:IdeaBlade.EntityModel.EntityAction.Commit"/> when this
            method is executed.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.RejectChanges">
            <summary>
            Rejects (rolls back) all changes to this Entity since it was queried or had <see cref="M:IdeaBlade.EntityModel.EntityAspect.AcceptChanges"/> called on it.
            </summary>
            <remarks>
            Rejects any changes made to the Entity since the last save operation.
            This will also remove the Entity from the <b>EntityManager</b> if it was an 'added' object.
            <para>
            The <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanging"/> and <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanged"/> events
            will fire during a <b>RejectChanges</b> call with an EntityAction of <see cref="F:IdeaBlade.EntityModel.EntityAction.Rollback"/>.
            </para>
            <seealso cref="M:IdeaBlade.EntityModel.Entity.RejectChanges"/>
            <seealso cref="M:IdeaBlade.EntityModel.Entity.RemoveFromManager()"/>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.HasChanges">
            <summary>
            Determines whether this entity has any pending changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.SetAdded">
            <summary>
            Forces this entity into the <see cref="P:IdeaBlade.EntityModel.EntityAspect.EntityState"/> of Added.
            </summary>
            <remarks>
            You will usually have no reason to call this method from application code.  The EntityState
            is automatically set to Added by the framework when a new entity is added to an EntityManager.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.SetModified">
            <summary>
            Forces this entity into the <see cref="P:IdeaBlade.EntityModel.EntityAspect.EntityState"/> of Modified.
            </summary>
            <remarks>
            You will usually have no reason to call this method from application code.  The EntityState
            is automatically set to Modified by the framework when any EntityProperty of the entity is changed.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.Wrap(System.Object)">
            <summary>
            Wrap an object to provide entity-related services.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.WrapAll(System.Collections.IEnumerable)">
            <summary>
            <see cref="M:IdeaBlade.EntityModel.EntityAspect.Wrap(System.Object)"/> all objects in the collection provided.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetValueRaw(IdeaBlade.EntityModel.DataEntityProperty,IdeaBlade.EntityModel.EntityVersion)">
            <summary>
            Low-level access to get a property value without going through
            the standard property 'get' accessor. 
            </summary>
            <param name="property"></param>
            <param name="version"></param>
            <returns></returns>
            <remarks>
            Note that this operation bypasses all custom interception methods.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.SetValueWithChangeTracking(IdeaBlade.EntityModel.DataEntityProperty,System.Object)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.SetValueRaw(IdeaBlade.EntityModel.DataEntityProperty,System.Object)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetValuesRaw(System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.DataEntityProperty})">
            <summary>
            Retrieve the values of specified properties within this Entity.
            </summary>
            <param name="properties">An array of <see cref="T:IdeaBlade.EntityModel.EntityProperty"/>s for which values
            are desired</param>
            <returns>An array of data values corresponding to the specified properties</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetValueRaw(System.String)">
            <summary>
            Low-level access to get a property value without going through
            the standard property 'get' accessor. 
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
            <remarks>
            Note that this operation bypasses all custom interception methods.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetValueRaw(System.String,IdeaBlade.EntityModel.EntityVersion)">
            <summary>
            Low-level access to get a property value without going through
            the standard property 'get' accessor. 
            </summary>
            <param name="propertyName"></param>
            <param name="version"></param>
            <returns></returns>
            <remarks>
            Note that this operation bypasses all custom interception methods.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetValueRaw(IdeaBlade.EntityModel.DataEntityProperty)">
            <summary>
            Low-level access to get a property value without going through
            the standard property 'get' accessor. 
            </summary>
            <param name="property"></param>
            <returns></returns>
            <remarks>
            Note that this operation bypasses all custom interception methods.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.ValidatePropertyBeforeSet(IdeaBlade.EntityModel.EntityProperty,System.Object)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.ValidatePropertyAfterSet(IdeaBlade.EntityModel.EntityProperty,System.Object)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.IdeaBlade#EntityModel#IEditableObjectInterceptor#BeginEditCore">
            <summary>
            Provided to allow IEditableObject interface to be overriden in derived classes.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.IdeaBlade#EntityModel#IEditableObjectInterceptor#CancelEditCore">
            <summary>
            Provided to allow IEditableObject interface to be overriden in derived classes.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.IdeaBlade#EntityModel#IEditableObjectInterceptor#EndEditCore">
            <summary>
            Provided to allow IEditableObject interface to be overriden in derived classes.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.FindRelatedAspects(IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            Finds any cached entities related to this entity by the specified link.
            </summary>
            <param name="relationLink"></param>
            <returns></returns>
            <remarks>
            Entities will not be retrieved from a backend data source if not found in cache.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetEntityReference(IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            
            </summary>
            <param name="link"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.ReplaceCurrentOnLoad(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            Assumes sourceEntity is not around after this operation. i.e. is a transient object
            If not sourceEntity.DataValues must be copied instead of ref'd.
            </summary>
            <param name="sourceAspect"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.ReplaceOriginal(IdeaBlade.EntityModel.EntityAspect,System.Boolean)">
            <summary>
            Assumes sourceEntity is not around after this operation. i.e. is a transient object
            If not sourceEntity.DataValues must be copied instead of ref'd.
            </summary>  
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.ReplaceAllCore(IdeaBlade.EntityModel.EntityAspect,System.Boolean)">
            <summary>
            For internal use only.
            </summary>
            <param name="sourceAspect"></param>
            <param name="copy"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.ReplaceCurrentOnLoadCore(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            For internal use only.
            </summary>
            <param name="sourceAspect"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.ReplaceOriginalCore(IdeaBlade.EntityModel.EntityAspect,System.Boolean)">
            <summary>
            For internal use only.
            </summary>
            <param name="sourceAspect"></param>
            <param name="copy"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.ForcePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Forces a PropertyChanged event to be fired. 
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> or null</param>
            <remarks>
            An Empty value or a null reference (<c>Nothing</c> in Visual Basic) for the propertyName parameter of 
            PropertyChangedEventArgs indicates that all of the properties have changed, causing 
            the .NET framework to also fire a ListChangedEventArgs.ListChangedType of "Reset" if the event
            propagates to a list that supports the ListChanged event.
            <para>
            Passing a null value to this method will
            insure that a valid (dynamically created) property name is passed on to any listeners.
            </para>
            <para>
            This method should only be needed in situations where changes to calculated fields or other properties 
            not backed by an <see cref="T:IdeaBlade.EntityModel.EntityProperty"/> must be made known.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.FirePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:IdeaBlade.EntityModel.EntityAspect.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.OnEntityPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Fires PropertyChanged on the Entity associated with this EntityAspect without invoking any IPropertyChangedInterceptor. 
            Normally the FirePropertyChanged method should be used in place of this.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.OnEntityAspectPropertyChanged(System.String)">
            <summary>
            Fires PropertyChanged on EntityAspect.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.CompareTo(System.Object)">
            <summary>
            Base implementation of <see cref="M:System.IComparable.CompareTo(System.Object)"/>.
            </summary>
            <param name="obj">Object to compare with this instance</param>
            <returns></returns>
            <remarks>This will compare Entities by <see cref="P:IdeaBlade.EntityModel.EntityAspect.EntityKey"/>.  Derived classes
            can override this implementation as needed to modify the default sort order of objects of this type.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.CloneCore">
             <summary>
             For internal use only.  
             Makes a copy of the entity including its EntityState; it does not copy related entities.
             </summary>
             <returns></returns>
             <remarks>
             <b>CloneCore</b> copies the Entity "in depth" including the entity’s <see cref="P:IdeaBlade.EntityModel.EntityAspect.EntityState"/>.
             Related entities are not copied.
             Derived classes that override <b>CloneCore</b> typically call base.CloneCore first to let 
             DevForce do the initial cloning before proceeding to their custom functionality.
            <para>
             <b>Beware:</b> the result of <b>CloneCore</b> is not attached to any EntityManager even though the value of its 
             EntityState indicates that it is! CloneCore should be called only within a Clone() method 
             that understands this and that will ultimately expose the cloned entity as a properly 
             formed entity with a correct EntityState.
             </para><para>
             The source EntityState is preserved so that the calling Clone() method can know and make use of the source 
             entity’s EntityState. It is critical that the calling Clone() method return a properly formed Entity 
             which means that, unless the method attaches the clone to a different EntityManager, the returned clone’s 
             EntityState should be reset to "Detached".
             </para><para>
             <b>CloneCore</b> is called within other DevForce Clone() methods (<see cref="M:IdeaBlade.EntityModel.EntityGroup.Clone">EntityGroup.Clone</see> for example).
             You can invoke it yourself by casting the entity as <see cref="T:System.ICloneable"/> and calling Clone() as in 
             <code>(Foo) ((ICloneable) foo).Clone())</code>.
             The resulting clone does not belong to an EntityManager and its EntityState is "Detached".
             </para>
             </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.Delete">
            <summary>
            Marks this Entity for deletion; the <see cref="P:IdeaBlade.EntityModel.EntityAspect.EntityState"/> becomes "Deleted".
            </summary>
            <remarks>
            You must call <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges()"/> to persist this change to the 
            backend data source.  
            <para>
            The <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanging"/> and <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanged"/> events
            will fire during a <b>Delete</b> call with an EntityAction of <see cref="F:IdeaBlade.EntityModel.EntityAction.Delete"/>.
            </para>  
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.AreEqual(IdeaBlade.EntityModel.EntityAspect,System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.DataEntityProperty})">
            <summary>
            
            </summary>
            <param name="sourceAspect"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.ClearBackupVersion(IdeaBlade.EntityModel.EntityVersion)">
            <summary>
            
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.RestoreBackupVersion(IdeaBlade.EntityModel.EntityVersion)">
            <summary>
            
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetProperty(System.String)">
            <summary>
            Returns the EntityProperty corresponding to the specified property name.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetDataProperty(System.String)">
            <summary>
            Returns the DataEntityProperty corresponding to the specified property name.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetNavigationProperty(System.String)">
            <summary>
            Returns the NavigationEntityProperty corresponding to the specified property name.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.OnErrorsChanged(System.String)">
            <summary>
            Raises the ErrorsChanged event.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetValue(System.String)">
            <summary>
            Retrieves the value of the specified property on the associated Entity.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
            <remarks>
            All getter interceptor actions are called when using this method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetValue(System.String,IdeaBlade.EntityModel.EntityVersion)">
            <summary>
            Retrieves the value of the specified property and version on the associated Entity.
            </summary>
            <param name="propertyName"></param>
            <param name="entityVersion"></param>
            <returns></returns>
            <remarks>
            All getter interceptor actions are called when using this method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetValue(IdeaBlade.EntityModel.EntityProperty)">
            <summary>
            Retrieves the value of the specified property on the associated Entity.
            </summary>
            <param name="entityProperty"></param>
            <returns></returns>
            <remarks>
            All getter interceptor actions are called when using this method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetValue(IdeaBlade.EntityModel.DataEntityProperty,IdeaBlade.EntityModel.EntityVersion)">
            <summary>
            Retrieves the value of the specified property and version on the associated Entity.
            </summary>
            <param name="dataEntityProperty"></param>
            <param name="version"></param>
            <returns></returns>
            <remarks>
            All getter interceptor actions are called when using this method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetValue``1(System.String)">
            <summary>
            Retrieves the value of the specified property on the associated Entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
            <remarks>
            All getter interceptor actions are called when using this method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.SetValue(System.String,System.Object)">
            <summary>
            Sets the value of the specified property on the associated Entity.
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
            <remarks>
            All setter interceptor actions are called when using this method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.SetValue(IdeaBlade.EntityModel.EntityProperty,System.Object)">
            <summary>
            Sets the value of the specified property on the associated Entity.
            </summary>
            <param name="entityProperty"></param>
            <param name="value"></param>
            <remarks>
            All setter interceptor actions are called when using this method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.FindRelatedEntities(IdeaBlade.EntityModel.EntityRelationLink,System.Boolean)">
            <summary>
            Finds any cached entities related to this entity by the specified link.
            </summary>
            <param name="relationLink"></param>
            <param name="includeDeleted"></param>
            <returns></returns>
            <remarks>
            Entities will not be retrieved from a backend data source if not found in cache.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetRelatedEntity(IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            Returns the related entity via a <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/>.
            </summary>
            <param name="relationLink"></param>
            <returns></returns>
            <remarks>
            The current <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultQueryStrategy"/> is used
            to determine how this query is fulfilled.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetRelatedEntity``1(IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            Returns the related entity via a <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="relationLink"></param>
            <returns></returns>
            <remarks>
            The current <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultQueryStrategy"/> is used
            to determine how this query is fulfilled.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetRelatedEntity``1(IdeaBlade.EntityModel.EntityRelationLink,IdeaBlade.EntityModel.QueryStrategy)">
            <summary>
            Returns the related entity via a <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/> using the specified QueryStrategy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="relationLink"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetRelatedEntities(IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            Returns all related entities via the specified <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/>.
            </summary>
            <param name="relationLink"></param>
            <returns></returns>
            <remarks>
            The current <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultQueryStrategy"/> is used
            to determine how this query is fulfilled.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetRelatedEntities``1(IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            Returns all related entities via the specified <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="relationLink"></param>
            <returns></returns>
            <remarks>
            The current <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultQueryStrategy"/> is used
            to determine how this query is fulfilled.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetRelatedEntities``1(IdeaBlade.EntityModel.EntityRelationLink,IdeaBlade.EntityModel.QueryStrategy)">
            <summary>
            Returns all related entities via the specified <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/> using the specified QueryStrategy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="relationLink"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetRelatedEntity(IdeaBlade.EntityModel.EntityRelationLink,IdeaBlade.EntityModel.QueryStrategy)">
            <summary>
            Returns the related entity via a <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/> using the specified QueryStrategy.
            </summary>
            <param name="relationLink"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.GetRelatedEntities(IdeaBlade.EntityModel.EntityRelationLink,IdeaBlade.EntityModel.QueryStrategy)">
            <summary>
            Returns all related entities via the specified <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/> using the specified QueryStrategy.
            </summary>
            <param name="relationLink"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.Entity">
            <summary>
            Returns the wrapped entity.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.IsChanged">
            <summary>
            Whether any changes have been made to this entity.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityAspect.PendingEntityResolved">
            <summary>
            Fired when a pending asynchronous navigation has completed.
            </summary>
            <example>
      <code lang="C#">
        
    private OrderSummary _anOrder;

    public void AsyncGetCustomerForOrder() {

      DomainModelEntityManager mgr = new DomainModelEntityManager();

      // Turn on async navigation.  This is a readonly property in Silverlight.
      mgr.UseAsyncNavigation = true;

      // Assume we have an OrderSummary in cache.
      // Navigate to the order's Customer property.
      // If UseAsyncNavigation is true and the customer isn't already in cache
      // the IsPendingEntity flag will be on.

      var cust = _anOrder.Customer;
      Assert.IsTrue(cust.EntityAspect.IsPendingEntity);

      // Set up a handler to tell us when this entity has been retrieved.
      // Note the handler is on the pending entity itself.
      cust.PendingEntityResolved += PendingEntityResolvedHandler;
    }

    private void PendingEntityResolvedHandler(object sender, PendingEntityResolvedEventArgs args) {
      // The entity has been retrieved.
      Assert.IsFalse(_anOrder.Customer.EntityAspect.IsPendingEntity);
    }
      </code>
    </example>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.IsPendingEntity">
            <summary>
            Returns whether the current instance is a pending entity.
            </summary>
            <remarks>
            The EntityManager will return a PendingEntity instead of a null value when
            a requested entity is being queried asynchronously and has not yet been returned.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.EntityKey">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityKey"/> for this entity. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.EntityKeyHasChanged">
            <summary>
            Returns whether the primary key for this Entity has changed.
            </summary>
            <remarks>
            Returns <c>false</c> for Detached, Added and Deleted objects because the change 
            state is either meaningless or cannot be determined.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.ReferenceManager">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityAspect.EntityPropertyChanged">
            <summary>
            Fired whenever a property value on this Entity changes.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityAspect.PropertyChanged">
            <summary>
            Properties on the EntityAspect that are subject to changed
            and therefore available via the PropertyChanged notification are
            EntityState, EntityKey, IsChanged, HasErrors, and SavingErrorMessage
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.EntityManager">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityManager"/> that manages this entity.
            </summary>
            <remarks>
            This value will be null until an object is attached to an <b>EntityManager</b> or if it was created using an EntityManager.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.EntityState">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityState"/> of this entity.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.EntitySetName">
            <summary>
            The name of the Entity Framework EntitySet containing this entity.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.EntityMetadata">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityMetadata"/> for this Entity.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.EntityGroup">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityGroup"/> that this Entity belongs to.
            </summary>
            <remarks>
            Note that the EntityGroup will never be null (it will be a prototype group 
            in the event that this entity is not yet attached to a specific entity manager. 
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.SerializationContext">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.VerifierEngine">
            <summary>
            Gets the <see cref="T:IdeaBlade.Validation.VerifierEngine"/>
            shared by all entities within the same EntityManager.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.CurrentQueryId">
            <summary>
            An internally generated id that identifies the most recent datasource query to select this entity.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.IsNullEntity">
            <summary>
            Returns whether the current instance is a null entity.
            </summary>
            <remarks>
            The EntityManager will return a NullEntity instead of a null value when
            a requested entity is not found.
            </remarks>
            <example><code lang="C#">
// Sample showing IsNullEntity check.

    DomainModelEntityManager mgr = new DomainModelEntityManager();

    // Try to retrieve order #1 - FirstOrNullEntity will return null entity if not found.
    OrderSummary order = mgr.OrderSummaries.FirstOrNullEntity(o =&gt; o.Id == 1);
    if (order.IsNullEntity)
       Console.WriteLine("Order #1 not found");

    // Now try another order, using FirstOrDefault, which returns null if not found.
    OrderSummary order2 = mgr.OrderSummaries.FirstOrDefault(o =&gt; o.Id == 2);
    if (order2 == null) {
       Console.WriteLine("Order #2 is null");
    } else if (order2.IsNullEntity) {
       Console.WriteLine("Order #2 is a null entity");
    }

    // Note, you can't use .First (since the EF will throw an exception).
    OrderSummary order3 = mgr.OrderSummaries.First(o =&gt; o.Id == 3); 
    
</code></example>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.IsNullOrPendingEntity">
            <summary>
            Returns whether the current instance is a null entity or a pending entity.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.GetSecurityHashCode">
            <summary>
            Hash used to check whether the before image of a data has been tampered with.  This method
            can be overridden to provide a more secure hash if desired.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.EncryptedSecurityHashCode">
            <summary>
            Used internally by the EntityServer to store and retrieve an encrypted version of the
            hash.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.IdeaBlade#Core#ComponentModel#INotifyDataErrorInfo#HasErrors">
            <summary>
            True if there are any validation errors.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityAspect.IdeaBlade#Core#ComponentModel#INotifyDataErrorInfo#ErrorsChanged">
            <summary>
            Raised when validation errors have changed for a property or the object.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.ValidationErrors">
            <summary>
            A collection of verification errors currently present on the associated Entity.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityAspect.EntityReferenceManager">
            <summary>
            A collection of <see cref="T:IdeaBlade.EntityModel.IEntityReference"/> instances for a single entity.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.EntityReferenceManager.#ctor(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            Constructor
            </summary>
            <param name="fromAspect"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.EntityReferenceManager.Get(IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            Returns the <see cref="T:IdeaBlade.EntityModel.IEntityReference"/> corresponding to a specified <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/>.
            </summary>
            <param name="relationLink"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.EntityReferenceManager.Set(IdeaBlade.EntityModel.EntityRelationLink,IdeaBlade.EntityModel.EntityReferenceBase)">
            <summary>
            Sets or adds an <see cref="T:IdeaBlade.EntityModel.IEntityReference"/> for the specified <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/>.
            </summary>
            <param name="relationLink"></param>
            <param name="entityRef"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.EntityReferenceManager.FromAspect">
            <summary>
            The entity to which these references apply.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.EntityReferenceManager.AllReferences">
            <summary>
            A collection of all references.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.EntityReferenceManager.ScalarReferences">
            <summary>
            A collection of all "parent" references.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.EntityReferenceManager.ListReferences">
            <summary>
            A collection of all "child" references.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityAspect.EntityPropertyNames">
            <summary>
            Base for all EntityPropertyNames.
            </summary>
            <remarks>
            Every entity in the generated domain model contains a nested
            <b>EntityPropertyNames</b> class which holds the names of all
            properties in the entity.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityAspect.VerifierErrorsCollection">
            <summary>
            A collection of errant <see cref="T:IdeaBlade.Validation.VerifierResult"/>s.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.VerifierErrorsCollection.UpdateWith(System.Collections.Generic.IEnumerable{IdeaBlade.Validation.VerifierResult})">
            <summary>
            For internal use only.
            </summary>
            <param name="verifierResults"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.VerifierErrorsCollection.Add(IdeaBlade.Validation.VerifierResult)">
            <summary>
            Used to Add an errant VerifierResult to this collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.VerifierErrorsCollection.Clear">
            <summary>
            Clears this collection.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.VerifierErrorsCollection.Contains(IdeaBlade.Validation.VerifierResult)">
            <summary>
            Returns whether this collection contains a specific VerifierResult.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.VerifierErrorsCollection.CopyTo(IdeaBlade.Validation.VerifierResult[],System.Int32)">
            <summary>
            See <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.VerifierErrorsCollection.Remove(IdeaBlade.Validation.VerifierResult)">
            <summary>
            Removes a VerifierResult from this collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityAspect.VerifierErrorsCollection.GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.VerifierErrorsCollection.HasErrors">
            <summary>
            Returns whether this collection contains any errors.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.VerifierErrorsCollection.Count">
            <summary>
            See <see cref="P:System.Collections.ICollection.Count"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityAspect.VerifierErrorsCollection.IsReadOnly">
            <summary>
            See <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/>.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityRefetchedEventArgs">
            <summary>
            Arguments to the completion handler specified for an <see cref="M:IdeaBlade.EntityModel.EntityManager.RefetchEntitiesAsync(IdeaBlade.EntityModel.EntityKeyList,IdeaBlade.EntityModel.MergeStrategy,System.Action{IdeaBlade.EntityModel.EntityRefetchOperation},System.Object)"/> call.
            </summary>
            <remarks>
            <para>
            If you have called EntityManager.RefetchEntitiesAsync, the <see cref="E:IdeaBlade.EntityModel.BaseOperation.Completed">Completed</see> event handler
            will be called with an instance of <b>EntityRefetchedEventArgs</b> representing the results of the
            query operation.  
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRefetchedEventArgs.EntityKeys">
            <summary>
            The Entity keys that were 'refetched' during this operation.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRefetchedEventArgs.ChangedEntities">
             <summary>
             The list of every entity that was either added or modified in the EntityManager's cache
             as a result of this query.
             </summary>
             <remarks>
             The <b>ChangedEntities</b> list may differ from the <see cref="P:IdeaBlade.EntityModel.EntityRefetchedEventArgs.Results"/> because of MergeStrategy.
             <para>
             Note an exception is returned when calling the getter if the asynchronous operation was cancelled or failed, since
             the result is undefined.
             </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRefetchedEventArgs.Results">
            <summary>
            The results of the refetch.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityRefetchOperation">
            <summary>
            Information about an asynchronous refetch operation.
            </summary>
            <remarks>
            Returned by an EntityManager.RefetchEntitiesAsync call.
            The <b>EntityRefetchOperation</b> is also passed to the callback method supplied to the async call.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRefetchOperation.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.EntityKey}},System.Object,System.Action{IdeaBlade.EntityModel.EntityRefetchOperation})">
             <summary>
            
             </summary>
             <param name="entityKeyGroups"></param>
             <param name="userState"></param>
             <param name="callback"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRefetchOperation.#ctor(System.Action{IdeaBlade.EntityModel.EntityRefetchOperation},IdeaBlade.EntityModel.EntityRefetchedEventArgs)">
            <summary>
            WB for testing only. Do not remove even though marked obsolete
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRefetchOperation.EntityKeys">
            <summary>
            The requested query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRefetchOperation.Results">
            <summary>
            The results of the refetch.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRefetchOperation.ChangedEntities">
             <summary>
             The list of every entity that was either added or modified in the EntityManager's cache
             as a result of this query.
             </summary>
             <remarks>
             The <b>ChangedEntities</b> list may differ from the <see cref="P:IdeaBlade.EntityModel.EntityRefetchedEventArgs.Results"/> because of MergeStrategy.
             <para>
             Note an exception is returned when calling the getter if the asynchronous operation was cancelled or failed, since
             the result is undefined.
             </para>
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityManagerOptions">
            <summary>
            Options which control various aspects of an EntityManager's behavior.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManagerOptions.#ctor">
            <summary>
            Creates an instance of this class with default values.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManagerOptions.UpdateWith(IdeaBlade.EntityModel.EntityManagerOptions)">
            <summary>
            Updates this EntityManagerOptions with the values from another.
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManagerOptions.RefetchEntitiesBatchSize">
            <summary>
            When performing a RefetchEntities call, DevForce will break its queries into batches of this size. Default value is 200.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">BatchSize must be between 50 and 750</exception>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManagerOptions.UseDefaultAuthenticationContext">
            <summary>
            Gets or sets whether the EntityManager will use the <see cref="P:IdeaBlade.EntityModel.Security.Authenticator.DefaultAuthenticationContext">Authenticator.DefaultAuthenticationContext</see>.  Default is true.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.CoroutineParallelProcessor.CompletionItem">
            <summary>
            Needed in order to provide state to the HandleCompleted method.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.Coroutine">
            <summary>
            Provides for serial and parallel execution of multiple asynchronous actions.
            </summary>
            <remarks>
            Replaces the <b>AsyncSerialTask</b> and <b>AsyncParallelTask</b> classes, which are obsolete
            and will be removed from the product in early 2011.
            <para>
            Use <see cref="M:IdeaBlade.EntityModel.Coroutine.Start(System.Func{System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.INotifyCompleted}},System.Action{IdeaBlade.EntityModel.CoroutineOperation})"/> to start serial execution of the asynchronous, and synchronous, actions within
            an "iterator".  The iterator is a function which returns an <see cref="T:System.Collections.IEnumerable"/> of objects implementing
            the <see cref="T:IdeaBlade.EntityModel.INotifyCompleted"/> interface.  All asynchronous operations within DevForce return a sub-typed <see cref="T:IdeaBlade.EntityModel.BaseOperation"/>, which
            implements this interface. The <b>Coroutine</b> waits for each operation to complete, either sucessfully or not, and then moves 
            to the next action within the iterator.  
            </para>
            <para>
            Use <see cref="M:IdeaBlade.EntityModel.Coroutine.StartParallel(System.Func{System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.INotifyCompleted}},System.Action{IdeaBlade.EntityModel.CoroutineOperation})"/> to start parallel execution of the asynchronous actions within an iterator.  When run in parallel,
            the <b>Coroutine</b> starts each asynchronous action, and then waits for all actions to complete.
            </para>
            <para>
            For a detailed discussion of the <b>Coroutine</b> and its flow, see the DevForce Resource Center.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Coroutine.Start(System.Func{System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.INotifyCompleted}},System.Action{IdeaBlade.EntityModel.CoroutineOperation})">
            <summary>
            Start serial execution of multiple asynchronous actions.
            </summary>
            <param name="coroutine">An iterator block containing asynchronous actions</param>
            <param name="completedHandler">Optional completion handler</param>
            <returns>A CoroutineOperation representing this operation</returns>
            <remarks>
            Used to start serial execution of the asynchronous, and synchronous, actions within
            the specified iterator block.  Asychronous actions within the block will cause subsequent
            actions to "wait" until each asynchronous operation yields when complete.
            <para>
            See the second example below for how to pass arguments into the iterator.
            </para>
            </remarks>
            <example><code lang="C#">
        <![CDATA[
        
   public void CoroutineSample() {
      // Note that a new EM is not required for a Coroutine, we show it here for completeness.
      _mgr = new DomainModelEntityManager();
      
      // Start some serial async operations.
      var op = Coroutine.Start(SampleActions);
      
      // Listen for completion.
      op.Completed += (s, e) => {
        if (e.HasError) {
          MessageBox.Show(e.Error.Message);
          e.MarkErrorAsHandled();
        } 
      };
    }
    
    private EntityManager _mgr;

    // A block of asynchronous actions.
    private IEnumerable<INotifyCompleted> SampleActions() {

      // Start a query for all customers in specified country, yield when async op completes.
      var op1 = _mgr.Customers.Where(c => c.Country == "UK").ExecuteAsync();
      yield return op1;

      // Resume execution here when op1 completes.  Take a look at results from 1st query
      TraceFns.WriteLine("Customer count = " + op1.Results.Count().ToString());

      // Perform another async quuery for all employees.
      var op2 = _mgr.Employees.ExecuteAsync();
      yield return op2;

      // Resume execution here when op2 completes.  See what it returned.
      TraceFns.WriteLine("Employee count = " + op2.Results.Count().ToString());
    }    
    
    /***************************************************************************************/
    // Sample 2 - passing arguments to an iterator
    
    public void CoroutineSample2a() {
      // Note that a new EM is not required for a Coroutine, we show it here for completeness.
      _mgr = new DomainModelEntityManager();

      // Start some serial async operations.
      var op = Coroutine.Start(() => SampleActions2("USA"));
      
      // Listen for completion.
      op.Completed += (s, e) => {
        if (e.HasError) {
          MessageBox.Show(e.Error.Message);
          e.MarkErrorAsHandled();
        } 
      };
    }
    
    private IEnumerable<INotifyCompleted> SampleActions2(String country) {

      // Start a query for all customers in specified country, yield when async op completes.
      var op1 = _em1.Customers.Where(c => c.Country == country).ExecuteAsync();
      yield return op1;

      // Resume execution here when op1 completes.  Take a look at results from 1st query
      TraceFns.WriteLine("Customer count = " + op1.Results.Count().ToString());

      // Perform another async quuery for all employees.
      var op2 = _em1.Employees.ExecuteAsync();
      yield return op2;

      // Resume execution here when op2 completes.  See what it returned.
      TraceFns.WriteLine("Employee count = " + op2.Results.Count().ToString());
    }
    ]]>

    </code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.Coroutine.Start(System.Func{IdeaBlade.EntityModel.CoroutineOperation,System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.INotifyCompleted}},System.Action{IdeaBlade.EntityModel.CoroutineOperation})">
            <summary>
            Start serial execution of multiple asynchronous actions.
            </summary>
            <param name="coroutine">An iterator block containing asynchronous actions</param>
            <param name="completedHandler">Optional completion handler</param>
            <returns>A CoroutineOperation representing this operation</returns>
            <remarks>
            Used to start serial execution of the asynchronous, and synchronous, actions within
            the specified iterator block.  Asychronous actions within the block will cause subsequent
            actions to "wait" until each asynchronous operation yields when complete.
            <para>
            Use this overload of the <b>Start</b> method when your iterator accepts a <see cref="T:IdeaBlade.EntityModel.CoroutineOperation"/>
            as an argument.  You can use the <b>CoroutineOperation</b> to track the prior operations
            within the iterator.
            </para>
            </remarks>
            <example>
        <code lang="C#">
        <![CDATA[
    public void CoroutineSample2() {
      Coroutine.Start(Sample2Actions, (op) => {
        SaveResult sr = op.Result as SaveResult;
        MessageBox.Show("Save count = " + sr.SavedEntities.Count().ToString());
      });
    }

    private IEnumerable<INotifyCompleted> Sample2Actions(CoroutineOperation coop) {
      // Sample showing use of the CoroutineOperation during processing,
      // and returning a final result to the Coroutine.

      var mgr = new DomainModelEntityManager();

      // Get a few customers
      yield return mgr.Customers.Take(2).ExecuteAsync();
      // See what we got.
      var custs = (coop.Notifications.Last() as EntityQueryOperation<Customer>).Results;

      // Now get a few employees
      yield return mgr.Employees.Take(3).ExecuteAsync();
      // See what we've got
      var emps = (coop.Notifications.Last() as EntityQueryOperation<Employee>).Results;

      // We can also make changes and save.
      emps.ForEach(e => e.Notes = "Updated at " + DateTime.Now.ToString());
      yield return mgr.SaveChangesAsync();

      // Let's return the final result too.
      SaveResult sr = (coop.Notifications.Last() as EntitySaveOperation).SaveResult;
      yield return Coroutine.Return(sr);
    }
    ]]>
      </code>
    </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.Coroutine.Start(System.Collections.Generic.IEnumerable{System.Func{IdeaBlade.EntityModel.INotifyCompleted}},System.Action{IdeaBlade.EntityModel.CoroutineOperation})">
            <summary>
            Start serial execution of multiple asynchronous actions.
            </summary>
            <param name="asyncFns">List of asynchronous functions</param>
            <param name="completedHandler">Optional completion handle</param>
            <returns>A CoroutineOperation representing this operation</returns>
            <remarks>
            Used to start serial execution of a list of asynchronous actions.  Instead of passing an iterator block,
            pass an IEnumerable of the asynchronous functions to be executed.  Asynchronous functions in the list
            will be executed serially.
            <para>
            This overload of the <b>Start</b> method is useful in Visual Basic, where iterators are not supported.
            </para>
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
    public void CoroutineSample3() {
      Coroutine.Start(Sample3Actions(_entityManager), (op) => {
        MessageBox.Show(op.Result.ToString());
      });
    }

    private IEnumerable<Func<INotifyCompleted>> Sample3Actions(DomainModelEntityManager mgr) {
      // Not an iterator block - this returns a list of async actions

      yield return () => mgr.Customers.ExecuteAsync();
      yield return () => mgr.Employees.ExecuteAsync();
      yield return () => Coroutine.Return("all done");
    }
    ]]>
        </code>
        <code lang="VB">
          <![CDATA[
Public Sub CoroutineSample3()
    Coroutine.Start(Sample3Actions(Manager),
        Sub(op As CoroutineOperation)
            MessageBox.Show(op.Result.ToString())
        End Sub)
End Sub

Private Function Sample3Actions(ByVal mgr As NorthwindIBEntities) As IEnumerable(Of Func(Of INotifyCompleted))
    ' Setup of the list of async functions for the Coroutine to execute serially.
    Dim operationList = New List(Of Func(Of INotifyCompleted))

    Dim f1 As Func(Of INotifyCompleted) = Function() mgr.Customers.ExecuteAsync()
    operationList.Add(f1)

    Dim f2 As Func(Of INotifyCompleted) = Function() mgr.Employees.ExecuteAsync()
    operationList.Add(f2)

    Dim f3 As Func(Of INotifyCompleted) = Function() Coroutine.Return("all done")
    operationList.Add(f3)

    Return operationList
End Function
           ]]>
      </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.Coroutine.Start(System.Func{IdeaBlade.EntityModel.CoroutineOperation,System.Collections.Generic.IEnumerable{System.Func{IdeaBlade.EntityModel.INotifyCompleted}}},System.Action{IdeaBlade.EntityModel.CoroutineOperation})">
            <summary>
            Start serial execution of multiple asynchronous actions.
            </summary>
            <param name="asyncFns">List of asynchronous functions</param>
            <param name="completedHandler">Optional completion handle</param>
            <returns>A CoroutineOperation representing this operation</returns>
            <remarks>
            Used to start serial execution of a list of asynchronous actions.  Instead of passing an iterator block,
            pass an IEnumerable of the asynchronous functions to be executed.  Asynchronous functions in the list
            will be executed serially.
            <para>
            Use this overload of the <b>Start</b> method when your iterator accepts a <see cref="T:IdeaBlade.EntityModel.CoroutineOperation"/>
            as an argument.  You can use the <b>CoroutineOperation</b> to track the prior operations
            within the function list.
            </para>
            <para>
            This overload of the <b>Start</b> method is useful in Visual Basic, where iterators are not supported.
            </para>
            </remarks>
            <example>
        <code lang="VB">
          <![CDATA[
Public Sub CoroutineSample4()
    Dim mgr = New NorthwindIBEntities()
    Dim op = Coroutine.Start(Function(coop As CoroutineOperation) Sample3Actions(coop, mgr))
    AddHandler op.Completed, Sub(s As Object, e As CoroutineCompletedEventArgs)
                                 If e.CompletedSuccessfully Then
                                     MessageBox.Show("OK")
                                 End If
                             End Sub
End Sub

Private Function Sample3Actions(ByVal coop As CoroutineOperation, ByVal mgr As NorthwindIBEntities) As IEnumerable(Of Func(Of INotifyCompleted))
    ' Setup of the list of async functions for the Coroutine to execute serially.
    Dim operationList = New List(Of Func(Of INotifyCompleted))

    Dim f1 As Func(Of INotifyCompleted) = Function() mgr.Customers.Take(2).ExecuteAsync()
    operationList.Add(f1)

    Dim f2 As Func(Of INotifyCompleted) =
         Function()
             ' Use the results from the first async query. 
             Dim firstOp = DirectCast(coop.Notifications.First(), EntityQueryOperation(Of Customer))
             Dim customers = firstOp.Results
             Dim cityList = New List(Of String)
             customers.ForEach(Sub(cust As Customer) cityList.Add(cust.City))
             Dim pd = New IdeaBlade.Linq.PredicateDescription(GetType(Order), "Shipcity", IdeaBlade.Linq.FilterOperator.InList, cityList)
             Return mgr.Orders.Where(pd).ExecuteAsync()
         End Function
    operationList.Add(f2)

    Return operationList
End Function
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.Coroutine.StartParallel(System.Func{System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.INotifyCompleted}},System.Action{IdeaBlade.EntityModel.CoroutineOperation})">
            <summary>
            Start parallel exeuction of multiple asynchronous actions.
            </summary>
            <param name="coroutine">An iterator block containing asynchronous actions</param>
            <param name="completedHandler">Optional completion handler</param>
            <returns>A CoroutineOperation representing this operation</returns>
            <remarks>
            Used to start parallel execution of the asynchronous actions within
            the specified iterator block.  Each asychronous action is started on its own thread.
            Once all actions have completed, the completion handler is called.  The <see cref="P:IdeaBlade.EntityModel.CoroutineOperation.Notifications"/>
            can be used to check the results of each action.
            <para>
            See the second example below for how to pass arguments into the iterator.
            </para>
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
    public void CoroutineSampleParallel() {

      // Start some parallel async operations.
      var op = Coroutine.StartParallel(SampleActions);

      // Listen for completion. 
      op.Completed += (s, e) => {
        MessageBox.Show(e.Notifications.Count.ToString() + " operations completed");
        // You can loop thru notifications for results from each operation.
      };
    }

    // A block of asynchronous actions to be performed in parallel.
    private IEnumerable<INotifyCompleted> SampleActions() {

      // Start a query for all customers in specified country.
      yield return _entityManager.Customers.Where(c => c.Country == "UK").ExecuteAsync();

      // Start another query for all employees.  This will run in parallel.
      yield return _entityManager.Employees.ExecuteAsync();
    }              
   
   /***************************************************************************************/
   // Sample 2 - passing arguments to an iterator    
   
    public void CoroutineSampleParallel2() {

      // Start some parallel async operations.
      var op = Coroutine.StartParallel(() => SampleActions2("UK"));

      // Listen for completion. 
      op.Completed += (s, e) => {
        MessageBox.Show(e.Notifications.Count.ToString() + " operations completed");
        // You can loop thru notifications for results from each operation.
      };
    }

    // A block of asynchronous actions to be performed in parallel.
    private IEnumerable<INotifyCompleted> SampleActions2(string country) {

      // Start a query for all customers in specified country.
      yield return _em1.Customers.Where(c => c.Country == country).ExecuteAsync();

      // Start another query for all employeesin specified country. This will run in parallel.
      yield return _em1.Employees.Where(e=> e.Country == country).ExecuteAsync();
    }       
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.Coroutine.StartParallel(System.Func{IdeaBlade.EntityModel.CoroutineOperation,System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.INotifyCompleted}},System.Action{IdeaBlade.EntityModel.CoroutineOperation})">
            <summary>
            Start parallel exeuction of multiple asynchronous actions.
            </summary>
            <param name="coroutine">An iterator block containing asynchronous actions</param>
            <param name="completedHandler">Optional completion handler</param>
            <returns>A CoroutineOperation representing this operation</returns>
            <remarks>
            Used to start parallel execution of the asynchronous actions within
            the specified iterator block.  Each asychronous action is started on its own thread.
            Once all actions have completed, the completion handler is called.  The <see cref="P:IdeaBlade.EntityModel.CoroutineOperation.Notifications"/>
            can be used to check the results of each action.
            <para>
            Use this overload of the <b>StartParallel</b> method when your iterator accepts a <see cref="T:IdeaBlade.EntityModel.CoroutineOperation"/>
            as an argument. 
            </para>
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
    public void CoroutineSampleParallel() {

      // Start some parallel async operations.
      var op = Coroutine.StartParallel(SampleActions);

      // Listen for completion. 
      op.Completed += (s, e) => {
        MessageBox.Show(e.Notifications.Count.ToString() + " operations completed");
        // You can loop thru notifications for results from each operation.
      };
    }

    // A block of asynchronous actions to be performed in parallel.
    private IEnumerable<INotifyCompleted> SampleActions() {

      // Start a query for all customers in specified country.
      yield return _entityManager.Customers.Where(c => c.Country == "UK").ExecuteAsync();

      // Start another query for all employees.  This will run in parallel.
      yield return _entityManager.Employees.ExecuteAsync();
    }              
   
   /***************************************************************************************/
   // Sample 2 - passing arguments to an iterator    
   
    public void CoroutineSampleParallel2() {

      // Start some parallel async operations.
      var op = Coroutine.StartParallel(() => SampleActions2("UK"));

      // Listen for completion. 
      op.Completed += (s, e) => {
        MessageBox.Show(e.Notifications.Count.ToString() + " operations completed");
        // You can loop thru notifications for results from each operation.
      };
    }

    // A block of asynchronous actions to be performed in parallel.
    private IEnumerable<INotifyCompleted> SampleActions2(string country) {

      // Start a query for all customers in specified country.
      yield return _em1.Customers.Where(c => c.Country == country).ExecuteAsync();

      // Start another query for all employeesin specified country. This will run in parallel.
      yield return _em1.Employees.Where(e=> e.Country == country).ExecuteAsync();
    }       
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.Coroutine.StartParallel(System.Collections.Generic.IEnumerable{System.Func{IdeaBlade.EntityModel.INotifyCompleted}},System.Action{IdeaBlade.EntityModel.CoroutineOperation})">
            <summary>
            Start parallel exeuction of multiple asynchronous actions.
            </summary>
            <param name="asyncFns">List of asynchronous functions</param>
            <param name="completedHandler">Optional completion handler</param>
            <returns>A CoroutineOperation representing this operation</returns>
            <remarks>
            Used to start parallel execution of the asynchronous actions within a list of asynchronous functions.
            Each asychronous action is started on its own thread.
            Once all actions have completed, the completion handler is called.  The <see cref="P:IdeaBlade.EntityModel.CoroutineOperation.Notifications"/>
            can be used to check the results of each action.
            <para>
            This overload of the <b>StartParallel</b> method is useful in Visual Basic, where iterators are not supported.
            </para>
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
    public void CoroutineSampleParallel() {

      // Start some parallel async operations.
      var op = Coroutine.StartParallel(SampleActions);

      // Listen for completion. 
      op.Completed += (s, e) => {
        MessageBox.Show(e.Notifications.Count.ToString() + " operations completed");
        // You can loop thru notifications for results from each operation.
      };
    }

    // A block of asynchronous actions to be performed in parallel.
    private IEnumerable<INotifyCompleted> SampleActions() {

      // Start a query for all customers in specified country.
      yield return _entityManager.Customers.Where(c => c.Country == "UK").ExecuteAsync();

      // Start another query for all employees.  This will run in parallel.
      yield return _entityManager.Employees.ExecuteAsync();
    }              
   
   /***************************************************************************************/
   // Sample 2 - passing arguments to an iterator    
   
    public void CoroutineSampleParallel2() {

      // Start some parallel async operations.
      var op = Coroutine.StartParallel(() => SampleActions2("UK"));

      // Listen for completion. 
      op.Completed += (s, e) => {
        MessageBox.Show(e.Notifications.Count.ToString() + " operations completed");
        // You can loop thru notifications for results from each operation.
      };
    }

    // A block of asynchronous actions to be performed in parallel.
    private IEnumerable<INotifyCompleted> SampleActions2(string country) {

      // Start a query for all customers in specified country.
      yield return _em1.Customers.Where(c => c.Country == country).ExecuteAsync();

      // Start another query for all employeesin specified country. This will run in parallel.
      yield return _em1.Employees.Where(e=> e.Country == country).ExecuteAsync();
    }       
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.Coroutine.StartParallel(System.Func{IdeaBlade.EntityModel.CoroutineOperation,System.Collections.Generic.IEnumerable{System.Func{IdeaBlade.EntityModel.INotifyCompleted}}},System.Action{IdeaBlade.EntityModel.CoroutineOperation})">
            <summary>
            Start parallel exeuction of multiple asynchronous actions.
            </summary>
            <param name="asyncFns">List of asynchronous functions</param>
            <param name="completedHandler">Optional completion handler</param>
            <returns>A CoroutineOperation representing this operation</returns>
            <remarks>
            Used to start parallel execution of the asynchronous actions within a list of asynchronous functions.
            Each asychronous action is started on its own thread.
            Once all actions have completed, the completion handler is called.  The <see cref="P:IdeaBlade.EntityModel.CoroutineOperation.Notifications"/>
            can be used to check the results of each action.
            <para>
            Use this overload of the <b>StartParallel</b> method when your iterator accepts a <see cref="T:IdeaBlade.EntityModel.CoroutineOperation"/>
            as an argument. 
            </para>
            <para>
            This overload of the <b>StartParallel</b> method is useful in Visual Basic, where iterators are not supported.
            </para>
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
    public void CoroutineSampleParallel() {

      // Start some parallel async operations.
      var op = Coroutine.StartParallel(SampleActions);

      // Listen for completion. 
      op.Completed += (s, e) => {
        MessageBox.Show(e.Notifications.Count.ToString() + " operations completed");
        // You can loop thru notifications for results from each operation.
      };
    }

    // A block of asynchronous actions to be performed in parallel.
    private IEnumerable<INotifyCompleted> SampleActions() {

      // Start a query for all customers in specified country.
      yield return _entityManager.Customers.Where(c => c.Country == "UK").ExecuteAsync();

      // Start another query for all employees.  This will run in parallel.
      yield return _entityManager.Employees.ExecuteAsync();
    }              
   
   /***************************************************************************************/
   // Sample 2 - passing arguments to an iterator    
   
    public void CoroutineSampleParallel2() {

      // Start some parallel async operations.
      var op = Coroutine.StartParallel(() => SampleActions2("UK"));

      // Listen for completion. 
      op.Completed += (s, e) => {
        MessageBox.Show(e.Notifications.Count.ToString() + " operations completed");
        // You can loop thru notifications for results from each operation.
      };
    }

    // A block of asynchronous actions to be performed in parallel.
    private IEnumerable<INotifyCompleted> SampleActions2(string country) {

      // Start a query for all customers in specified country.
      yield return _em1.Customers.Where(c => c.Country == country).ExecuteAsync();

      // Start another query for all employeesin specified country. This will run in parallel.
      yield return _em1.Employees.Where(e=> e.Country == country).ExecuteAsync();
    }       
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.Coroutine.Cancel(IdeaBlade.EntityModel.CoroutineOperation)">
            <summary>
            Cancel a currently running coroutine.
            </summary>
            <param name="coroutineOperation"></param>
            <returns></returns>
            <remarks>
            If the iterator is still running, cancels all operations which haven't yet completed.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Coroutine.Return(System.Object)">
            <summary>
            Used to return a result from within a Coroutine iterator. 
            </summary>
            <param name="result">Result to be returned to completion handler</param>
            <returns></returns>
            <remarks>
            Any actions within the iterator following the <b>Return</b> are not executed.
            Note that this method is of limited use where used within a coroutine running 'parallel'
            because the return will likely 'return' before any async results and will thus effectively cancel all other pending operations.</remarks>
            <example>
        <code lang="C#">
        <![CDATA[
   public void SampleCoroutineWithResult() {
      var op = Coroutine.Start(CoroutineWithResult);
      op.Completed += (s, e) => {
        MessageBox.Show(e.Result.ToString());
      };
    }

    public IEnumerable<INotifyCompleted> CoroutineWithResult() {

      // A few async actions
      yield return _em1.Customers.Take(3).ExecuteAsync();
      
      yield return _em1.Areas.Take(2).ExecuteAsync();

      // Return something to the caller (showing that the result
      // returned to caller is whatever you want it to be).
      yield return Coroutine.Return("Hello World");
    }        
    ]]>
      </code>
    </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.Coroutine.Fail(System.Exception,System.Boolean,System.Boolean)">
            <summary>
            Used to force a failed or cancelled return from within a Coroutine iterator.
            </summary>
            <param name="error">The exception to return to caller</param>
            <param name="isErrorHandled">If true you will not need to call MarkErrorAsHandled in a completion handler</param>
            <param name="cancelled">Indicates a cancelled operation </param>
            <returns></returns>
            <remarks>
            Use <b>Fail</b> within an iterator to force an exit from further processing within the iterator.  The completion
            handler will receive indication of the error or cancellation.  
            </remarks>
            <example>
        <code lang="C#">
        <![CDATA[
    public void SampleCoroutineWithFail() {
      var op = Coroutine.Start(CoroutineWithFail);
      op.Completed += (s, e) => {
        if (e.HasError) {
           MessageBox.Show(e.Error.Message);
        }
      };
    }

    public IEnumerable<INotifyCompleted> CoroutineWithFail() {
      // Do 1 operation
      yield return _entityManager.Customers.Take(3).ExecuteAsync();
      
      // Let's fail now, why not?
      yield return Coroutine.Fail(new Exception("failed here"), true);

      // This operation will never be run because of the fail above.
      var op2 = _em1.Areas.Take(2).ExecuteAsync();
    }
        
    ]]>
      </code>
    </example>
        </member>
        <member name="T:IdeaBlade.EntityModel.CoroutineOperation">
            <summary>
            Returned by a <see cref="M:IdeaBlade.EntityModel.Coroutine.Start(System.Func{System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.INotifyCompleted}},System.Action{IdeaBlade.EntityModel.CoroutineOperation})"/> or <see cref="M:IdeaBlade.EntityModel.Coroutine.StartParallel(System.Func{System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.INotifyCompleted}},System.Action{IdeaBlade.EntityModel.CoroutineOperation})"/> call.
            </summary>
            <remarks>
            Use the <b>CoroutineOperation</b> to track the status of the coroutine iterator.  You can
            add a <see cref="E:IdeaBlade.EntityModel.BaseOperation.Completed">Completed</see> event handler to process results.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.CoroutineOperation.#ctor(System.Object,System.Exception,System.Boolean,System.Boolean)">
            <summary>
            May be used to return results of the coroutine back to 
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.CoroutineOperation.CancelCore">
            <summary>
            Cancel processing.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.CoroutineOperation.Result">
            <summary>
            The result returned by an iterator.
            </summary>
            <remarks>
            If you do not call <see cref="M:IdeaBlade.EntityModel.Coroutine.Return(System.Object)"/> within your iterator to return a result, then the result here will be null.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.CoroutineOperation.Notifications">
            <summary>
            The asynchronous actions performed by the iterator block.
            </summary>
            <remarks>
            Use the <b>Notifications</b> to track the results of each asynchronous operation within the iterator.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.CoroutineCompletedEventArgs">
            <summary>
            Arguments to a <see cref="T:IdeaBlade.EntityModel.Coroutine"/> completion handler.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.CoroutineCompletedEventArgs.#ctor">
            <summary>
            Used during normal construction.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.CoroutineCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean,System.Boolean)">
            <summary>
            Used by Coroutine.Return and Coroutine.Fail methods
            </summary>
            <param name="result"></param>
            <param name="error"></param>
            <param name="isErrorHandled"></param>
            <param name="cancelled"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.CoroutineCompletedEventArgs.Result">
            <summary>
            The result returned by an iterator.
            </summary>
            <remarks>
            If you do not call <see cref="M:IdeaBlade.EntityModel.Coroutine.Return(System.Object)"/> within your iterator to return a result, then the result here will be null.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.CoroutineCompletedEventArgs.Notifications">
            <summary>
            The asynchronous actions performed by the iterator block.
            </summary>
            <remarks>
            Use the <b>Notifications</b> to track the results of each asynchronous operation within the iterator.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityServerFakeBackingStore">
            <summary>
            Interface implemented by fake backing stores.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerFakeBackingStore.Clear">
            <summary>
            Clears all data from the backing store.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerFakeBackingStore.Remove">
            <summary>
            Removes this instance from internal storage.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerFakeBackingStore.GetEntityCacheState">
            <summary>
            Returns the backing store as an EntityCacheState.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerFakeBackingStore.Save(System.String)">
            <summary>
            Saves the backing store (in <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> format) to the specified file.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerFakeBackingStore.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the backing store (in <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> format) to the specified stream.
            </summary>
            <param name="stream"></param>
            <param name="useBinaryFormat"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerFakeBackingStore.Restore(System.String,System.Boolean,IdeaBlade.EntityModel.MergeStrategy)">
            <summary>
            Restores the backing store's cache from the file specified.
            </summary>
            <param name="fileName"></param>
            <param name="shouldReplace"></param>
            <param name="mergeStrategy"></param>
            <remarks>
            The file should have been saved previously using either <see cref="M:IdeaBlade.EntityModel.IEntityServerFakeBackingStore.Save(System.String)"/> or the 
            <see cref="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.String,System.Boolean)">SaveCacheState</see> method of the <see cref="T:IdeaBlade.EntityModel.CacheStateManager"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerFakeBackingStore.Restore(System.IO.Stream,System.Boolean,IdeaBlade.EntityModel.MergeStrategy,System.Boolean)">
            <summary>
            Restores the backing store's cache from the stream specified.
            </summary>
            <param name="stream"></param>
            <param name="shouldReplace"></param>
            <param name="mergeStrategy"></param>
            <param name="useBinaryFormat"></param>
            <remarks>
            The stream should have been saved previously using either <see cref="M:IdeaBlade.EntityModel.IEntityServerFakeBackingStore.Save(System.IO.Stream,System.Boolean)"/> or the 
            <see cref="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.IO.Stream,System.Boolean,System.Boolean)">SaveCacheState</see> method of the <see cref="T:IdeaBlade.EntityModel.CacheStateManager"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerFakeBackingStore.Restore(IdeaBlade.EntityModel.EntityCacheState,System.Boolean,IdeaBlade.EntityModel.MergeStrategy)">
            <summary>
            Restores the backing store's cache from the <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> specified.
            </summary>
            <param name="entityCacheState"></param>
            <param name="shouldReplace"></param>
            <param name="mergeStrategy"></param>
            <remarks>
            The stream should have been saved previously using either <see cref="M:IdeaBlade.EntityModel.IEntityServerFakeBackingStore.Save(System.IO.Stream,System.Boolean)"/> or the 
            <see cref="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.IO.Stream,System.Boolean,System.Boolean)">SaveCacheState</see> method of the <see cref="T:IdeaBlade.EntityModel.CacheStateManager"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerFakeBackingStore.ClearAsync(System.Action{IdeaBlade.EntityModel.InvokeServerMethodOperation})">
            <summary>
            Clears all data from the backing store.
            </summary>
            <param name="onCompletedAction"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerFakeBackingStore.GetEntityCacheStateAsync(System.Action{IdeaBlade.EntityModel.InvokeServerMethodOperation})">
            <summary>
            Returns the backing store as an EntityCacheState.
            </summary>
            <param name="onCompletedAction"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerFakeBackingStore.SaveAsync(System.String,System.Action{IdeaBlade.EntityModel.InvokeServerMethodOperation})">
            <summary>
            Saves the backing store (in <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> format) to the specified file.
            </summary>
            <param name="fileName"></param>
            <param name="onCompletedAction"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerFakeBackingStore.SaveAsync(System.IO.Stream,System.Boolean,System.Action{IdeaBlade.EntityModel.InvokeServerMethodOperation})">
            <summary>
            Saves the backing store (in <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> format) to the specified stream.
            </summary>
            <param name="stream"></param>
            <param name="useBinaryFormat"></param>
            <param name="onCompletedAction"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerFakeBackingStore.RestoreAsync(System.String,System.Boolean,IdeaBlade.EntityModel.MergeStrategy,System.Action{IdeaBlade.EntityModel.InvokeServerMethodOperation})">
            <summary>
            Restores the backing store's cache from the file specified.
            </summary>
            <param name="fileName"></param>
            <param name="shouldReplace"></param>
            <param name="mergeStrategy"></param>
            <param name="onCompletedAction"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerFakeBackingStore.RestoreAsync(System.IO.Stream,System.Boolean,IdeaBlade.EntityModel.MergeStrategy,System.Boolean,System.Action{IdeaBlade.EntityModel.InvokeServerMethodOperation})">
            <summary>
            Restores the backing store's cache from the stream specified.
            </summary>
            <param name="stream"></param>
            <param name="shouldReplace"></param>
            <param name="mergeStrategy"></param>
            <param name="useBinaryFormat"></param>
            <param name="onCompletedAction"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerFakeBackingStore.RestoreAsync(IdeaBlade.EntityModel.EntityCacheState,System.Boolean,IdeaBlade.EntityModel.MergeStrategy,System.Action{IdeaBlade.EntityModel.InvokeServerMethodOperation})">
            <summary>
            Restores the backing store's cache from the <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> specified.
            </summary>
            <param name="entityCacheState"></param>
            <param name="shouldReplace"></param>
            <param name="mergeStrategy"></param>
            <param name="onCompletedAction"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityServerFakeBackingStore.CompositionContextName">
            <summary>
            Returns the name of the composition context.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityManagerContext">
            <summary>
            Allow the construction parameters of an EntityManager to be created independently of the EntityManager.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManagerContext.#ctor(System.Boolean,System.String,IdeaBlade.EntityModel.EntityServiceOption,System.String,IdeaBlade.EntityModel.EntityManagerOptions,System.String)">
            <summary>
            Allow the construction parameters of an EntityManager to be created independently of the EntityManager.
            </summary>
            <param name="shouldConnect"></param>
            <param name="dataSourceExtension"></param>
            <param name="entityServiceOption"></param>
            <param name="compositionContextName"></param>
            <param name="options"></param>
            <param name="serviceKey"></param>
            <remarks>
            You can use the <paramref name="dataSourceExtension"/> to determine the run-time data source key(s) to be
            used.  Every EntityManager (and EntityServer) is associated with a data source extension.  By default, if an
            extension is not specified, then an "empty" extension is used.  See the "Data Source Keys, DataSourceKeyResolvers, and Data Source Extensions"
            topic in the DevForce Resource Center for more information on data source extensions. 
            The use of different data source extensions can be especially beneficial as you move your application between
            development, test and production environments, and for other situations in which the data source to be accessed 
            will be determined at run time.  The resolved <b>DataSourceKey</b>(s) must either be specified in the
            <b>IdeaBlade configuration</b> file or through a custom implementation of <see cref="T:IdeaBlade.EntityModel.IDataSourceKeyResolver"/>.
            <para>
            You can also choose whether a connection to the <see cref="T:IdeaBlade.EntityModel.Server.EntityServer"/>
            should be made now.  If <paramref name="shouldConnect"/> is <c>true</c> you will not be able to catch
            any <see cref="T:IdeaBlade.EntityModel.EntityServerException"/> thrown due to connection problems in an
            <see cref="E:IdeaBlade.EntityModel.EntityManager.EntityServerError"/> handler since the handler will not yet be set; you
            should instead wrap the call in a try/catch. If <paramref name="shouldConnect"/> is <c>false</c>
            then you will need to call the <see cref="M:IdeaBlade.EntityModel.EntityManager.Connect"/> method when you are ready to begin communicating with the 
            EntityServer.
            </para>
            <para>
            Use the <paramref name="entityServiceOption"/> to explicitly specify whether you will be using local or
            distributed data sources.  By default the <see cref="P:IdeaBlade.Core.IdeaBladeConfig.ObjectServer">ObjectServer</see> element in the IdeaBlade configuration file  
            determines this, but if you need to use both local and distributed data sources within the same application you'll use
            the EntityServiceOption to indicate what the EntityManager will use.  See the "Access Both Local and Remote Data Sources 
            In the Same N-tier Application" topic in the DevForce Resource Center for more information.
            </para>
            <para>
            You can also provide the name of the <see cref="T:IdeaBlade.Core.Composition.CompositionContext">CompositionContext</see> 
            to be used to compose parts for runtime extensibility. By default if you don't provide a name the "default" context is used.  
            See the <see cref="T:IdeaBlade.Core.Composition.CompositionContext">CompositionContext</see>  for more information and sample usage.
            </para>
            <para>
            Use the <see cref="P:IdeaBlade.EntityModel.EntityManagerContext.ServiceKey"/> to specify the named <see cref="P:IdeaBlade.Core.IdeaBladeConfig.ServiceKeyElement">serviceKey</see> element
            indicating the address of the application server used by the EntityManager.  
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManagerContext.ShouldConnect">
            <summary>
            Whether the EntityManager will attempt to connect to the EntityServer as soon as it is created.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManagerContext.DataSourceExtension">
            <summary>
            Used to determine what run-time data source key(s) will be used.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManagerContext.EntityServiceOption">
            <summary>
            Used to explicitly specify whether you will be using local or distributed data sources.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManagerContext.CompositionContextName">
            <summary>
            Used to modify how DevForce discovers the implementations of any interfaces that it probes for.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManagerContext.Options">
            <summary>
            Additional options controlling the behavior of the EntityManager.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManagerContext.ServiceKey">
            <summary>
            Names the key providing the address of the application server with which the EntityManager will communicate.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.CompostionContextExtensions">
            <summary>
            Extensions for use with the <see cref="T:IdeaBlade.Core.Composition.CompositionContext"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.CompostionContextExtensions.GetFakeBackingStore(IdeaBlade.Core.Composition.CompositionContext,System.Nullable{System.Boolean})">
            <summary>
            Get the fake backing store for the context.
            </summary>
            <param name="compositionContext"></param>
            <param name="isRemote"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityServerFakeBackingStore">
            <summary>
            A fake which can be used to provide a non-database backing store during testing.
            </summary>
            <remarks>
            The <b>EntityServerFakeBackingStore</b> is automatically used when using the <see cref="F:IdeaBlade.Core.Composition.CompositionContext.Fake">Fake</see> 
            <see cref="T:IdeaBlade.Core.Composition.CompositionContext">CompositionContext</see>. It is used by the <b>EdmQueryExecutorFake</b> and <b>EdmSaveExecutorFake</b> to provide a fake backing store
            for the <b>EntityServer</b>.  The <see cref="T:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Local"/> store is used for 2-tier (non-distributed) environments, while the <see cref="T:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Remote"/> store
            is used in n-tier environments, such as a DevForce Silverlight application.
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
   public void SampleTestWithFakeStore() {
   
      // Load some data for this sample and save to a file.
      var em = new DomainModelEntityManager();
      em.Customers.ToList();
      em.Employees.ToList();
      string fileName = @"c:\temp\cachefile.bin";
      em.CacheStateManager.SaveCacheState(fileName);

      // Create an EM with the Fake CompositionContext.
      var emFake = new DomainModelEntityManager(compositionContextName: CompositionContext.Fake.Name);
      // Load the fake backing store with the data cached to a file above.
      EntityServerFakeBackingStore.Local.Instance.Restore(fileName, RestoreStrategy.Normal);

      // Now issue queries with data from the fake store.
      var customersInUK = emFake.Customers.Where(c => c.Country == "UK").ToList();
    }          
                  ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Invoke(System.Security.Principal.IPrincipal,IdeaBlade.EntityModel.EntityManager,System.Object[])">
            <summary>
            Called by the <see cref="T:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Remote"/> backing store to execute service calls on the server.
            </summary>
            <param name="p"></param>
            <param name="em"></param>
            <param name="args"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityServerFakeBackingStore.AsyncBackingStore">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.AsyncBackingStore.ClearAsync(System.Action{IdeaBlade.EntityModel.InvokeServerMethodOperation})">
            <summary>
            Clears all data from the backing store.
            </summary>
            <param name="onCompletedAction"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.AsyncBackingStore.GetEntityCacheStateAsync(System.Action{IdeaBlade.EntityModel.InvokeServerMethodOperation})">
            <summary>
            Returns the backing store as an EntityCacheState.
            </summary>
            <param name="onCompletedAction"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.AsyncBackingStore.SaveAsync(System.String,System.Action{IdeaBlade.EntityModel.InvokeServerMethodOperation})">
            <summary>
            Saves the backing store (in <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> format) to the specified file.
            </summary>
            <param name="fileName"></param>
            <param name="onCompletedAction"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.AsyncBackingStore.SaveAsync(System.IO.Stream,System.Boolean,System.Action{IdeaBlade.EntityModel.InvokeServerMethodOperation})">
            <summary>
            Saves the backing store (in <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> format) to the specified stream.
            </summary>
            <param name="stream"></param>
            <param name="useBinaryFormat"></param>
            <param name="onCompletedAction"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.AsyncBackingStore.RestoreAsync(System.String,System.Boolean,IdeaBlade.EntityModel.MergeStrategy,System.Action{IdeaBlade.EntityModel.InvokeServerMethodOperation})">
            <summary>
            Restores the backing store's cache from the file specified.
            </summary>
            <param name="fileName"></param>
            <param name="shouldReplace"></param>
            <param name="mergeStrategy"></param>
            <param name="onCompletedAction"></param>
            <remarks>
            Note that the file should exist on the server.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.AsyncBackingStore.RestoreAsync(System.IO.Stream,System.Boolean,IdeaBlade.EntityModel.MergeStrategy,System.Boolean,System.Action{IdeaBlade.EntityModel.InvokeServerMethodOperation})">
            <summary>
            Restores the backing store's cache from the stream specified.
            </summary>
            <param name="stream"></param>
            <param name="shouldReplace"></param>
            <param name="mergeStrategy"></param>
            <param name="useBinaryFormat"></param>
            <param name="onCompletedAction"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.AsyncBackingStore.RestoreAsync(IdeaBlade.EntityModel.EntityCacheState,System.Boolean,IdeaBlade.EntityModel.MergeStrategy,System.Action{IdeaBlade.EntityModel.InvokeServerMethodOperation})">
            <summary>
            Restores the backing store's cache from the <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> specified.
            </summary>
            <param name="entityCacheState"></param>
            <param name="shouldReplace"></param>
            <param name="mergeStrategy"></param>
            <param name="onCompletedAction"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerFakeBackingStore.AsyncBackingStore.CompositionContextName">
            <summary>
            The <see cref="T:IdeaBlade.Core.Composition.CompositionContext"/> associated with this backing store.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Local">
            <summary>
            A fake backing store used with a local EntityServer in 2-tier mode.
            </summary>
            <remarks>
            A disconnected <see cref="P:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Local.EntityManager"/> is used as the local backing store.  The backing store
            can be restored from a previously saved <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> to pre-load data.  The store
            can also be saved to a file or stream.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Local.GetInstance(System.String)">
            <summary>
            Returns the backing store for this composition context name. 
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Local.RemoveInstance(System.String)">
            <summary>
            Removes the backing store for this composition context name. 
            </summary>
            <param name="compositionContextName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Local.Clear">
            <summary>
            Clears all data from the backing store.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Local.Remove">
            <summary>
            Removes this instance from internal storage.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Local.GetEntityCacheState">
            <summary>
            Returns the backing store as an EntityCacheState.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Local.Save(System.String)">
            <summary>
            Saves the backing store (in <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> format) to the specified file.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Local.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the backing store (in <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> format) to the specified stream.
            </summary>
            <param name="stream"></param>
            <param name="useBinaryFormat"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Local.Restore(System.String,System.Boolean,IdeaBlade.EntityModel.MergeStrategy)">
            <summary>
            Restores the backing store's cache from the file specified.
            </summary>
            <param name="fileName"></param>
            <param name="shouldReplace"></param>
            <param name="mergeStrategy"></param>
            <remarks>
            The file should have been saved previously using either <see cref="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Local.Save(System.String)"/> or the 
            <see cref="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.String,System.Boolean)">SaveCacheState</see> method of the <see cref="T:IdeaBlade.EntityModel.CacheStateManager"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Local.Restore(System.IO.Stream,System.Boolean,IdeaBlade.EntityModel.MergeStrategy,System.Boolean)">
            <summary>
            Restores the backing store's cache from the stream specified.
            </summary>
            <param name="stream"></param>
            <param name="shouldReplace"></param>
            <param name="mergeStrategy"></param>
            <param name="useBinaryFormat"></param>
            <remarks>
            The stream should have been saved previously using either <see cref="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Local.Save(System.IO.Stream,System.Boolean)"/> or the 
            <see cref="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.IO.Stream,System.Boolean,System.Boolean)">SaveCacheState</see> method of the <see cref="T:IdeaBlade.EntityModel.CacheStateManager"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Local.Restore(IdeaBlade.EntityModel.EntityCacheState,System.Boolean,IdeaBlade.EntityModel.MergeStrategy)">
            <summary>
            Restores the backing store's cache from the <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> specified.
            </summary>
            <param name="entityCacheState"></param>
            <param name="shouldReplace"></param>
            <param name="mergeStrategy"></param>
            <remarks>
            The stream should have been saved previously using either <see cref="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Local.Save(System.IO.Stream,System.Boolean)"/> or the 
            <see cref="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.IO.Stream,System.Boolean,System.Boolean)">SaveCacheState</see> method of the <see cref="T:IdeaBlade.EntityModel.CacheStateManager"/>.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Local.EntityManager">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Remote">
            <summary>
            A fake backing store used with a remote EntityServer in n-tier mode.
            </summary>
            <remarks>
            A connected <see cref="P:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Remote.EntityManager"/> is used as the local backing store.  The EntityManager must be
            able to both connect and login to the EntityServer in order to make remote service calls.
            The backing store
            can be restored from a previously saved <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> to pre-load data.  The store
            can also be saved to a file or stream.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Remote.GetInstance(System.String)">
            <summary>
            Returns the singleton instance for the composition context name.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Remote.RemoveInstance(System.String)">
            <summary>
            Removes the backing store instance for the specified composition context name.
            </summary>
            <param name="compositionContextName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Remote.Clear">
            <summary>
            Clears all data from the backing store.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Remote.Remove">
            <summary>
            Removes this instance from internal storage.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Remote.GetEntityCacheState">
            <summary>
            Returns the backing store as an EntityCacheState.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Remote.Save(System.String)">
            <summary>
            Saves the backing store (in <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> format) to the specified file.
            </summary>
            <param name="fileName"></param>
            <remarks>
            Note that the file is saved on the server.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Remote.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the backing store (in <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> format) to the specified stream.
            </summary>
            <param name="stream"></param>
            <param name="useBinaryFormat"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Remote.Restore(System.String,System.Boolean,IdeaBlade.EntityModel.MergeStrategy)">
            <summary>
            Restores the backing store's cache from the file specified.
            </summary>
            <param name="fileName"></param>
            <param name="shouldReplace"></param>
            <param name="mergeStrategy"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Remote.Restore(System.IO.Stream,System.Boolean,IdeaBlade.EntityModel.MergeStrategy,System.Boolean)">
            <summary>
            Restores the backing store's cache from the stream specified.
            </summary>
            <param name="stream"></param>
            <param name="shouldReplace"></param>
            <param name="mergeStrategy"></param>
            <param name="useBinaryFormat"></param>
            <remarks>
            The stream should have been saved previously using either <see cref="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Remote.Save(System.IO.Stream,System.Boolean)"/> or the 
            <see cref="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.IO.Stream,System.Boolean,System.Boolean)">SaveCacheState</see> method of the <see cref="T:IdeaBlade.EntityModel.CacheStateManager"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerFakeBackingStore.Remote.Restore(IdeaBlade.EntityModel.EntityCacheState,System.Boolean,IdeaBlade.EntityModel.MergeStrategy)">
            <summary>
            Restores the backing store's cache from the <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> specified.
            </summary>
            <param name="entityCacheState"></param>
            <param name="shouldReplace"></param>
            <param name="mergeStrategy"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.FakeIdGenerator">
            <summary>
            Acts as both IIdGenerator and IIdentityGenerator implementation.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IIdentityIdGenerator">
            <summary>
            Interface for generation of unique IDs for new <see cref="T:IdeaBlade.EntityModel.IEntity"/> objects having <b>Identity</b> properties.
            </summary>
            <remarks>
            This interface is primarily intended as a marker interface to support the default implementation of the 
            <see cref="T:IdeaBlade.EntityModel.StoreGeneratedIdGenerator"/>, but users can 
            implement custom classes if necessary.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.IIdGenerator">
            <summary>
            Interface for generation of unique IDs for new <see cref="T:IdeaBlade.EntityModel.IEntity"/> objects.
            </summary>
            <remarks>
            The <b>IIdGenerator</b> interface defines methods to generate both temporary and real IDs for 
            <see cref="T:IdeaBlade.EntityModel.IEntity"/> objects, and to map the temporary IDs to real IDs when objects 
            are persisted to a backend data source.  Temporary IDs are created via a call to
            <see cref="M:IdeaBlade.EntityModel.EntityManager.GenerateId(System.Object,IdeaBlade.EntityModel.DataEntityProperty)"/>, and allow
            entities to be created and uniquely identified while the EntityManager is disconnected from a backend database.
            Temporary IDs are mapped to real IDs during <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges"/>
            processing.
            <para>
            Sample code in both VB.NET and C# showing an implementation for ID values of the long datatype is provided 
            with the DevForce installation.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.IIdGenerator.IsApplicable(IdeaBlade.EntityModel.IDataSourceKey)">
            <summary>
            Returns whether the IdGenerator can be used with the specified data source key.
            </summary>
            <param name="dataSourceKey"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IIdGenerator.GetNextTempId(IdeaBlade.EntityModel.DataEntityProperty)">
            <summary>
            Generates a new temporary ID for a specified EntityProperty.  
            </summary>
            <param name="property">Property for which a new ID should be generated</param>
            <returns>A new temporary ID</returns>
            <remarks>The definition of a "temporary" ID is user-defined.  In the sample code for a "LongIdGenerator"
            negative integers are used as temporary IDs. 
            <para>This method should also store the temporary IDs generated in a <see cref="T:IdeaBlade.EntityModel.UniqueIdCollection"/>.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.IIdGenerator.IsTempId(IdeaBlade.EntityModel.UniqueId)">
            <summary>
            Determines whether a given ID is temporary.
            </summary>
            <param name="uniqueId">ID to be analyzed</param>
            <returns>true if the ID is temporary; otherwise false</returns>
            <remarks>The <see cref="P:IdeaBlade.EntityModel.UniqueId.Value"/> contains the ID to be tested.
            You can use the <see cref="P:IdeaBlade.EntityModel.EntityProperty.EntityType"/> property of the <see cref="P:IdeaBlade.EntityModel.UniqueId.Property"/>
            to determine the <see cref="T:IdeaBlade.EntityModel.IEntity"/> type.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.IIdGenerator.Reset">
            <summary>
            Reset temporary ID generation back to its initial state. 
            </summary>
            <remarks>Called by the <see cref="T:IdeaBlade.EntityModel.EntityManager"/> after Id fixup
            during <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges"/> processing.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.IIdGenerator.GetRealIdMap(IdeaBlade.EntityModel.UniqueIdCollection,IdeaBlade.EntityModel.IDataSourceKey)">
            <summary>
            Returns a dictionary that maps temporary IDs to real IDs.
            </summary>
            <remarks>
            In the <see cref="T:IdeaBlade.EntityModel.UniqueIdMap"/> returned, the <see cref="T:IdeaBlade.EntityModel.UniqueId"/> key contains the 
            temporary ID, while the value holds the real ID.
            <para>
            <b>GetRealIdMap</b> is called by the <see cref="T:IdeaBlade.EntityModel.EntityManager"/> during <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges"/> processing.
            The collection of temporary IDs passed in may contain entries for multiple entity types.
            You can use the <see cref="T:IdeaBlade.EntityModel.IDataSourceKey"/> passed to manage access to the backend data source to determine real IDs.
            </para>
            <para>In an n-tier deployment, this method is called only on the "server" instance of this class.</para>
            <para>The definition of a "real" ID is user-defined.</para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.IIdGenerator.TempIds">
            <summary>
            Returns the temporary IDs generated since instantiation of this class or the last <see cref="M:IdeaBlade.EntityModel.IIdGenerator.Reset"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IIdentityIdGenerator.NextIdGenerator">
            <summary>
            Gets or sets the fallback <see cref="T:IdeaBlade.EntityModel.IIdGenerator"/> to be used.
            </summary>
            <value>The next id generator.</value>
            <remarks>
            This value is set by by DevForce during IdGenerator discovery.
            </remarks>
        </member>
        <member name="F:IdeaBlade.EntityModel.FakeIdGenerator.NextIdSeed">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.FakeIdGenerator.#ctor">
            <summary>
            Creates a new instance of this class.  Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.FakeIdGenerator.IsApplicable(IdeaBlade.EntityModel.IDataSourceKey)">
            <summary>
            Returns whether this generator can be used with the specified data source.
            </summary>
            <param name="dataSourceKey"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.FakeIdGenerator.GetNextTempId(IdeaBlade.EntityModel.DataEntityProperty)">
            <summary>
            Returns a temporary ID value for the specified property.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.FakeIdGenerator.IsTempId(IdeaBlade.EntityModel.UniqueId)">
            <summary>
            Returns whether the specified ID is a temporary ID.
            </summary>
            <param name="uniqueId"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.FakeIdGenerator.Reset">
            <summary>
            Reset temporary ID generation back to its initial state. 
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.FakeIdGenerator.GetRealIdMap(IdeaBlade.EntityModel.UniqueIdCollection,IdeaBlade.EntityModel.IDataSourceKey)">
            <summary>
            Returns a dictionary that maps temporary IDs to real IDs.
            </summary>
            <param name="tempIds"></param>
            <param name="dataSourceKey"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.FakeIdGenerator.TempIds">
            <summary>
            Returns the collection of temporary IDs.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.FakeIdGenerator.TempIdCache">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.FakeIdGenerator.NextIdGenerator">
            <summary>
            Not used internally.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IAuthenticationProvider">
            <summary>
            Probed interface used to return an <see cref="T:IdeaBlade.EntityModel.IAuthenticationManager"/>.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.IAuthenticationProvider.GetAuthenticationManager">
            <summary>
            Return an implementation of <see cref="T:IdeaBlade.EntityModel.IAuthenticationManager"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.IAuthenticationManager">
            <summary>
            Interface identifying a manager of authentication credentials separate from the
            <see cref="T:IdeaBlade.EntityModel.EntityManager"/>.
            </summary>
            <remarks>
            When implemented, DevForce will try to use the credentials
            available to the <b>IAuthenticationManager</b> to perform an
            "implicit" login of any <see cref="T:IdeaBlade.EntityModel.EntityManager"/> which needs credentials. 
            The implicit login occurs if the <see cref="M:IdeaBlade.EntityModel.EntityManager.Login(IdeaBlade.EntityModel.ILoginCredential)">Login</see> method of the EntityManager
            is not explicitly called.
            <para>
            See the code generated by the DevForce Silverlight Business Application templates for a sample <b>IAuthenticationManager</b>
            implementation.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.IAuthenticationManager.LinkAuthentication(IdeaBlade.EntityModel.EntityManager)">
            <summary>
            Called by an EntityManager to request authentication credentials.
            </summary>
            <param name="targetEM">The EntityManager requesting credentials</param>
            <returns>True if the link was made</returns>
            <remarks>
            When called, the <b>IAuthenticationManager</b> can link its credentials
            to the target EntityManager.  If the IAuthenticationManager does
            not have credentials, or authenticated credentials, it should
            return false to indicate that the target EntityManager should
            try the usual Login processing for an anonymous user.  If credentials are available,
            the <see cref="M:IdeaBlade.EntityModel.EntityManager.LinkForAuthentication(IdeaBlade.EntityModel.EntityManager)"/> method can be used to 
            link credentials.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.Security.AuthenticationContext">
            <summary>
            Represents a user logged in to an Entity Server.
            </summary>
            <remarks>
            DevForce will create an <b>AuthenticationContext</b> as the result of a synchronous or asynchronous <b>Login</b> operation on either
            the <see cref="T:IdeaBlade.EntityModel.EntityManager"/> or <see cref="T:IdeaBlade.EntityModel.Security.Authenticator"/>.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.Security.IAuthenticationContext">
            <summary>
            Interface representing a logged in user.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.Security.IAuthenticationContext.SessionKey">
            <summary>
            Token uniquely identifying a user session to the Entity Server.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.Security.IAuthenticationContext.Principal">
            <summary>
            The <see cref="T:System.Security.Principal.IPrincipal"/> representing the logged in user.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.Security.IAuthenticationContext.LoginState">
            <summary>
            Returns whether this context is logged in.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.Security.IAuthenticationContext.ExtendedPropertyMap">
            <summary>
             Additional properties.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.Security.AuthenticationContext.#ctor(System.Guid,System.Security.Principal.IPrincipal,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="sessionKey"></param>
            <param name="principal"></param>
            <param name="extendedPropertyMap"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.Security.AuthenticationContext.Clear">
            <summary>
            Clear after logout to reflect the fact that the stupid piece of shit is actually logged out.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.Security.AuthenticationContext.SessionKey">
            <summary>
            Token uniquely identifying a user session to the Entity Server.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.Security.AuthenticationContext.Principal">
            <summary>
            The <see cref="T:System.Security.Principal.IPrincipal"/> representing the logged in user.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.Security.AuthenticationContext.LoginState">
            <summary>
            Returns whether this context is logged in.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.Security.AuthenticationContext.ExtendedPropertyMap">
            <summary>
            Additional properties.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.Security.AuthenticationManagerHelper">
            <summary>
            Used to manage probing for the deprecated IAuthenticationProvider.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.Security.AuthenticationManagerHelper.TryAuthenticationManager(IdeaBlade.EntityModel.EntityManager)">
            <summary>
            This will find an IAuthenticationManager and try its LinkAuthentication method.
            </summary>
            <param name="em"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.Security.Authenticator">
            <summary>
            Provides authentication services in a DevForce application.
            </summary>
            <remarks>
            Call synchronous and asynchronous <b>Login</b> and <b>Logout</b> methods on
            the singleton <see cref="F:IdeaBlade.EntityModel.Security.Authenticator.Instance"/> to validate user credentials in your application.
            </remarks>
        </member>
        <member name="F:IdeaBlade.EntityModel.Security.Authenticator.Instance">
            <summary>
            The singleton instance of the <b>Authenticator</b>.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.Security.Authenticator.Login(IdeaBlade.EntityModel.ILoginCredential,IdeaBlade.EntityModel.Security.LoginOptions)">
            <summary>
            Validate user credentials against an Entity Server.
            </summary>
            <param name="credential"></param>
            <param name="options"></param>
            <returns>An AuthenticationContext representing the user</returns>
            <remarks>
            The <see cref="T:IdeaBlade.EntityModel.Security.LoginOptions"/> can be used to specify the EntityServer.  If options are not provided,
            the "default" EntityServer is assumed.
            <para>
            You can pass a null (Nothing in Visual Basic) in place of an <see cref="T:IdeaBlade.EntityModel.ILoginCredential"/> object.  Null credentials can indicate either that the user
            is logging in as a guest or anonymous user, or when using the <b>AspAuthenticatingLoginManager</b> that the current authenticated user
            should be loaded.  When using ASP.NET the current authenticated user is one authenticated via Windows authentication, or is the user already logged
            in because of either a persistent cookie or a login performed elsewhere in the ASP.NET application.  If you are not using the
            AspAuthenticationLoginManager then your implementation of <see cref="T:IdeaBlade.EntityModel.IEntityLoginManager"/> should handle a null credential
            if your client application can provide one.  
            </para>
            <para>
            The <see cref="P:IdeaBlade.Core.Configuration.ServerSettingsElement.AllowAnonymousLogin">AllowAnonymousLogin</see> flag in the 
            IdeaBlade configuration determines whether "anonymous" users can login to your application.  Anonymous users are ones who have
            not supplied credentials and who also cannot be authenticated by other means, such as ASP.NET authentication.   
            </para>
            <para>
            The <see cref="T:IdeaBlade.EntityModel.Security.AuthenticationContext"/> returned from a successful login can be used in two ways:  1) you can set the
            <see cref="P:IdeaBlade.EntityModel.Security.Authenticator.DefaultAuthenticationContext"/> so that any <see cref="T:IdeaBlade.EntityModel.EntityManager"/> in your application will share the credentials
            and not require a separate login, or 2) you can set the <see cref="P:IdeaBlade.EntityModel.EntityManager.AuthenticationContext"/> on one or more EntityManager
            instances.  Note that without performing one of these actions the returned AuthenticationContext will not be used by DevForce.
            </para>
            <para>
            Credentials are passed in clear text.  Use a secure channel (such as SSL) or provide your own encryption if secure
            communications are necessary.
            </para>
            </remarks>
            <exception cref="T:IdeaBlade.EntityModel.LoginException">Login failure</exception>
        </member>
        <member name="M:IdeaBlade.EntityModel.Security.Authenticator.Login(System.Guid,IdeaBlade.EntityModel.Security.LoginOptions)">
            <summary>
            Used to login to an Entity Server based on a previously established session key. 
            </summary>
            <param name="sessionKey">Uniquely identifies an existing session</param>
            <param name="options">Characterists of the Entity Server to log into.</param>
            <returns></returns>
            <exception cref="T:IdeaBlade.EntityModel.LoginException">Invalid session key</exception>
             <remarks>
            Use the <see cref="P:IdeaBlade.EntityModel.Security.AuthenticationContext.SessionKey"/> returned from a user session established previously.
            This login is most useful in ASP.NET applications
            where an EntityManager is constructed only for the lifetime of a request.  Using an 
            existing <see cref="P:IdeaBlade.EntityModel.Security.AuthenticationContext.SessionKey"/> allows you to recreate the user session from a lightweight
            token.
            <para>
            User sessions will by default timeout after 30 minutes of inactivity.  You will receive
            a <see cref="T:IdeaBlade.EntityModel.LoginException"/> if the session has timed out and you attempt to login with
            the session key.  The timeout value can be modified via the <see cref="P:IdeaBlade.Core.Configuration.ServerSettingsElement.UserSessionTimeout">UserSessionTimeout</see>
            setting.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Security.Authenticator.LoginAsync(IdeaBlade.EntityModel.ILoginCredential,IdeaBlade.EntityModel.Security.LoginOptions,System.Action{IdeaBlade.EntityModel.LoginOperation},System.Object)">
            <summary>
             Perform an asynchronous login operation to validate user credentials against an Entity Server.
            </summary>
            <param name="credential"></param>
            <param name="options"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <remarks>
             The <see cref="T:IdeaBlade.EntityModel.Security.LoginOptions"/> can be used to specify the EntityServer.  If options are not provided,
            the "default" EntityServer is assumed.
             <para>
            You can pass a null (Nothing in Visual Basic) in place of an <see cref="T:IdeaBlade.EntityModel.ILoginCredential"/> object.  Null credentials can indicate either that the user
            is logging in as a guest or anonymous user, or when using the <b>AspAuthenticatingLoginManager</b> that the current authenticated user
            should be loaded.  When using ASP.NET the current authenticated user is one authenticated via Windows authentication, or is the user already logged
            in because of either a persistent cookie or a login performed elsewhere in the ASP.NET application.  If you are not using the
            AspAuthenticationLoginManager then your implementation of <see cref="T:IdeaBlade.EntityModel.IEntityLoginManager"/> should handle a null credential
            if your client application can provide one.  
            </para>
            <para>
            The <see cref="P:IdeaBlade.Core.Configuration.ServerSettingsElement.AllowAnonymousLogin">AllowAnonymousLogin</see> flag in the 
            IdeaBlade configuration determines whether "anonymous" users can login to your application.  Anonymous users are ones who have
            not supplied credentials and who also cannot be authenticated by other means, such as ASP.NET authentication.   
            </para>
            <para>
            Provide a <paramref name="userCallback"/> if you want to be notified when the operation completes.
            Use the <paramref name="userState"/> to uniquely identify this call.  
            </para>
            <para>
            The <see cref="T:IdeaBlade.EntityModel.Security.AuthenticationContext"/> returned from a successful login in the <see cref="T:IdeaBlade.EntityModel.LoginOperation"/> or <see cref="T:IdeaBlade.EntityModel.LoginEventArgs"/>
            can be used in two ways:  1) you can set the
            <see cref="P:IdeaBlade.EntityModel.Security.Authenticator.DefaultAuthenticationContext"/> so that any <see cref="T:IdeaBlade.EntityModel.EntityManager"/> in your application will share the credentials
            and not require a separate login, or 2) you can set the <see cref="P:IdeaBlade.EntityModel.EntityManager.AuthenticationContext"/> on one or more EntityManager
            instances.  Note that without performing one of these actions the returned AuthenticationContext will not be used by DevForce.
            </para>
            <para>
            Credentials are passed in clear text.  Use a secure channel (such as SSL) or provide your own encryption if secure
            communications are necessary.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Security.Authenticator.Logout(IdeaBlade.EntityModel.Security.IAuthenticationContext)">
            <summary>
            Log the specified <see cref="T:IdeaBlade.EntityModel.Security.AuthenticationContext"/> out of the Entity Server.
            </summary>
            <param name="context"></param>
            <remarks>
            Any <see cref="T:IdeaBlade.EntityModel.EntityManager"/> using this AuthenticationContext will be logged out.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Security.Authenticator.LogoutAsync(IdeaBlade.EntityModel.Security.IAuthenticationContext,System.Action{IdeaBlade.EntityModel.BaseOperation},System.Object)">
            <summary>
            Perform an asynchronous operation to log the specified <see cref="T:IdeaBlade.EntityModel.Security.AuthenticationContext"/> out of the Entity Server.
            </summary>
            <param name="context"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <remarks>
            Any <see cref="T:IdeaBlade.EntityModel.EntityManager"/> using this AuthenticationContext will be logged out.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Security.Authenticator.LoginCore(System.Func{IdeaBlade.EntityModel.EntityServerProxy,IdeaBlade.EntityModel.SessionBundle},IdeaBlade.EntityModel.Security.LoginOptions)">
            <summary>
            Sync login.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.Security.Authenticator.LoginCoreAsync(IdeaBlade.EntityModel.AsyncProcessor{IdeaBlade.EntityModel.LoginOperation},System.Func{IdeaBlade.EntityModel.Security.IAuthenticationContext},System.Boolean)">
            <summary>
            Async login
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.Security.Authenticator.DefaultAuthenticationContext">
            <summary>
            The "default" <see cref="T:IdeaBlade.EntityModel.Security.AuthenticationContext"/>.
            </summary>
            <remarks>
            You may directly set the <b>DefaultAuthenticationContext</b> using the <see cref="T:IdeaBlade.EntityModel.Security.AuthenticationContext"/>
            returned from a <see cref="M:IdeaBlade.EntityModel.Security.Authenticator.Login(IdeaBlade.EntityModel.ILoginCredential,IdeaBlade.EntityModel.Security.LoginOptions)">Login</see> or <see cref="M:IdeaBlade.EntityModel.Security.Authenticator.LoginAsync(IdeaBlade.EntityModel.ILoginCredential,IdeaBlade.EntityModel.Security.LoginOptions,System.Action{IdeaBlade.EntityModel.LoginOperation},System.Object)">LoginAsync</see> call.  Any <see cref="T:IdeaBlade.EntityModel.EntityManager"/>
            with a <see cref="P:IdeaBlade.EntityModel.EntityManagerOptions.UseDefaultAuthenticationContext"/> setting of true will then not need to 
            be logged in separately, and will use the shared context set here.  Using the <b>DefaultAuthenticationContext</b>
            provides single sign-on and single sign-off capabilities to your application.
            <para>
            The <b>DefaultAuthenticationContext</b> will also be set automatically by DevForce if <see cref="M:IdeaBlade.EntityModel.EntityManager.Login(IdeaBlade.EntityModel.ILoginCredential)">EntityManager.Login</see>
            or <see cref="M:IdeaBlade.EntityModel.EntityManager.LoginAsync(IdeaBlade.EntityModel.ILoginCredential,System.Action{IdeaBlade.EntityModel.LoginOperation},System.Object)">EntityManager.LoginAsync</see> is called and that <b>EntityManager</b> has a 
            <see cref="P:IdeaBlade.EntityModel.EntityManagerOptions.UseDefaultAuthenticationContext"/> setting of true.
            </para>
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.Security.LoginState">
            <summary>
            Indicates the state of the <see cref="T:IdeaBlade.EntityModel.Security.AuthenticationContext"/>.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.Security.LoginState.LoggedIn">
            <summary>
            The user has logged in.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.Security.LoginState.LoggedOutMustLoginExplicitly">
            <summary>
            The user has logged out, and must re-login to make further requests to the EntityServer.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.NotificationCallbackManagerBase">
            <summary>
            Internal use only.
            </summary>
            <remarks>
            We have one NotificationCallbackManager per EntityServerProxy.  This means there's one callback channel
            and that all subscriptions made on a PM go through this single channel.
            The manager keeps track of client subscriptions - which must be keyed by a unique (for the client) token.
            Subscription requests come in for a server method, or what we can very loosely call a service.  The service sends
            notifications to each subscriber in the OnNotify operation of the callback contract.  The ClientNotifyDelegate
            passed with the subscription is called from the OnNotify method.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.INotificationCallbackManager">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.INotificationServiceCallback">
            <summary>
            Callback contract used by the <see cref="T:IdeaBlade.EntityModel.INotificationService"/> contract to support
            client notifications.  Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.INotificationServiceCallback.OnNotify(System.Object,System.Object[])">
            <summary>
            Receive notifications from an <see cref="T:IdeaBlade.EntityModel.INotificationService"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.INotificationServiceCallback.Ping">
            <summary>
            Ping the client to see if it's still alive.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.NotificationCallbackManagerBase.Subscribe(IdeaBlade.EntityModel.SessionBundle,IdeaBlade.EntityModel.SubscribeWorkState)">
            <summary>
            Subscribe to an INotificationService.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.NotificationCallbackManagerBase.Unsubscribe(IdeaBlade.EntityModel.UnsubscribeWorkState)">
            <summary>
            Unsubscribe from the service.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.NotificationCallbackManagerBase.OnNotify(System.Object,System.Object[])">
            <summary>
            Called from the service as part of the callback contract.
            </summary>
            <param name="userToken"></param>
            <param name="serverArgs"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.NotificationCallbackManagerBase.Ping">
            <summary>
            Called by server.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.NotificationCallbackManagerBase.GetNotificationService">
            <summary>
            The EntityServer implements the INotificationService contract.  When running local this
            returns the EntityServer instance, otherwise it returns a proxy to the INotificationService.
            // we want to create this on main thread!
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityManagerClearedEventArgs">
            <summary>
            Event data applicable provided after a EntityManager.Clear() operation.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManagerClearedEventArgs.#ctor(IdeaBlade.EntityModel.EntityManager)">
            <summary>
            Ctor.
            </summary>
            <param name="entityManager"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManagerClearedEventArgs.EntityManager">
            <summary>
            The EntityManager on which a <see cref="M:IdeaBlade.EntityModel.EntityManager.Clear(System.Boolean)"/> has been called.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityScalarQueryOperation">
            <summary>
            Information about an asynchronous scalar query operation.
            </summary>
            <remarks>
            Returned by the <see cref="T:IdeaBlade.EntityModel.EntityScalarAsyncExtensions"/> extension methods when a scalar query is executed
            asynchronously.
            You can use the <b>EntityScalarQueryOperation</b> to track or cancel the request.  The <b>EntityScalarQueryOperation</b> is also passed
            to the callback method supplied to the async call.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarQueryOperation.#ctor(IdeaBlade.EntityModel.IEntityScalarQuery,System.Object,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation})">
            <summary>
            Created by DevForce when a scalar query is executed asynchronously.
            </summary>
            <param name="query"></param>
            <param name="userState"></param>
            <param name="callback"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarQueryOperation.#ctor(System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},IdeaBlade.EntityModel.EntityScalarQueriedEventArgs)">
            <summary>
            WB for testing only. Do not remove even though marked obsolete
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityScalarQueryOperation.EntityQuery">
            <summary>
            The requested query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityScalarQueryOperation.Result">
            <summary>
            The result of the query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityScalarQueryOperation.WasFetched">
            <summary>
            Whether the operation completed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityScalarQueryOperation.ResolvedFetchStrategy">
            <summary>
            The fetch strategy actually used to process the query.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityScalarQueryOperation`1">
            <summary>
            Information about an asynchronous scalar query operation.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            Returned by the <see cref="T:IdeaBlade.EntityModel.EntityScalarAsyncExtensions"/> extension methods when a scalar query is executed
            asynchronously.
            You can use the <b>EntityScalarQueryOperation</b> to track or cancel the request.  The <b>EntityScalarQueryOperation</b> is also passed
            to the callback method supplied to the async call.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarQueryOperation`1.#ctor(IdeaBlade.EntityModel.IEntityScalarQuery{`0},System.Object,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{`0}})">
            <summary>
            Created by DevForce when a scalar query is executed asynchronously.
            </summary>
            <param name="query"></param>
            <param name="userState"></param>
            <param name="callback"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarQueryOperation`1.#ctor(System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{`0}},IdeaBlade.EntityModel.EntityScalarQueriedEventArgs{`0})">
            <summary>
            WB for testing only. Do not remove even though marked obsolete
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityScalarQueryOperation`1.EntityQuery">
            <summary>
            The requested query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityScalarQueryOperation`1.Result">
            <summary>
            The result of the query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityScalarQueryOperation`1.WasFetched">
            <summary>
            Whether the operation completed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityScalarQueryOperation`1.ResolvedFetchStrategy">
            <summary>
            The fetch strategy actually used to process the query.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQueryExtensions">
            <summary>
            Provides a set of static methods extending <see cref="T:IdeaBlade.EntityModel.EntityQuery"/> and <see cref="T:IdeaBlade.EntityModel.EntityQuery`1"/>.
            <seealso cref="N:System.Linq"/>
            <seealso cref="T:IdeaBlade.EntityModel.EntityQuery`1"/> 
            </summary>
            <remarks>
            To use these extensions, add a using statement (Imports in Visual Basic) for this namespace
            to your class.  
            <para>
            For more information on extension methods, see <b>Extension Methods (C# Programming Guide)</b>
            or <b>Extension Methods (Visual Basic)</b> in the Visual Studio 2008 documentation.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.GetReferencedEntityTypes(IdeaBlade.EntityModel.IEntityQuery,System.Boolean)">
            <summary>
            Returns a list of all entity types referenced by the query.  
            </summary>
            <param name="query"></param>
            <param name="includeIncludes">Whether to also return Included types.  Default is true.</param>
            <returns>A HashSet of types</returns>
            <example>
        <code lang="C#">
          <![CDATA[
 public void CheckQueryTypes() {
  
   var query = entityManager.Employees.Where(e => e.OrderSummaries.Any(os => os.Freight > 100m));
   // Will return Employee and OrderSummary types.
   var list = query.GetReferencedEntityTypes();

   var query2 = entityManager.Customers.Include(c => c.OrderSummaries);
   // Will return Customer and OrderSummary types.
   var list2 = query2.GetReferencedEntityTypes();
   // Will return only Customer type, since Includes are excluded.
   var list3 = query2.GetReferencedEntityTypes(false);
 }          
                ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.GetIncludedEntityTypes(IdeaBlade.EntityModel.EntityQuery)">
            <summary>
            Returns a list of all entity types, excluding Included types, referenced by the query.
            </summary>
            <param name="query"></param>
            <returns>A HashSet of types</returns>
            <remarks>
            If "Included" types should also be returned, use <see cref="M:IdeaBlade.EntityModel.EntityQueryExtensions.GetReferencedEntityTypes(IdeaBlade.EntityModel.IEntityQuery,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Filter``1(``0,IdeaBlade.EntityModel.EntityQueryFilterCollection)">
            <summary>
            Append the specified filter collection to the query.
            </summary>
            <typeparam name="TQuery">Type queried</typeparam>
            <param name="query">Query to be appended to</param>
            <param name="filters">Collection of filters</param>
            <returns>A new query</returns>
            <remarks>
            You can use an <see cref="T:IdeaBlade.EntityModel.EntityQueryFilterCollection"/> to filter different entity types
            in the query.  The collection can also contain filters for types not currently in the query,
            and those filters will be ignored when the query is executed.
            <para>
            The <b>Filter</b> is most useful in appending to an existing query on the server prior to execution, 
            where you cannot easily modify the query expression provided.  The query may also be filtered on the
            client using the <see cref="E:IdeaBlade.EntityModel.EntityManager.Querying"/> event.
            </para>
            <para>Note that <b>Filter</b> returns a new query with the filter(s) added; the original query is not modified.
            </para>
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
public void FilteringSample() {
  // Query for all customers.  A filter will be applied prior to execution.
  var mgr = new DomainModelEntityManager();
  mgr.Querying += new EventHandler<EntityQueryingEventArgs>(mgr_Querying);
  var list = mgr.Customers.ToList();
}

// Client-side filtering in the EM.Querying event handler
private void mgr_Querying(object sender, EntityQueryingEventArgs e) {
  EntityQueryFilterCollection clientFilters = new EntityQueryFilterCollection();
  clientFilters.AddFilter<Customer>(q => q.Where(c => c.Country == "UK"));
  e.Query = e.Query.Filter(clientFilters);
}
       ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Filter``2(``0,System.Func{System.Linq.IQueryable{``1},System.Linq.IQueryable{``1}})">
            <summary>
            Append a filter to the query.
            </summary>
            <typeparam name="TQuery">Entity type queried</typeparam>
            <typeparam name="T">Entity type of the new query returned</typeparam>
            <param name="query">Query to be appended to</param>
            <param name="filter">A Func that takes and returns an IQueryable{T}</param>
            <returns>A new query</returns>
            <remarks>
            A <b>Filter</b> is most useful in appending to an existing query on the server prior to execution, 
            where you cannot easily modify the query expression provided.  
            <para>
            The <paramref name="filter"/>, although it looks intimidating, is a simple <b>Where</b> predicate 
            which you're already familiar with when using query expression syntax.  
            See the example for more information.
            </para>
            <para>This signature is used when the entity type of the filter is different than that of the query.
            </para>
            <para>Note that <b>Filter</b> returns a new query with the filter(s) added; the original query is not modified.
            </para>
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
public void FilteringSample() {
  // Query for all customers.  A filter will be applied prior to execution.
  var mgr = new DomainModelEntityManager();
  mgr.Querying += new EventHandler<EntityQueryingEventArgs>(mgr_Querying);
  var list = mgr.Customers.ToList();
}

// Client-side filtering in the EM.Querying event handler
private void mgr_Querying(object sender, EntityQueryingEventArgs e) {
  EntityQueryFilterCollection clientFilters = new EntityQueryFilterCollection();
  clientFilters.AddFilter<Customer>(q => q.Where(c => c.Country == "UK"));
  e.Query = e.Query.Filter(clientFilters);
}
       ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Include``1(``0,System.String)">
            <summary>
            Configures eager fetching for related entities in the specified query path. 
            </summary>
            <typeparam name="TQuery"></typeparam>
            <param name="query">An EntityQuery</param>
            <param name="propertyPath">Dot-separated list of navigation properties that describe the query path in the graph that should be eagerly fetched.</param>
            <returns>A new <see cref="T:IdeaBlade.EntityModel.IEntityQuery"/> with the defined query path.</returns>
            <example><code lang="C#">

      DomainModelEntityManager mgr = new DomainModelEntityManager();

      // Query for some customers, and include their orders and details in query.
      var query1 = mgr.Customers
        .Where(c =&gt; c.Id &lt; 5)
        .Include("OrderSummaries.OrderDetails");

      foreach (Customer c in query1) {
        Console.WriteLine("order count = " + c.OrderSummaries.Count);
      }

      // Query for orders including details where the customer is in London
      var query2 = mgr.OrderSummaries.Include("OrderDetails")
          .Where(c =&gt; c.Customer.City == "London");

      var results = query2.ToList();

</code></example>
            <remarks>
            The <paramref name="propertyPath"/> may represent a simple or complex navigation.  For example, if a Customer type has an Orders navigation property, and 
            the Order type has OrderDetails, you can use a property path of "Orders" to eagerly load orders for any customer queried, and you can use
            "Orders.OrderDetails" to eagerly load both orders and details for queried customers.  Note that the complex property path might not be a valid navigation
            if a collection is returned, as with "Orders.OrderDetails", but instances of the collection must have the indicated property (e.g., anOrder.OrderDetails).
            All "parts" in the property path will be pre-loaded into the EntityManager cache when the query is executed.
            <para>
            Multiple "Includes" may be added to a query.</para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Include``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Configures eager fetching for related entities in the specified query path.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">An EntityQuery</param>
            <param name="expr">An expression returning the navigation property</param>
            <returns>A new <see cref="T:IdeaBlade.EntityModel.IEntityQuery"/> with the defined query path.</returns>
            <example>
        <code lang="C#">
          <![CDATA[
// Query for some customers, and include their orders.
var query1 = mgr.Customers
  .Where(c => c.Country == "UK")
  .Include(c=> c.OrderSummaries);

foreach (Customer c in query1) {
  Console.WriteLine("order count = " + c.OrderSummaries.Count);
}          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Execute(IdeaBlade.EntityModel.IEntityQuery)">
            <summary>
            Execute the query and return untyped results.
            </summary>
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.ExecuteQuery(IEntityQuery)"/>
            <param name="query"></param>
            <returns></returns>
            <remarks>
            In Silverlight, this query can only execute against the cache because this method is synchronous.
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
DomainModelEntityManager mgr = new DomainModelEntityManager();

var query = mgr.Customers.Where(c => c.Country == "UK");
var customers = query.Execute();          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.ExecuteAsync``1(IdeaBlade.EntityModel.IEntityQuery{``0})">
            <summary>
            Execute the query asynchronously.
            </summary>
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.ExecuteQueryAsync(IEntityQuery{T})"/>
            <typeparam name="T">Entity type returned</typeparam>
            <param name="query">This query</param>
            <example>
        <code lang="C#">
          <![CDATA[
DomainModelEntityManager mgr = new DomainModelEntityManager();

var query = mgr.Customers.Where(c => c.Country == "UK");
query.ExecuteAsync(op => {
  var customers = op.Results;
});          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.ExecuteAsync``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.Action{IdeaBlade.EntityModel.EntityQueryOperation{``0}},System.Object)">
            <summary>
            Execute the query asynchronously.
            </summary>
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.ExecuteQueryAsync(IEntityQuery{T})"/>
            <typeparam name="T">Entity type returned</typeparam>
            <param name="query">This query</param>
            <param name="userCallback">Callback invoked when the query completes</param>
            <param name="userState">Token to identify the query upon completion</param>
            <remarks>
            Provide a <paramref name="userCallback"/> if you want to be notified when the operation completes.
            The query results will be returned in the <see cref="T:IdeaBlade.EntityModel.EntityQueriedEventArgs"/> 
            passed to the <paramref name="userCallback"/>.
            Use the <paramref name="userState"/> to uniquely identify this call.
            </remarks>  
            <example>
        <code lang="C#">
          <![CDATA[
DomainModelEntityManager mgr = new DomainModelEntityManager();

var query = mgr.Customers.Where(c => c.Country == "UK");
query.ExecuteAsync(op => {
  var customers = op.Results;
});          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.ExecuteAsync(IdeaBlade.EntityModel.IEntityQuery)">
            <summary>
            Execute the query asynchronously.
            </summary>
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.ExecuteQueryAsync(IEntityQuery)"/>
            <param name="query">This query</param>
            <example>
        <code lang="C#">
          <![CDATA[
DomainModelEntityManager mgr = new DomainModelEntityManager();

var query = mgr.Customers.Where(c => c.Country == "UK");
query.ExecuteAsync(op => {
  var customers = op.Results;
});          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.ExecuteAsync(IdeaBlade.EntityModel.IEntityQuery,System.Action{IdeaBlade.EntityModel.EntityQueryOperation},System.Object)">
            <summary>
            Execute the query asynchronously.
            </summary>
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.ExecuteQueryAsync(IEntityQuery)"/>
            <param name="query">This query</param>
            <param name="userCallback">Callback invoked when the query completes</param>
            <param name="userState">Token to identify the query upon completion</param>
            <remarks>
            Provide a <paramref name="userCallback"/> if you want to be notified when the operation completes.
            The query results will be returned in the <see cref="T:IdeaBlade.EntityModel.EntityQueriedEventArgs"/> 
            passed to the <paramref name="userCallback"/>.
            Use the <paramref name="userState"/> to uniquely identify this call.
            </remarks>  
            <example>
        <code lang="C#">
          <![CDATA[
DomainModelEntityManager mgr = new DomainModelEntityManager();

var query = mgr.Customers.Where(c => c.Country == "UK");
query.ExecuteAsync(op => {
  var customers = op.Results;
});          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Execute``1(IdeaBlade.EntityModel.IEntityQuery{``0})">
            <summary>
            Execute the query and return typed results.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <returns></returns>
            <remarks>
            In Silverlight, this query can only execute against the cache because this method is synchronous.
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
DomainModelEntityManager mgr = new DomainModelEntityManager();

var query = mgr.Customers.Where(c => c.Country == "UK");
var customers = query.Execute();          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.With``1(``0,IdeaBlade.EntityModel.EntityManager)">
            <summary>
            Returns a clone of the query for the specified EntityManager.
            </summary>
            <typeparam name="TQuery"></typeparam>
            <param name="query"></param>
            <param name="em"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr1 = new DomainModelEntityManager();
var query1 = mgr1.Customers.Where(c => c.Country == "UK");

var mgr2 = new DomainModelEntityManager();
var query2 = query1.With(mgr2);          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.With``1(``0,IdeaBlade.EntityModel.QueryStrategy)">
            <summary>
            Returns a clone of the query with the specified QueryStrategy set.
            </summary>
            <typeparam name="TQuery"></typeparam>
            <param name="query"></param>
            <param name="qs"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr1 = new DomainModelEntityManager();
var query1 = mgr1.Customers.Where(c => c.Country == "UK");

var query2 = query1.With(QueryStrategy.CacheOnly);          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.With``1(``0,IdeaBlade.EntityModel.EntityManager,IdeaBlade.EntityModel.QueryStrategy)">
            <summary>
            Returns a clone of the query with the specified EntityManager and QueryStrategy set.
            </summary>
            <typeparam name="TQuery"></typeparam>
            <param name="query"></param>
            <param name="em"></param>
            <param name="qs"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr1 = new DomainModelEntityManager();
var query1 = mgr1.Customers.Where(c => c.Country == "UK");

var mgr2 = new DomainModelEntityManager();
var query2 = query1.With(mgr2, QueryStrategy.DataSourceOnly);          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.FirstOrNullEntity(IdeaBlade.EntityModel.IEntityQuery)">
            <summary>
            Executes the query and returns the first element of the sequence, or the appropriate NullEntity if no element is found. 
            </summary>
            <param name="query"></param>
            <returns></returns>
            <remarks>Because the <paramref name="query"/> is untyped the result is also not strongly typed.  You can cast the result to the correct type.</remarks>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();
var query = new EntityKeyQuery(new EntityKey(typeof(Customer), 1));
Customer cust = query.With(mgr).FirstOrNullEntity() as Customer;
          ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.FirstOrNullEntity``1(System.Linq.IQueryable{``0})">
            <summary>
            Executes the query and returns the first element of the sequence, or the appropriate NullEntity if no element is found. 
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="source"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[      
var mgr1 = new DomainModelEntityManager();
Customer cust = mgr1.Customers.Where(c => c.Country == "UK").FirstOrNullEntity();          
          ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.FirstOrNullEntity``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Executes the query and returns the first element of the sequence, or the appropriate NullEntity if no element is found. 
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="source1"></param>
            <param name="predicate"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[  
var mgr1 = new DomainModelEntityManager();
Customer cust = mgr1.Customers.FirstOrNullEntity(c => c.Country == "UK");          
          ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.FirstOrNullEntity``1(IdeaBlade.EntityModel.IEntityQuery{``0})">
            <summary>
            Returns the first element of a sequence, or the appropriate NullEntity if no element is found.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="source1"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[      
var mgr1 = new DomainModelEntityManager();
Customer cust = mgr1.Customers.Where(c => c.Country == "UK").FirstOrNullEntity();          
          ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.FirstOrNullEntity``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns the first element of a sequence, or the appropriate NullEntity if no element is found.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="source1"></param>
            <param name="predicate"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[  
var mgr1 = new DomainModelEntityManager();
Customer cust = mgr1.Customers.FirstOrNullEntity(c => c.Country == "UK");          
          ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.All(IdeaBlade.EntityModel.ITypedEntityQuery,IdeaBlade.Core.IPredicateDescription)">
            <summary>
             Determines whether every element of a sequence satisfies a condition.
            </summary>
            <param name="source"></param>
            <param name="predicateDescription"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Any(IdeaBlade.EntityModel.ITypedEntityQuery)">
            <summary>
             Determines whether a sequence contains any elements.
            </summary>
            <param name="source"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[ 
var mgr1 = new DomainModelEntityManager();
bool any = mgr1.Customers.Any();          
          ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Any``1(IdeaBlade.EntityModel.IEntityQuery{``0})">
            <summary>
             Determines whether a sequence contains any elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[ 
var mgr1 = new DomainModelEntityManager();
bool any = mgr1.Customers.Any();          
          ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Any(IdeaBlade.EntityModel.ITypedEntityQuery,IdeaBlade.Core.IPredicateDescription)">
            <summary>
             Determines whether any element of a sequence satisfies a condition.
            </summary>
            <param name="source"></param>
            <param name="predicateDescription"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[  
var mgr1 = new DomainModelEntityManager();
bool any = mgr1.Customers.Any(c=> c.Country == "UK");          
          ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Cast``1(IdeaBlade.EntityModel.ITypedEntityQuery)">
            <summary>
              Converts the elements of an ITypedEntityQuery to the specified type.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Concat``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates two sequences.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source1"></param>
            <param name="source2"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[  
var mgr1 = new DomainModelEntityManager();

var query1 = mgr1.Customers.Where(c => c.Country == "UK");
var query2 = mgr1.Customers.Where(c => c.Country == "USA");

var combinedQuery = query1.Concat(query2);
var list = combinedQuery.Execute();
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Contains(IdeaBlade.EntityModel.ITypedEntityQuery,System.Object)">
            <summary>
             Determines whether a sequence contains a specified element by using the default
               equality comparer.
            </summary>
            <param name="source"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Count(IdeaBlade.EntityModel.ITypedEntityQuery)">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <param name="source"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[  
var mgr1 = new DomainModelEntityManager();

var entityType = typeof(Customer);
var baseQuery = EntityQuery.Create(entityType);
var count = baseQuery.Count();          
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Count``1(IdeaBlade.EntityModel.IEntityQuery{``0})">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[  
var mgr1 = new DomainModelEntityManager();
var ct = mgr1.Customers.Where(c=> c.Country == "UK").Count();          
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Count(IdeaBlade.EntityModel.ITypedEntityQuery,IdeaBlade.Core.IPredicateDescription)">
            <summary>
            Returns the number of elements in a sequence that satisfy a condition.
            </summary>
            <param name="source"></param>
            <param name="predicateDescription"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[  
var mgr1 = new DomainModelEntityManager();

var entityType = typeof(Customer);
var baseQuery = EntityQuery.Create(entityType);
var pd = new PredicateDescription(Customer.EntityPropertyNames.Country, FilterOperator.IsEqualTo, "UK");
var count = baseQuery.Count(pd);          
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.DefaultIfEmpty``1(IdeaBlade.EntityModel.IEntityQuery{``0})">
            <summary>
            Returns the elements in a sequence or a default valued singleton collection if the sequence is empty.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.DefaultIfEmpty``1(IdeaBlade.EntityModel.IEntityQuery{``0},``0)">
            <summary>
            Returns the elements in a sequence or a default valued singleton collection if the sequence is empty.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Distinct(IdeaBlade.EntityModel.ITypedEntityQuery)">
            <summary>
            Returns distinct elements from a sequence.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Distinct``1(IdeaBlade.EntityModel.IEntityQuery{``0})">
            <summary>
            Returns distinct elements from a sequence.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Except``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source1"></param>
            <param name="source2"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[  
var mgr1 = new DomainModelEntityManager();

var query1 = mgr1.Customers.Where(c => c.Country == "USA");
var query2 = mgr1.Customers.Where(c => c.Region == "OR");

var combinedQuery = query1.Except(query2);
var list = combinedQuery.Execute();          
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Join``4(IdeaBlade.EntityModel.IEntityQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
            <summary>
            Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.
            </summary>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Join``4(IdeaBlade.EntityModel.IEntityQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates the elements of two sequences based on matching keys. A specified IEqualityComparer{T} is used to compare keys.
            </summary>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.OfType``1(IdeaBlade.EntityModel.ITypedEntityQuery)">
            <summary>
              Filters the elements of an IEntityQuery based on a specified type.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <returns></returns>
            <remarks><b>OfType</b> is used to filter a query for instances of a derived type. </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.OrderBy``2(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements of a sequence in ascending order.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[  
var mgr1 = new DomainModelEntityManager();
var orderedCustomerList = mgr1.Customers.OrderBy(c => c.Id).ToList();          
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.OrderBy``2(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in ascending order by using a specified comparer.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.OrderByDescending``2(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements of a sequence in descending order.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[  
var mgr1 = new DomainModelEntityManager();
var orderedCustomerList = mgr1.Customers.OrderByDescending(c => c.Id).ToList();      
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.OrderByDescending``2(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in descending order by using a specified comparer.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.OrderBySelector(IdeaBlade.EntityModel.ITypedEntityQuery,IdeaBlade.Core.ISortSelector)">
            <summary>
            Sorts the elements of a sequence according to a <see cref="T:IdeaBlade.Linq.PropertySortSelector"/> containing one or more sort criteria.
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <returns>A query containing the sort criteria</returns>
            <remarks>
            Use this method to add dynamically-created sort criteria to a query.  
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
public void OrderBySample1() {
  var mgr = new DomainModelEntityManager();
  var selector = new SortSelector(typeof(Customer), "Country", ListSortDirection.Descending);
  var results = mgr.Customers.OrderBySelector(selector).ToList();    
}
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.OrderBySelector``1(IdeaBlade.EntityModel.IEntityQuery{``0},IdeaBlade.Core.ISortSelector)">
            <summary>
            Sorts the elements of a sequence according to a <see cref="T:IdeaBlade.Linq.PropertySortSelector"/> containing one or more sort criteria.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns>A query containing the sort criteria</returns>
            <remarks>
            Use this method to add dynamically-created sort criteria to a query.  
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
public void OrderBySample1() {
  var mgr = new DomainModelEntityManager();
  var selector = new SortSelector(typeof(Customer), "Country", ListSortDirection.Descending);
  var results = mgr.Customers.OrderBySelector(selector).ToList();    
}
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.ThenBySelector``1(IdeaBlade.EntityModel.IEntityQuery{``0},IdeaBlade.Core.ISortSelector)">
            <summary>
            Adds secondary sort criteria to a query.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns>A query containing the sort criteria</returns>
            <remarks>
            Use this method along with the <see cref="M:IdeaBlade.EntityModel.EntityQueryExtensions.OrderBySelector(IdeaBlade.EntityModel.ITypedEntityQuery,IdeaBlade.Core.ISortSelector)"/> to add dynamically-created sort criteria to a query.  
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
  public void ThenBySample1() {
    var mgr = new DomainModelEntityManager();
    var selector1 = new SortSelector(typeof(Customer), "Country");
    var selector2 = new SortSelector(typeof(Customer), "CompanyName");
    var results = mgr.Customers.OrderBySelector(selector1).ThenBySelector(selector2).ToList();
  }
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.GroupBy(IdeaBlade.EntityModel.ITypedEntityQuery,IdeaBlade.Core.IProjectionSelector)">
            <summary>
            Groups the elements of a sequence according to a specified key selector function.
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();
var entityType = typeof(Customer);
var rootQuery = EntityQuery.Create(entityType);
var ps = new ProjectionSelector("Country");

var query = rootQuery.GroupBy(ps);
var results = query.Execute();          
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.GroupBy``1(IdeaBlade.EntityModel.IEntityQuery{``0},IdeaBlade.Core.IProjectionSelector)">
            <summary>
            Groups the elements of a sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();
var entityType = typeof(Customer);
var rootQuery = EntityQuery.Create(entityType);
var ps = new ProjectionSelector("Country");

var query = rootQuery.GroupBy(ps);
var results = query.Execute();          
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.GroupBy``1(IdeaBlade.EntityModel.IEntityQuery{``0},IdeaBlade.Core.IProjectionSelector,IdeaBlade.Core.IProjectionSelector)">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var keyPs = new ProjectionSelector("Country");
var elementPs = new ProjectionSelector("CompanyName");

var query = mgr.Customers.GroupBy(keyPs, elementPs);
var results = query.Execute();
var r0List = results.Cast<IGrouping<String, String>>().ToList();          
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.GroupBy``2(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var query = mgr.Customers.GroupBy(c => c.Country);
foreach (var group in query) {
  Console.WriteLine("key = " + group.Key);
  foreach (var cust in group) {
    Console.WriteLine("Cust = " + cust.CompanyName);
  }
}          
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.GroupBy``3(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var query = mgr.Customers.GroupBy(c => c.Country, c=> c.CompanyName);
foreach (var group in query) {
  Console.WriteLine("key = " + group.Key);
  foreach (var cust in group) {
    Console.WriteLine("Cust = " + cust);
  }
}          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.GroupBy``3(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="resultSelector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var query = mgr.Customers.GroupBy(c => c.Country, (s, c) => new { Key=s, Count=c.Count()});
foreach (var group in query) {
  Console.WriteLine("key = " + group.Key);
  Console.WriteLine("count=" + group.Count);
}          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.GroupBy``4(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="resultSelector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var query = mgr.Customers.GroupBy(c => c.Country, c => c.CompanyName, (s, a) => new { Key = s, Count = a.Count() });
  //(s, c) => new { Key=s, Count=c.Count()});
foreach (var group in query) {
  Console.WriteLine("key = " + group.Key);
  Console.WriteLine("count=" + group.Count);
}          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.GroupJoin``4(IdeaBlade.EntityModel.IEntityQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
            <summary>
            Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.
            </summary>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Select``2(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Select``2(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();
var query = mgr.OrderSummaries.Where(o => o.ShipCountry == "UK").Select(o => new { o.Id, o.ShipCountry, o.OrderDate });
var list = query.ToList();          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Select(IdeaBlade.EntityModel.ITypedEntityQuery,IdeaBlade.Core.IProjectionSelector)">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var entityType = typeof(Customer); 
var rootQuery = EntityQuery.Create(entityType, mgr);

var ps1 = new ProjectionSelector("CompanyName");
var ps2 = new ProjectionSelector("ContactName");
var pps = ps1.Combine(ps2);

var query = rootQuery.Select(pps);
var results = query.Execute();          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Select``1(IdeaBlade.EntityModel.IEntityQuery{``0},IdeaBlade.Core.IProjectionSelector)">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
 var mgr = new DomainModelEntityManager();

 var rootQuery = mgr.Customers;

 var ps1 = new ProjectionSelector("CompanyName");
 var ps2 = new ProjectionSelector("ContactName");
 var pps = ps1.Combine(ps2);

 var query = rootQuery.Select(pps);
 var results = query.Execute();          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.SelectMany(IdeaBlade.EntityModel.ITypedEntityQuery,IdeaBlade.Core.IProjectionSelector)">
            <summary>
            Projects each element of a sequence to an IEnumerable{T} and combines the resulting sequences into one sequence of type IQueryable{T}.
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var entityType = typeof(Customer);
var baseQuery = EntityQuery.Create(entityType, mgr);
var query = baseQuery.Take(2).SelectMany(new ProjectionSelector("OrderSummaries"));
var results = query.Execute();          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.SelectMany``1(IdeaBlade.EntityModel.IEntityQuery{``0},IdeaBlade.Core.IProjectionSelector)">
            <summary>
            Projects each element of a sequence to an IEnumerable{T} and combines the resulting sequences into one sequence of type IQueryable{T}.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
 var mgr = new DomainModelEntityManager();

 var baseQuery = mgr.Customers;
 var query = baseQuery.Take(2).SelectMany(new ProjectionSelector("OrderSummaries"));
 var results = query.Execute();          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.SelectMany``2(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
            <summary>
            Projects each element of a sequence to an IEnumerable{T} and combines the resulting sequences into one sequence of type IQueryable{T}.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var baseQuery = mgr.Customers;
var query = baseQuery.Take(2).SelectMany(c => c.OrderSummaries);
var results = query.Execute();          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.SelectMany``2(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
            <summary>
            Projects each element of a sequence to an IEnumerable{T} and combines the resulting sequences into one sequence of type IQueryable{T}.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Skip(IdeaBlade.EntityModel.ITypedEntityQuery,System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="source"></param>
            <param name="count"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var entityType = typeof(Customer);
var baseQuery = EntityQuery.Create(entityType, mgr);
var pss = new SortSelector("Id");
var query = baseQuery.OrderBySelector(pss).Skip(10).Take(10);
var results = query.Execute();          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Skip``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="count"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var query = mgr.Customers.OrderBy(c=> c.Id).Skip(10).Take(10);
var results = query.Execute();          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.SkipWhile``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.SkipWhile``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Take(IdeaBlade.EntityModel.ITypedEntityQuery,System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="source"></param>
            <param name="count"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var entityType = typeof(Customer);
var baseQuery = EntityQuery.Create(entityType, mgr);
var pss = new SortSelector("Id");
var query = baseQuery.OrderBySelector(pss).Skip(10).Take(10);
var results = query.Execute();          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Take``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="count"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var query = mgr.Customers.OrderBy(c=> c.Id).Skip(10).Take(10);
var results = query.Execute();          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.TakeWhile``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns elements from a sequence as long as a specified condition is true, and then skips the remaining elements.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.TakeWhile``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            Returns elements from a sequence as long as a specified condition is true, and then skips the remaining elements.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.ThenBy``2(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var query = mgr.Customers.OrderBy(c => c.Country).ThenBy(c => c.CompanyName);
var results = query.Execute();          
          ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.ThenBy``2(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.ThenByDescending``2(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var query = mgr.Customers.OrderBy(c => c.Country).ThenByDescending(c => c.CompanyName);
var results = query.Execute();          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.ThenByDescending``2(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Union``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces the set union of two sequences.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source1"></param>
            <param name="source2"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr1 = new DomainModelEntityManager();

var query1 = mgr1.Customers.Where(c => c.Country == "UK");
var query2 = mgr1.Customers.Where(c => c.Region == "CA");

var combinedQuery = query1.Union(query2);
var list = combinedQuery.Execute();                    
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Union``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set union of two sequences.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source1"></param>
            <param name="source2"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Where``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source1"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Where``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source1"></param>
            <param name="predicate"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var query = mgr.Customers.Where(c => c.Country == "UK");
var list = query.Execute();                    
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Where(IdeaBlade.EntityModel.ITypedEntityQuery,IdeaBlade.Core.IPredicateDescription)">
            <summary>
            Filters a sequence of values based on a <see cref="T:IdeaBlade.Linq.PredicateDescription"/>.
            </summary>
            <param name="source"></param>
            <param name="predicateDescription"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var entityType = typeof(Customer);
var baseQuery = EntityQuery.Create(entityType, mgr);
var predicate = PredicateBuilder.Make(typeof(Customer), "Country", FilterOperator.StartsWith, "U");
var query = baseQuery.Where(predicate);
var list = query.Execute();          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.Where``1(IdeaBlade.EntityModel.IEntityQuery{``0},IdeaBlade.Core.IPredicateDescription)">
            <summary>
            Filters a sequence of values based on a <see cref="T:IdeaBlade.Linq.PredicateDescription"/>.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicateDescription"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
    public void WherePredicateQuery() {
      var mgr = new DomainModelEntityManager();
      var predicate = PredicateBuilder.Make(typeof(Customer), "Country", FilterOperator.StartsWith, "U");
      var query = mgr.Customers.Where(predicate);
      var list = query.ToList();
    }
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.ToQuery``1(``0)">
            <summary>
            Returns an EntityQuery which can be used to query for this entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var customers = mgr.Customers.ToList();
var aCust = customers.First();
// Build a query to retrieve this customer
var query = aCust.ToQuery();          
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.ToQuery``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an EntityQuery which can be used to query for these entities.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entities"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the entity list passed is empty.</exception>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var customers = mgr.Customers.Take(3).ToList();
var query = customers.ToQuery();          
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.ToQuery``1(System.Collections.Generic.List{``0})">
            <summary>
            Returns an EntityQuery which can be used to query for these entities.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entities"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the entity list passed is empty.</exception>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var customers = mgr.Customers.Take(3).ToList();
var query = customers.ToQuery();          
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.ToQuery``1(IdeaBlade.EntityModel.RelatedEntityList{``0})">
            <summary>
            Returns an EntityQuery which can be used to query for these entities.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entities"></param>
            <returns></returns>
            <remarks>
            The <see cref="T:IdeaBlade.EntityModel.EntityQuery"/> returned is built using the <see cref="T:IdeaBlade.EntityModel.EntityKey"/>
            of each entity in the list.  If the list is empty, which it will be if the 
            <see cref="P:IdeaBlade.EntityModel.RelatedEntityList`1.IsPendingEntityList">IsPendingEntityList</see> flag is on,
            an exception is thrown.
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var customer = mgr.Customers.FirstOrNullEntity();
var orders = customer.OrderSummaries;
var query = orders.ToQuery();          
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.AsScalarAsync``1(IdeaBlade.EntityModel.IEntityQuery{``0})">
            <summary>
            Converts an IEntityQuery{T} to an <see cref="T:IdeaBlade.EntityModel.IEntityScalarQuery`1"/> so that
            the scalar query can be executed asynchronously.
            </summary>
            <seealso cref="T:IdeaBlade.EntityModel.EntityScalarAsyncExtensions"/>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var query = mgr.Customers.AsScalarAsync();
var op = query.FirstOrDefault();
op.Completed += (o, args) => {
  var cust = args.Result;
};          
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryExtensions.AsScalarAsync(IdeaBlade.EntityModel.ITypedEntityQuery)">
            <summary>
            Converts a dynamically built <see cref="T:IdeaBlade.EntityModel.ITypedEntityQuery"/> to an <see cref="T:IdeaBlade.EntityModel.IEntityScalarQuery`1"/> so that
            the scalar query can be executed asynchronously.
            </summary>
            <param name="query"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var entityType = typeof(Customer);
var baseQuery = EntityQuery.Create(entityType, mgr);
var query = baseQuery.AsScalarAsync();
var op = query.FirstOrDefault();
op.Completed += (o, args) => {
  var cust = args.Result;
};          
    ]]>
        </code>
      </example>
        </member>
        <member name="T:IdeaBlade.EntityModel.ClientCanQueryAttribute">
            <summary>
            Can be used to indicate the authorized access to query operations on an entity type.
            </summary>
            <remarks>
            You can decorate your auto-generated entity classes with this attribute by setting
            the "Can query" property in the Entity Data Model designer for an entity.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.OperationAuthorizationAttribute">
            <summary>
            Base class defining authorization information for an operation.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.OperationAuthorizationAttribute.#ctor(System.Boolean)">
            <summary>
            Create an instance of this class.
            </summary>
            <param name="allowAccess"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.OperationAuthorizationAttribute.#ctor(System.String[])">
            <summary>
            Create an instance of this class.
            </summary>
            <param name="roles"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.OperationAuthorizationAttribute.#ctor(IdeaBlade.EntityModel.AuthorizeRolesMode,System.String[])">
            <summary>
            Create an instance of this class.
            </summary>
            <param name="authorizeRolesMode"></param>
            <param name="roles"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.OperationAuthorizationAttribute.Authorize(System.Security.Principal.IPrincipal)">
            <summary>
            Called prior to method invocation to determine if the user is authorized.
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.OperationAuthorizationAttribute.AllowAccess">
            <summary>
            Whether the type is available to client applications.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.OperationAuthorizationAttribute.AuthorizeRolesMode">
            <summary>
            How users will be authorized against the <see cref="P:IdeaBlade.EntityModel.OperationAuthorizationAttribute.Roles"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.OperationAuthorizationAttribute.Roles">
            <summary>
            List of authorized roles.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.ClientCanQueryAttribute.#ctor(System.Boolean)">
            <summary>
            Create an instance of this class.
            </summary>
            <param name="allowAccess"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ClientCanQueryAttribute.#ctor(System.String[])">
            <summary>
            Create an instance of this class.
            </summary>
            <param name="roles"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ClientCanQueryAttribute.#ctor(IdeaBlade.EntityModel.AuthorizeRolesMode,System.String[])">
            <summary>
            Create an instance of this class.
            </summary>
            <param name="mode"></param>
            <param name="roles"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.ClientCanSaveAttribute">
            <summary>
            Can be used to indicate the authorized access to save operations on an entity type.
            </summary>
            <remarks>
            You can decorate your auto-generated entity classes with this attribute by setting
            the "Can save" property in the Entity Data Model designer for an entity.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.ClientCanSaveAttribute.#ctor(System.Boolean)">
            <summary>
            Create an instance of this class.
            </summary>
            <param name="allowAccess"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ClientCanSaveAttribute.#ctor(System.String[])">
            <summary>
            Create an instance of this class.
            </summary>
            <param name="roles"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ClientCanSaveAttribute.#ctor(IdeaBlade.EntityModel.AuthorizeRolesMode,System.String[])">
            <summary>
            Create an instance of this class.
            </summary>
            <param name="mode"></param>
            <param name="roles"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.AuthorizeRolesMode">
            <summary>
            Defines how authorization roles are processed.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.AuthorizeRolesMode.Any">
            <summary>
            The user is authorized if in any of the specified roles.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.AuthorizeRolesMode.All">
            <summary>
            The user is authorized only if in all of the specified roles. 
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityRelations">
            <summary>
            Marker interface to use is discovering where EntityRelations are defined.
            </summary>
            <remarks/>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityMemberMetadata">
            <summary>
            Metadata information about a Type member.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityMemberMetadata.NullInstance">
            <summary>
            A null instance of a MemberMetadata.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMemberMetadata.VerifierSetterOptions">
            <summary>
            Determines default verification behavior.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.RegisterCallbackOperation">
            <summary>
            Information about an asynchronous RegisterCallback operation.
            </summary>
            <remarks>
            Used internally to track the async operation.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.CancelCallbackOperation">
            <summary>
            Information about an asynchronous CancelCallback operation.
            </summary>
            <remarks>
            Used internally to track the async operation.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.SaveStatus">
            <summary>
            Returns the kind of operation performed during a <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges"/> call.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.SaveStatus.Incomplete">
            <summary>
            Not yet completed.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.SaveStatus.NoOperation">
            <summary>
            No entities to save. 
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.SaveStatus.Cancelled">
            <summary>
            The save was cancelled.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.SaveStatus.ExceptionHandled">
            <summary>
            The save had an error but was "handled" by an EntityServerError handler.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.SaveStatus.Normal">
            <summary>
            The save was processed normally.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.SaveStatusExtensions">
            <summary>
            Static methods extending <see cref="T:IdeaBlade.EntityModel.SaveStatus"/>.
            <seealso cref="N:System.Linq"/>
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.SaveStatusExtensions.WasCancelled(IdeaBlade.EntityModel.SaveStatus)">
            <summary>
            Returns tre if the save operation was cancelled.
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.SaveStatusExtensions.WasExceptionHandled(IdeaBlade.EntityModel.SaveStatus)">
            <summary>
            Returns true if the save operation threw an exception handled by an
            EntityServerError handler.
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.SaveStatusExtensions.WasNoOperation(IdeaBlade.EntityModel.SaveStatus)">
            <summary>
            Returns true if the save operation was not performed.
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.SaveStatusExtensions.WasNormal(IdeaBlade.EntityModel.SaveStatus)">
            <summary>
            Returns true if the save operation completed normally.
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.InvokeServerMethodOperation">
            <summary>
            Information about an asynchronous InvokeServerMethod operation.
            </summary>
            <remarks>
            Returned by an <see cref="M:IdeaBlade.EntityModel.EntityManager.InvokeServerMethodAsync(IdeaBlade.EntityModel.ServerMethodDelegate,System.Action{IdeaBlade.EntityModel.InvokeServerMethodOperation},System.Object,System.Object[])">EntityManager.InvokeServerMethodAsync</see> call.
            You can use the <b>InvokeServerMethodOperation</b> to track or cancel the request.  The <b>InvokeServerMethodOperation</b> is also passed
            to the callback method supplied to the async call.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.InvokeServerMethodOperation.#ctor(System.Action{IdeaBlade.EntityModel.InvokeServerMethodOperation},IdeaBlade.EntityModel.InvokeServerMethodEventArgs)">
            <summary>
            WB for testing only. Do not remove even though marked obsolete
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.InvokeServerMethodOperation.Result">
            <summary>
            Returns the result of the asynchronous operation.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntitySaveOperation">
            <summary>
            Information about an asynchronous save operation.
            </summary>
            <remarks>
            Returned by an <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChangesAsync">EntityManager.SaveChangesAsync</see> call.
            You can use the <b>EntitySaveOperation</b> to track or cancel the request.  The <b>EntitySaveOperation</b> is also passed
            to the callback method supplied to the async call.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntitySaveOperation.#ctor(IdeaBlade.EntityModel.SaveWorkState,System.Object,System.Action{IdeaBlade.EntityModel.EntitySaveOperation})">
            <summary>
            Returned by an <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChangesAsync">EntityManager.SaveChangesAsync</see> call.
            </summary>
            <param name="saveWorkState"></param>
            <param name="userState"></param>
            <param name="callback"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntitySaveOperation.#ctor(System.Action{IdeaBlade.EntityModel.EntitySaveOperation},IdeaBlade.EntityModel.EntitySavedEventArgs)">
            <summary>
            WB for testing only. Do not remove even though marked obsolete
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntitySaveOperation.Entities">
            <summary>
            Returns the entities saved.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntitySaveOperation.SaveResult">
            <summary>
            The result of the save operation.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntitySaveOperation.Exception">
            <summary>
            Returns the exception thrown if an error occurred during save processing.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.LoginOperation">
            <summary>
            Information about an asynchronous login operation.
            </summary>
            <remarks>
            Returned by an <see cref="M:IdeaBlade.EntityModel.EntityManager.LoginAsync(IdeaBlade.EntityModel.ILoginCredential,System.Action{IdeaBlade.EntityModel.LoginOperation},System.Object)">EntityManager.LoginAsync</see> call.
            You can use the <b>LoginOperation</b> to track or cancel the request.  The <b>LoginOperation</b> is also passed
            to the callback method supplied to the async call.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.LoginOperation.#ctor(IdeaBlade.EntityModel.ILoginCredential,IdeaBlade.EntityModel.Security.LoginOptions,System.Object,System.Action{IdeaBlade.EntityModel.LoginOperation})">
            <summary>
            Created by DevForce when <see cref="M:IdeaBlade.EntityModel.EntityManager.LoginAsync(IdeaBlade.EntityModel.ILoginCredential,System.Action{IdeaBlade.EntityModel.LoginOperation},System.Object)">EntityManager.LoginAsync</see> is called.
            </summary>
            <param name="credential"></param>
            <param name="options"></param>
            <param name="userState"></param>
            <param name="callback"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.LoginOperation.#ctor(System.Action{IdeaBlade.EntityModel.LoginOperation},IdeaBlade.EntityModel.LoginEventArgs)">
            <summary>
            WB for testing only. Do not remove even though marked obsolete
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.LoginOperation.AuthenticationContext">
            <summary>
            The <b>IAuthenticationContext</b> returned by the login.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQueryOperation">
            <summary>
            Information about an asynchronous query operation.
            </summary>
            <remarks>
            Returned by an <see cref="M:IdeaBlade.EntityModel.EntityManager.ExecuteQueryAsync(IdeaBlade.EntityModel.IEntityQuery,System.Action{IdeaBlade.EntityModel.EntityQueryOperation},System.Object)">EntityManager.ExecuteQueryAsync</see> call.
            You can use the <b>EntityQueryOperation</b> to track or cancel the request.  The <b>EntityQueryOperation</b> is also passed
            to the callback method supplied to the async call.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryOperation.#ctor(IdeaBlade.EntityModel.IEntityQuery,System.Object,System.Action{IdeaBlade.EntityModel.EntityQueryOperation})">
            <summary>
            Created by DevForce when <see cref="M:IdeaBlade.EntityModel.EntityManager.ExecuteQueryAsync(IdeaBlade.EntityModel.IEntityQuery,System.Action{IdeaBlade.EntityModel.EntityQueryOperation},System.Object)">EntityManager.ExecuteQueryAsync</see> is called.
            </summary>
            <param name="query"></param>
            <param name="userState"></param>
            <param name="callback"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryOperation.#ctor(System.Action{IdeaBlade.EntityModel.EntityQueryOperation},IdeaBlade.EntityModel.EntityQueriedEventArgs)">
            <summary>
            WB for testing only. Do not remove even though marked obsolete
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryOperation.EntityQuery">
            <summary>
            The requested query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryOperation.Results">
            <summary>
            The results of the query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryOperation.ChangedEntities">
             <summary>
             The list of every entity that was either added or modified in the EntityManager's cache
             as a result of this query.
             </summary>
             <remarks>
             The <b>ChangedEntities</b> list may differ from the <see cref="P:IdeaBlade.EntityModel.EntityQueriedEventArgs.Results"/> 
             list since the <b>Entities</b> will include only those entities directly queried, and not entities
             fetched due to query inversion or use of an "Include".
             <para>
             Note an exception is returned when calling the getter if the asynchronous operation was cancelled or failed, since
             the result is undefined.
             </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryOperation.WasFetched">
            <summary>
            Whether the operation completed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryOperation.ResolvedFetchStrategy">
            <summary>
            The fetch strategy actually used to process the query.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQueryOperation`1">
            <summary>
            Information about an asynchronous query operation.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            Returned by an <see cref="M:IdeaBlade.EntityModel.EntityManager.ExecuteQueryAsync``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.Action{IdeaBlade.EntityModel.EntityQueryOperation{``0}},System.Object)">EntityManager.ExecuteQueryAsync&lt;T&gt;</see> call.
            You can use the <b>EntityQueryOperation</b> to track or cancel the request.  The <b>EntityQueryOperation</b> is also passed
            to the callback method supplied to the async call.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryOperation`1.#ctor(IdeaBlade.EntityModel.IEntityQuery{`0},System.Object,System.Action{IdeaBlade.EntityModel.EntityQueryOperation{`0}})">
            <summary>
            Created by DevForce when <see cref="M:IdeaBlade.EntityModel.EntityManager.ExecuteQueryAsync(IdeaBlade.EntityModel.IEntityQuery,System.Action{IdeaBlade.EntityModel.EntityQueryOperation},System.Object)">EntityManager.ExecuteQueryAsync</see> is called.
            </summary>
            <param name="query"></param>
            <param name="userState"></param>
            <param name="callback"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryOperation`1.#ctor(System.Action{IdeaBlade.EntityModel.EntityQueryOperation{`0}},IdeaBlade.EntityModel.EntityQueriedEventArgs{`0})">
            <summary>
            WB for testing only. Do not remove even though marked obsolete
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryOperation`1.EntityQuery">
            <summary>
            The requested query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryOperation`1.Results">
            <summary>
            The results of the query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryOperation`1.ChangedEntities">
             <summary>
             The list of every entity that was either added or modified in the EntityManager's cache
             as a result of this query.
             </summary>
             <remarks>
             The <b>ChangedEntities</b> list may differ from the <see cref="P:IdeaBlade.EntityModel.EntityQueriedEventArgs.Results"/> 
             list since the <b>Entities</b> will include only those entities directly queried, and not entities
             fetched due to query inversion or use of an "Include".
             <para>
             Note an exception is returned when calling the getter if the asynchronous operation was cancelled or failed, since
             the result is undefined.
             </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryOperation`1.WasFetched">
            <summary>
            Whether the operation completed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryOperation`1.ResolvedFetchStrategy">
            <summary>
            The fetch strategy actually used to process the query.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IdFixupWorkState">
            <summary>
            Used internally to pass information to the server for an Id fixup request.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.Multiplicity">
            <summary>
            An enum used when retrieving entities to determine where to look and in what order.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.Multiplicity.One">
            <summary>
            One
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.Multiplicity.ZeroOrOne">
            <summary>
            Zero or One
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.Multiplicity.Many">
            <summary>
            Many - 0 to N
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityServerConnectionException">
            <summary>
            Exception thrown for connection-related failures.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityServerException">
            <summary>
            Exception thrown by the EntityServer for persistence failures.
            </summary>
            <remarks>
            A <b>EntityServerException</b>, or one of its sub-types, can be thrown for a number of error conditions
            detected while the <see cref="T:IdeaBlade.EntityModel.EntityManager"/> communicates with the <see cref="T:IdeaBlade.EntityModel.Server.EntityServer"/>.
            It can be raised during <see cref="M:IdeaBlade.EntityModel.EntityManager.Connect"/> and <see cref="M:IdeaBlade.EntityModel.EntityManager.Login(IdeaBlade.EntityModel.ILoginCredential)">Login</see> processing, 
            while fetching data, or saving data via <b>SaveChanges</b>.
            <para>
            The <b>EntityServerException</b> is first raised via the <see cref="E:EntityManager.EntityServerError"/> event.
            If a handler is in place for this event you can choose to handle the error and set the <see cref="P:IdeaBlade.EntityModel.EntityServerErrorEventArgs.Handled"/>
            property value to true.  If a handler is not found or the <b>Handled</b> property is not set, the <b>EntityServerException</b>
            is thrown back to the calling code.
            </para>
            <para>
            The <see cref="P:IdeaBlade.EntityModel.EntityServerException.FailureType"/> of the exception indicates the general type of failure condition.  The <see cref="P:IdeaBlade.EntityModel.EntityServerException.OperationType"/>
            indicates the type of persistence operation requested when the error occurred.  The <see cref="P:System.Exception.InnerException"/> will have
            additional information on the error.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerException.#ctor">
            <summary>
            Initializes a new instance of the EntityServerException class.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the EntityServerException class. 
            </summary>
            <param name="message">A message added to describe the exception</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerException.#ctor(System.String,System.Exception,IdeaBlade.EntityModel.PersistenceOperation,IdeaBlade.EntityModel.PersistenceFailure)">
            <summary>
            Initializes a new instance of the EntityServerException class.
            </summary>
            <param name="message">A message added to describe the exception</param>
            <param name="innerException">An instance of Exception that describes the error that caused this exception</param>
            <param name="operationType"></param>
            <param name="failureType"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo with information about the exception.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerException.ToString">
            <summary>
            Returns a string representation of the current exception.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerException.IsConnectionProblem(System.Exception)">
            <summary>
            Determines if the exception occurred while accessing the network.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerException.IsLicenseException(System.Exception)">
            <summary>
            Determines if the exception is a license exception;
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerException.IsDataProblem(System.Exception)">
            <summary>
            Determines if the exception occurred while accessing the data store.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerException.IsDataConcurrencyProblem(System.Exception)">
            <summary>
            Determines if a concurrency exception occurred while accessing the data store.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerException.RemoteExceptionName">
            <summary>
            Returns the type name of the InnerException thrown on the remote Object Server.
            </summary>
            <remarks>
            When using a remote Object Server, the InnerException will not be returned to the client, however
            the <b>RemoteExceptionName</b> and other properties provide information on the error.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerException.RemoteExceptionDetails">
            <summary>
            Returns the details of the InnerException thrown on the remote Object Server.
            </summary>
            <remarks>
            When using a remote Object Server, the InnerException will not be returned to the client, however
            the <b>RemoteExceptionDetails</b> and other properties provide information on the error.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerException.RemoteSource">
            <summary>
            Returns the source of the InnerException thrown on the remote Object Server.
            </summary>
            <remarks>
            When using a remote Object Server, the InnerException will not be returned to the client, however
            the <b>RemoteSource</b> and other properties provide information on the error.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerException.RemoteStackTrace">
            <summary>
            Returns the stack trace of the InnerException thrown on the remote Object Server.
            </summary>
            <remarks>
            When using a remote Object Server, the InnerException will not be returned to the client, however
            the <b>RemoteStackTrace</b> and other properties provide information on the error.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerException.FailureType">
            <summary>
            The type of persistence failure.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerException.OperationType">
            <summary>
            The type of persistence operation requested when the error occurred.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerException.Cancelled">
            <summary>
            Returns true if the operation was cancelled.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerConnectionException.#ctor">
            <summary>
            Initializes a new instance of the EntityServerConnectionException class.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerConnectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the EntityServerConnectionException class.
            </summary>
            <param name="pMessage">A message added to describe the exception</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the EntityServerConnectionException class.
            </summary>
            <param name="pMessage">A message added to describe the exception</param>
            <param name="pInnerException">Wrapped Exception</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the EntityServerConnectionException class.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerConnectionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Internal use only.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.IDataSourceKey">
            <summary>
            Interface implemented by all data source key types.
            </summary>
            <remarks>
            Each data source supported (currently relational databases and web services) has a concrete
            implementation of <b>IDataSourceKey</b>.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.IDataSourceKey.Name">
            <summary>
            Returns the key name.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IDataSourceKey.Tag">
            <summary>
            Gets or sets an implementation-specific tag for developers' custom use.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.RemoteEntityServerProxyBase">
            <summary>
            This class supports the DevForce Framework infrastructure 
            and is not intended to be used directly from your code. 
            </summary>
            <remarks>
            Each <see cref="T:IdeaBlade.EntityModel.EntityManager"/> contains an <b>EntityServerProxy</b>
            used to communicate with the EntityService and an EntityServer.
            The RemoteEntityServer is used when communicating to a remote BOS.
            We have .NET and SL flavors because of async nature of SL.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityServerProxy">
            <summary>
            This class supports the DevForce Framework infrastructure 
            and is not intended to be used directly from your code. 
            </summary>
            <remarks>
            Each <see cref="T:IdeaBlade.EntityModel.EntityManager"/> contains an <b>EntityServerProxy</b>
            used to communicate with the EntityService and an EntityServer.
            <para>
            The EntityServerProxy is used when communicating with a local
            EntityService and EntityServer (all communications are method call/return
            within a single address space).  The RemoteEntityServerProxy is used
            for communciations with a remote EntityService and EntityServer.
            </para>
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityServerContract">
            <summary>
            Service contract for an Entity Server. 
            </summary>
            <remarks>
            Knowledge of this interface will only be needed in the event
            that the existing EntityServer needs to be extended.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerContract.Login(IdeaBlade.EntityModel.ILoginCredential)">
            <summary>
            Used to validate client credentials and identify the session.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerContract.LoginSession(System.Guid)">
            <summary>
            Login with an existing session key.
            </summary>
            <param name="sessionKey"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerContract.Logout(IdeaBlade.EntityModel.SessionBundle)">
            <summary>
            Used to log off a given client session.
            </summary>
            <param name="sessionBundle"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerContract.Fetch(IdeaBlade.EntityModel.SessionBundle,IdeaBlade.EntityModel.IEntityQuerySurrogate)">
            <summary>
            Executes the EntityQuery and returns the results.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerContract.SaveChanges(IdeaBlade.EntityModel.SaveWorkState)">
            <summary>
            Saves any changes to a DataSet back to the data source, with the save options specified.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerContract.GetRealIdMap(IdeaBlade.EntityModel.IdFixupWorkState)">
            <summary>
            Returns a mapping of temporary to real IDs.
            </summary>
            <remarks>
            This is called before data is saved to the data source.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServerContract.InvokeServerMethod(IdeaBlade.EntityModel.SessionBundle,IdeaBlade.Core.ITypeWrapper,System.String,System.String,System.Object[])">
            <summary>
            Invokes a static method for execution on the server.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerProxy.CreateInstance(IdeaBlade.EntityModel.EntityManager)">
            <summary>
            Create an EntityServerProxy.
            </summary>
            <param name="em"></param>
            <returns></returns>
            <remarks>
            Returns an <b>EntityServerProxy</b> for local communications, or a
            <see cref="T:IdeaBlade.EntityModel.RemoteEntityServerProxy"/> for remote communications,
            based on the <see cref="P:IdeaBlade.EntityModel.EntityManager.UsesDistributedEntityService"/> setting on the
            <see cref="T:IdeaBlade.EntityModel.EntityManager"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerProxy.GetInstance(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Gets an <b>EntityServerProxy</b> according to the specified parameters.
            </summary>
            <param name="dataSourceExtension"></param>
            <param name="compositionContextName"></param>
            <param name="usesDistributedEntityService"></param>
            <param name="serviceKey"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerProxy.#ctor(System.String,System.String,System.String,System.Boolean)">
             <summary>
             Create an instance of this class.
             </summary>
            <param name="dataSourceExtension"></param>
             <param name="composistionContextName"></param>
             <param name="serviceKey"></param>
            <param name="usesRemoteEntityService"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerProxy.Connect(IdeaBlade.EntityModel.ConnectAction)">
            <summary>
            Connect to an EntityServer.The ConnectAction is used
            for async connects to a remote server.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerProxy.Disconnect">
            <summary>
            Disconnect from a EntityServer.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerProxy.GetEntityServer">
            <summary>
            Get a local P-Server or a proxy to the remote service.  
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerProxy.IsConnected">
            <summary>
            Indicates the service name is known.  Used when login performed through Authenticator.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerProxy.CallbackManager">
            <summary>
            Instantiate the callback manager only if needed.  CallbackManager manages client subscriptions
            to NotificationService.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.RemoteEntityServerProxyBase.#ctor(System.String,System.String,System.String)">
            <summary>
            In practice we have a singleton xEntityServiceProxy, and then one xEntityServerProxy
            per ds extension.  The EntityManager interacts with this class, which "proxies" the EntityServer.  
            </summary>
            <param name="dataSourceExtension"></param>
            <param name="compositionContextName"></param>
            <param name="serviceKey"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.RemoteEntityServerProxyBase.Connect(IdeaBlade.EntityModel.ConnectAction)">
            <summary>
            "Connect" asks the EntityService for the name of the EntityServer.  The EntityService will also
            start the EntityServer if necessary.  If async, the service call is blocking and should be on a background thread.
            The silly ConnectAction tells us what stage of an async connect is underway.  This is unfortunately important because
            of error handling and we want proxy objects to be created on the main thread.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.RemoteEntityServerProxyBase.CheckConnection(System.Exception)">
            <summary>
            Called for errors from an EntityServer call (Login, Fetch, etc).
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.RemoteEntityServerProxyBase.ForceReconnect">
            <summary>
            Try to recover after some sort of communication failure.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.RemoteEntityServerProxy.GetEntityServer">
            <summary>
            Return a proxy to the remote EntityServer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.RemoteEntityServerProxy.ForceReconnect">
            <summary>
            A forced reconnect (aborting the channel and recreating) is done on the main thread.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityServiceContract">
            <summary>
            Service contract for the Entity Service. For internal use only.
            </summary>
            <remarks>
            Knowledge of this interface will only be needed in the event
            that the existing EntityService needs to be extended.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServiceContract.GetEntityServerName(System.String,System.String)">
            <summary>
            Return the service name of an instance of an EntityServer service.
            </summary>
            <param name="dataSourceExtension"></param>
            <param name="compositionContextName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityServiceContract.Ping">
            <summary>
            Determines whether the EntityService is responding.
            </summary>
            <returns>true if awake; otherwise raises exception</returns>
            <remarks>
            If the Ping fails an exception is thrown.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.RemoteEntityServiceProxyBase.GetInstance(System.String)">
            <summary>
            Returns an SL or non-SL instance.  Note that the actual WCF proxy is not created yet, nor any
            service call made.  Inner proxy is created on first use.  
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.RemoteEntityServiceProxyBase`1">
            <summary>
            We use sync and async contracts for the IEntityService.  
            </summary>
            <typeparam name="TContract"></typeparam>
        </member>
        <member name="T:IdeaBlade.EntityModel.RemoteEntityServiceProxy">
            <summary>
            Proxy to the EntityService for non-SL n-tier applications.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.Security.LoginOptions">
            <summary>
            Determine the characteristics of the EntityServer to authenticate against.
            </summary>
            <remarks>
            Validation of user credentials can be performed either for a specific <see cref="T:IdeaBlade.EntityModel.EntityManager"/> or for the application
            as a whole.  An <see cref="T:IdeaBlade.EntityModel.EntityManager"/> will communicate with a specific <b>EntityServer</b>, one having the same 
            data source extension and composition context name.  By default, the synchronous and asynchronous <b>Login</b> calls made from
            an EntityManager will use <b>LoginOptions</b> reflecting the EntityServer in use.
            <para>
            When calling the <see cref="M:IdeaBlade.EntityModel.Security.Authenticator.Login(IdeaBlade.EntityModel.ILoginCredential,IdeaBlade.EntityModel.Security.LoginOptions)">Authenticator.Login</see> directly, you may choose which EntityServer to authenticate against by specifying
            the <b>LoginOptions</b>.  
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Security.LoginOptions.#ctor(System.String,System.String,IdeaBlade.EntityModel.EntityServiceOption,System.String)">
            <summary>
            Creates an instance of this class with specified settings.
            </summary>
            <param name="dataSourceExtension"></param>
            <param name="compositionContextName"></param>
            <param name="entityServiceOption"></param>
            <param name="serviceKey"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.Security.LoginOptions.DataSourceExtension">
            <summary>
            The data source extension.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.Security.LoginOptions.CompositionContextName">
            <summary>
            The name of the composition context.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.Security.LoginOptions.UsesDistributedEntityService">
            <summary>
            Whether a local or remote EntityServer is used.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.Security.LoginOptions.ServiceKey">
            <summary>
            The service key of the EntityServer.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.SerializationFns">
            <summary>
            Static methods to assist in serializing and deserializing objects and object graphs.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.SerializationFns.Save(System.Object,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            Saves a serialized object to a file.
            </summary>
            <param name="instance"></param>
            <param name="fileName"></param>
            <param name="knownTypes"></param>
            <param name="useBinary"></param>
            <remarks>
            The object is serialized to the file in either binary or text format.  The user must have
            write permissions to the directory, and if the file exists it will be overwritten.
            </remarks>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:IdeaBlade.EntityModel.SerializationFns.Save(System.Object,System.IO.Stream,System.Boolean,System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            Saves an object to a Stream, optionally closing the stream when done.
            </summary>
            <param name="instance"></param>
            <param name="stream"></param>
            <param name="closeOnExit"></param>
            <param name="knownTypes"></param>
            <param name="useBinary"></param>
            <remarks>
            The object is serialized to the stream in either binary or text format.
            <para>If the <see cref="P:IdeaBlade.EntityModel.SerializationFns.UseDCS"/> flag is on, the object is serialized with the DataContractSerializer; otherwise the NetDataContractSerializer is used.
            <b>UseDCS</b> is on by default, and is assumed to be on in Silverlight, where the NDCS serializer is not supported.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.SerializationFns.Restore(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            Static (Shared in Visual Basic) method which creates and loads an object from the file specified.
            </summary>
            <param name="instanceType">The type of object being 'restored'</param>
            <param name="fileName">File containing a serialized object</param>
            <param name="knownTypes">List of known types in the serialized object</param>
            <param name="useBinaryFormat">True to restore a file in binary format; false if the file is in text format.</param>
            <returns>A deserialized object</returns>
            <remarks>
            Use <b>Restore</b> to deserialize an object which was previously saved to a file.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.SerializationFns.Restore(System.Type,System.IO.Stream,System.Boolean,System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            Static (Shared in Visual Basic) method which creates and loads an object from the stream specified.
            </summary>
            <param name="instanceType">The type of instance to deserialize</param>
            <param name="stream">Stream to be read</param>
            <param name="closeOnExit">Whether or not to close the stream when done.</param>
            <param name="knownTypes">List of known types in the serialized object</param>
            <param name="useBinaryFormat">True to restore data in binary format; false if the data is in text format.</param>
            <returns>An object</returns>
            <remarks>
            Use <b>Restore</b> to deserialize an object which was previously saved to a stream or file.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.SerializationFns.UseDCS">
            <summary>
            Whether or not to use the DCS - DataContractSerializer vs. the NDCS - NetDataContractSerializer.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.SaveWorkState">
            <summary>
            For internal use only.  Required to be public for Silverlight.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.SaveWorkState.#ctor(IdeaBlade.EntityModel.EntityManager,System.Collections.IEnumerable,IdeaBlade.EntityModel.SaveOptions)">
            <summary>
            
            </summary>
            <param name="em"></param>
            <param name="entities"></param>
            <param name="saveOptions"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.SaveWorkState.#ctor(System.Collections.IEnumerable,IdeaBlade.EntityModel.SaveStatus,System.Exception)">
            <summary> 
            WB for testing only. Do not remove even though marked obsolete
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SaveWorkState.DataSourceResolver">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SaveWorkState.Fault">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SaveWorkState.SerializationCompletedHandle">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.SerializationState">
            <summary>
            Enumerates the state and reason for entity serialization or deserialization.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.SerializationState.Materializing">
            <summary>
            Materializing - converting data in a datastore into objects.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.SerializationState.Serializing">
            <summary>
            Serializing.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.SerializationState.SerializingForMerge">
            <summary>
            Serializing for the purposes of immediately merging the result data into an EntityManager. 
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.SerializationState.Deserializing">
            <summary>
            Deserializing.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.SerializationState.Saving">
            <summary>
            Saving
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.ObjectWithContext">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.ObjectWithContext.#ctor(System.Object,System.Object)">
            <summary>
            For internal use only.
            </summary>
            <param name="obj"></param>
            <param name="context"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.ObjectWithContext.Object">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ObjectWithContext.Context">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.SerializationContext">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.SerializationContext.ThreadLocalValue">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.SerializationContext.ThreadLocalMode">
            <summary>
            This property is used to control the mechanism that DevForce uses to serialize entity graphs. This is a static 'ThreadLocal' property
            meaning that it may be set independently on each thread but is 'global' to that thread. If this property is set to SerializationContextMode.Default
            the the SerializationContext.DefaultMode value is to control serialization instead. See <see cref="T:IdeaBlade.EntityModel.SerializationContextMode"/>.
            </summary>
            <remarks>
            This property will normally not need to be set.  It should only be needed if stack overflow exceptions are occuring during entity graph serialization
            operations. If this occurs this property can be set to SerializationContextMode.Alternate.
            </remarks>
        </member>
        <member name="F:IdeaBlade.EntityModel.SerializationContext.Serializing">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.SerializationContext.Deserializing">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.SerializationContext.Materializing">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.SerializationContext.Saving">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.SerializationContext.SetSerializationPredicate(System.Predicate{IdeaBlade.EntityModel.ObjectWithContext})">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.SerializationContext.#ctor(IdeaBlade.EntityModel.SerializationContext)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SerializationContext.DefaultMode">
            <summary>
            This property is used to control the mechanism that DevForce uses to serialize entity graphs. This is a static property 
            that determines the 'default' serialization behavior. The SerializationContext.ThreadLocalMode will supercede this property if it is set to 
            any value other than SerializationContextMode.Default. See <see cref="T:IdeaBlade.EntityModel.SerializationContextMode"/>.
            </summary>
            <remarks>
            This property will normally not need to be set.  It should only be needed if stack overflow exceptions are occuring during entity graph serialization
            operations. If this occurs this property can be set to SerializationContextMode.Alternate.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.SerializationContext.State">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SerializationContext.ShouldSerializePredicate">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SerializationContext.IsSerializing">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SerializationContext.IsDeserializing">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SerializationContext.IsMaterializing">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SerializationContext.IsSaving">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.SerializationContextMode">
            <summary>
            This enum is used to control the mechanism that DevForce uses to serialize entity graphs via the SerializationContext.ThreadLocalMode and the 
            SerializationContext.DefaultMode properties. 
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.SerializationContextMode.Default">
            <summary>
            Use the DefaultMode setting.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.SerializationContextMode.Standard">
            <summary>
            Standard Serialization.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.SerializationContextMode.Alternate">
            <summary>
            Custom serialization to get around DCS stackoverflow issues.  Slightly slower during deserialization
            than Standard. This setting should only be used if stack overflow exceptions are occuring during entity graph serialization
            operations. 
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityListManager`1">
            <summary>
            Manages any list of Entities to ensure the list stays current with specified filtering criteria.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <remarks>
            An <b>EntityListManager</b> can turn any concrete<see cref="T:System.Collections.IList"/> implementation into a 
            "live" or managed list.  By specifying a <see cref="P:IdeaBlade.EntityModel.EntityListManager`1.Filter"/> and <see cref="P:IdeaBlade.EntityModel.EntityListManager`1.FilterProperties"/>
            the EntityListManager will ensure that any changes, additions or deletions to entities meeting the filtering
            criteria are automatically reflected in the list.  
            <para>
            Use <see cref="M:IdeaBlade.EntityModel.EntityListManager`1.ManageList(System.Collections.IList,System.Boolean)"/> and <see cref="M:IdeaBlade.EntityModel.EntityListManager`1.UnmanageList(System.Collections.IList)"/> to add or remove lists under management.  All lists managed
            by an <b>EntityListManager</b> must contain the same Entity type.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityListManager`1.#ctor(IdeaBlade.EntityModel.EntityManager,System.Predicate{`0},IdeaBlade.EntityModel.EntityProperty[])">
            <summary>
            Initialize a new instance of the EntityListManager.
            </summary>
            <param name="entityManager">EntityManager holding the Entities</param>
            <param name="filter">A predicate returning true if the tested entity belongs in the list</param>
            <param name="filterProperties">
            The watched properties. If supplied, changes to values in the watched properties trigger filtering. 
            If null, any changes to Entities of this type will trigger filtering.
            </param>
            <remarks>
            The <see cref="P:IdeaBlade.EntityModel.EntityListManager`1.Filter"/> uses a .NET <b>Predicate&lt;T&gt;</b>, a delegate that defines a set of 
            criteria and determines whether the specified object passed to it meets those criteria. 
            The Filter receives every addition, deletion or modification (based on the <see cref="P:IdeaBlade.EntityModel.EntityListManager`1.FilterProperties"/> specified)
            of entities of the type watched, and determines whether the entity belongs
            in the list.  If the Filter returns true the entity is added to or kept in the list; if the Filter returns false
            the entity is removed from the list.  (Note that entities removed from the managed list are not removed from
            the EntityManager, nor are they deleted.)
            <para>
            Performance will be needlessly poor if the EntityListManager tests an entity every time any of its properties change.
            To avoid this, specify in the constructor or the <see cref="P:IdeaBlade.EntityModel.EntityListManager`1.FilterProperties"/> property
            which entity properties are relevant to the filtering.
            </para>
            <para>
            An EntityListManager holds weak references to the Lists it watches. This means that you will need to
            hold on to a reference to each ELM to insure that it does not go out of scope and get garbage collected.
            One approach to this is to use Lists that implement the <see cref="T:IdeaBlade.Core.IHasListManager"/> interface. This will insure each list
            keeps a reference to its ELM and any shared ELM's will not go out of scope until the last of their child lists do.
            </para>
            </remarks>
            <example>
    <code lang="C#">
      // Example showing how a List&lt;T&gt; can be managed as a live list.
      public void EntityListManagerSample() {

      DomainModelEntityManager mgr = new DomainModelEntityManager();
      
      // Retrieve a customer and employee.
      var customer = mgr.Customers.FirstOrDefault(c =&gt; c.Id == 1);
      var employee = mgr.Employees.FirstOrDefault(e =&gt; e.Id == 1);

      // Load a List with customer's order summaries.
      var list = new List&lt;OrderSummary&gt;(customer.OrderSummaries);
      int orderCount = list.Count;

      // We want to watch for any new orders for this customer.
      // We can't "watch" the NavigationEntityProperty, so watch its FK. 
      var prop = OrderSummary.Customer_fk_IdEntityProperty;

      // Set up the manager.
      IListManager manager = new EntityListManager&lt;OrderSummary&gt;(mgr,
              os =&gt; os.Customer == customer,   // filter 
              new[] { prop },                  // watch
              list,                            // list to be managed
              false);                          // refresh now 

      // Create a new order - the list count should increment.
      OrderSummary aOrder = mgr.CreateEntity&lt;OrderSummary&gt;();
      aOrder.Employee = employee;
      aOrder.Customer = customer;
      aOrder.AddToManager();
     
      Assert.IsTrue(list.Count == orderCount + 1);

      // Now delete this order - the list count should decrement.
      aOrder.EntityAspect.Delete();
      Assert.IsTrue(list.Count == orderCount);
    }
   </code>
   <code lang="VB">      
    </code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityListManager`1.#ctor(IdeaBlade.EntityModel.EntityManager,System.Predicate{`0},IdeaBlade.EntityModel.EntityProperty[],System.Collections.IList,System.Boolean)">
            <summary>
            Initialize a new instance of the EntityListManager.
            </summary>
            <param name="entityManager">EntityManager holding the Entities</param>
            <param name="filter">A predicate returning true if the tested entity belongs in the list</param>
            <param name="filterProperties">
            The watched properties. If supplied, changes to values in the watched properties trigger filtering. 
            If null, any changes to Entities of this type will trigger filtering.
            </param>
            <param name="list">The list to be managed</param>
            <param name="shouldRefresh">If true, immediately refresh the list for the filtering criteria</param>
            <remarks>
            The <see cref="P:IdeaBlade.EntityModel.EntityListManager`1.Filter"/> uses a .NET <b>Predicate&lt;T&gt;</b>, a delegate that defines a set of 
            criteria and determines whether the specified object passed to it meets those criteria. 
            The Filter receives every addition, deletion or modification (based on the <see cref="P:IdeaBlade.EntityModel.EntityListManager`1.FilterProperties"/> specified)
            of entities of the type watched, and determines whether the entity belongs
            in the list.  If the Filter returns true the entity is added to or kept in the list; if the Filter returns false
            the entity is removed from the list.  (Note that entities removed from the managed list are not removed from
            the EntityManager, nor are they deleted.)
            <para>
            Performance will be needlessly poor if the EntityListManager tests an entity every time any of its properties change.
            To avoid this, specify in the constructor or the <see cref="P:IdeaBlade.EntityModel.EntityListManager`1.FilterProperties"/> property
            which entity properties are relevant to the filtering.
            </para>
            <para>
            You can choose to have the EntityListManager refresh the list immediately after assuming
            management of the list.  This is unnecessary if the supplied list is known to be complete at the time
            the manager is initialized.
            </para>
            <para>
            An EntityListManager holds weak references to the Lists it watches. This means that you will need to
            hold on to a reference to each ELM to insure that it does not go out of scope and get garbage collected.
            One approach to this is to use Lists that implement the <see cref="T:IdeaBlade.Core.IHasListManager"/> interface. This will insure each list
            keeps a reference to its ELM and any shared ELM's will not go out of scope until the last of their child lists do.
            </para>
            </remarks>
            <example>
    <code lang="C#">
      // Example showing how a List&lt;T&gt; can be managed as a live list.
      public void EntityListManagerSample() {

      DomainModelEntityManager mgr = new DomainModelEntityManager();
      
      // Retrieve a customer and employee.
      var customer = mgr.Customers.FirstOrDefault(c =&gt; c.Id == 1);
      var employee = mgr.Employees.FirstOrDefault(e =&gt; e.Id == 1);

      // Load a List with customer's order summaries.
      var list = new List&lt;OrderSummary&gt;(customer.OrderSummaries);
      int orderCount = list.Count;

      // We want to watch for any new orders for this customer.
      // We can't "watch" the NavigationEntityProperty, so watch its FK. 
      var prop = OrderSummary.Customer_fk_IdEntityProperty;

      // Set up the manager.
      IListManager manager = new EntityListManager&lt;OrderSummary&gt;(mgr,
              os =&gt; os.Customer == customer,   // filter 
              new[] { prop },                  // watch
              list,                            // list to be managed
              false);                          // refresh now 

      // Create a new order - the list count should increment.
      OrderSummary aOrder = mgr.CreateEntity&lt;OrderSummary&gt;();
      aOrder.Employee = employee;
      aOrder.Customer = customer;
      aOrder.AddToManager();
     
      Assert.IsTrue(list.Count == orderCount + 1);

      // Now delete this order - the list count should decrement.
      aOrder.EntityAspect.Delete();
      Assert.IsTrue(list.Count == orderCount);
    }
   </code>
   <code lang="VB">      
    </code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityListManager`1.ManageList(System.Collections.IList,System.Boolean)">
            <summary>
            Adds a list to the set of those managed by this EntityListManager and optionally refreshes the list
            </summary>
            <param name="list"></param>
            <param name="shouldRefresh"></param>
            <example>
    <code lang="C#">
      // Example showing how a List&lt;T&gt; can be managed as a live list.
      public void EntityListManagerSample() {

      DomainModelEntityManager mgr = new DomainModelEntityManager();
      
      // Retrieve a customer and employee.
      var customer = mgr.Customers.FirstOrDefault(c =&gt; c.Id == 1);
      var employee = mgr.Employees.FirstOrDefault(e =&gt; e.Id == 1);

      // Load a List with customer's order summaries.
      var list = new List&lt;OrderSummary&gt;(customer.OrderSummaries);
      int orderCount = list.Count;

      // We want to watch for any new orders for this customer.
      // We can't "watch" the NavigationEntityProperty, so watch its FK. 
      var prop = OrderSummary.Customer_fk_IdEntityProperty;

      // Set up the manager.
      IListManager manager = new EntityListManager&lt;OrderSummary&gt;(mgr,
              os =&gt; os.Customer == customer,   // filter 
              new[] { prop },                  // watch
              list,                            // list to be managed
              false);                          // refresh now 

      // Create a new order - the list count should increment.
      OrderSummary aOrder = mgr.CreateEntity&lt;OrderSummary&gt;();
      aOrder.Employee = employee;
      aOrder.Customer = customer;
      aOrder.AddToManager();
     
      Assert.IsTrue(list.Count == orderCount + 1);

      // Now delete this order - the list count should decrement.
      aOrder.EntityAspect.Delete();
      Assert.IsTrue(list.Count == orderCount);
    }
   </code>
   <code lang="VB">      
    </code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityListManager`1.UnmanageList(System.Collections.IList)">
            <summary>
            Removes a list from the set of those managed by this EntityListManager.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityListManager`1.ContainsList(System.Collections.IList)">
            <summary>
            Returns whether the specified list is managed by this EntityListManager.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityListManager`1.RefreshList(System.Collections.IList)">
            <summary>
            Refresh the specified list using the current filter
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityListManager`1.RefreshAllLists">
            <summary>
            Refresh all lists managed by this manager using the current filter
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityListManager`1.EntityChangedHandler(System.Object,IdeaBlade.EntityModel.EntityChangedEventArgs)">
            <summary>
            This method is responsible for insuring that any changes to the
            pm that should add to a given list do so.  Any changes that should
            delete from the list are the responsibility of PropertyChanged event.  The
            reason for this division of labor is that we need to test every list for
            the add of an item but only those lists that contain an item for deletes
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityListManager`1.EntityPropertyChangedHandler(System.Object,IdeaBlade.EntityModel.EntityPropertyChangedEventArgs)">
            <summary>
            The list manager is responsible for insuring that any changes to the
            em  that should add to a given list do so.  Any changes that should
            delete from the list are the responsibility of the list itself.  The
            reason for this division of labor is that we need to test every list for
            the add of an item but only those lists that contain an item for deletes
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityListManager`1.Dispose">
            <summary>
            Dispose of this instance, releasing all event handlers.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityListManager`1.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityListManager`1.IncludedEntityStates">
            <summary>
            Entity states to include in the list ( all others will be excluded)
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityListManager`1.EntityManager">
            <summary>
            Gets the <see cref="P:IdeaBlade.EntityModel.EntityListManager`1.EntityManager"/> used by the entities in the managed lists. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityListManager`1.Filter">
            <summary>
            Gets or sets the <see cref="T:System.Predicate"/> used to set filtering criteria for the list(s).
            </summary>
            <remarks>
            The filter should return <c>true</c> if the supplied Entity belongs in the list(s) managed.
            <para>
            Setting or resetting the filter does not automatically refresh the list(s).
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityListManager`1.FilterProperties">
            <summary>
            Gets or sets the properties which, if their values change, will cause the <see cref="P:IdeaBlade.EntityModel.EntityListManager`1.Filter"/> to be re-applied.
            </summary>
            <remarks>
            If no properties are set then any changes to existing Entities will cause filtering to be re-applied.
            <para>
            Filter properties should be of type <see cref="T:IdeaBlade.EntityModel.DataEntityProperty"/>.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityListManager`1.Lists">
            <summary>
            Handle all weak ref issues in one place
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.PocoSaveMode">
            <summary>
            Determines how to discover any custom server side POCO save methods.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.PocoSaveMode.Default">
            <summary>
            Use an EntitySaveAdapter subclass if found, otherwise use save methods discovered via convention.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.PocoSaveMode.UseEntitySaveAdapter">
            <summary>
            Use an implementation of <b>EntitySaveAdapter</b>.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.PocoSaveMode.UseMethodsDiscoveredViaConvention">
            <summary>
            Use methods discovered via convention.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.DiscoverableTypeAttribute">
            <summary>
              Defines an attribute that marks a class as being discoverable by the DevForce framework.
            </summary>
            <remarks>
            The <b>DiscoverableType</b> attribute is used in several situations to identify
            types to be discovered. When using the <see cref="F:IdeaBlade.EntityModel.DiscoverableTypeMode.KnownType"/> the
            attribute can be used in place of the <see cref="T:IdeaBlade.EntityModel.IKnownType"/> interface to mark a type
            as a "known type" for serialization purposes.  (See the <see cref="T:System.Runtime.Serialization.DataContractSerializer">DataContractSerializer</see>
            for information on known types.)  
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.DiscoverableTypeAttribute.HasMode(System.Type,IdeaBlade.EntityModel.DiscoverableTypeMode)">
            <summary>
            Returns whether a type has an attribute with the specified <see cref="T:IdeaBlade.EntityModel.DiscoverableTypeMode"/>.
            </summary>
            <param name="t"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.DiscoverableTypeAttribute.#ctor(IdeaBlade.EntityModel.DiscoverableTypeMode)">
            <summary>
              Initializes a new instance of the class.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DiscoverableTypeAttribute.Mode">
            <summary>
            How the type is used.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.DiscoverableTypeMode">
            <summary>
            Used with the <see cref="T:IdeaBlade.EntityModel.DiscoverableTypeAttribute"/> to indicate how the type is used.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:IdeaBlade.EntityModel.DiscoverableTypeMode.KnownType">
            <summary>
            To be included in "known type" discovery for serialization purposes.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQueryingEventArgs">
            <summary>
            Arguments to the <see cref="E:IdeaBlade.EntityModel.EntityManager.Querying"/> event.
            </summary>
            <remarks>
            The <see cref="E:IdeaBlade.EntityModel.EntityManager.Querying"/> event is fired prior to the execution
            of any query, regardless of whether the query can be resolved from cache or the data source.  This event
            is fired prior to the <see cref="E:IdeaBlade.EntityModel.EntityManager.Fetching"/> event, which fires only
            when the query must be executed against the data source.
            The event handler can set <see cref="P:IdeaBlade.EntityModel.EntityQueryingEventArgs.Cancel"/> to stop execution of the
            query, and modify the query prior to execution.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryingEventArgs.#ctor(IdeaBlade.EntityModel.IEntityQuery)">
            <summary>
            Initialize a new instance of this class.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryingEventArgs.Query">
            <summary>
            The IEntityQuery involved in this event.
            </summary>
            <remarks>
            The query can be modified or replaced.  Note that if you use <see cref="M:IdeaBlade.EntityModel.EntityQueryExtensions.Filter``1(``0,IdeaBlade.EntityModel.EntityQueryFilterCollection)"/> to modify the query you must
            reassign this property altogether, since the Filter method returns a new query.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.BaseEntityQueriedEventArgs`1">
            <summary>
            Base class for generic and non-generic EntityQueriedEventArgs classes.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IdeaBlade.EntityModel.BaseEntityQueriedEventArgs`1.#ctor(IdeaBlade.EntityModel.IEntityQuery,System.Object)">
            <summary>
            
            </summary>
            <param name="query"></param>
            <param name="userState"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.BaseEntityQueriedEventArgs`1.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="userState"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.BaseEntityQueriedEventArgs`1.#ctor(IdeaBlade.EntityModel.AsyncEventArgs.AsyncWorkState,System.Object)">
            <summary>
            
            </summary>
            <param name="workState"></param>
            <param name="userState"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.BaseEntityQueriedEventArgs`1.ChangedEntities">
             <summary>
             The list of every entity that was either added or modified in the EntityManager's cache
             as a result of this query.
             </summary>
             <remarks>
             The <b>ChangedEntities</b> list may differ from the <see cref="P:IdeaBlade.EntityModel.EntityQueriedEventArgs.Results"/> 
             list since the <b>Entities</b> will include only those entities directly queried, and not entities
             fetched due to query inversion or use of an "Include".
             <para>
             Note an exception is returned when calling the getter if the asynchronous operation was cancelled or failed, since
             the result is undefined.
             </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.BaseEntityQueriedEventArgs`1.WasFetched">
            <summary>
            True if the data was fetched from the EntityServer.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.BaseEntityQueriedEventArgs`1.ResolvedFetchStrategy">
            <summary>
            The actual <see cref="T:IdeaBlade.EntityModel.FetchStrategy"/> used.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.BaseEntityQueriedEventArgs`1.UntypedQuery">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.BaseEntityQueriedEventArgs`1.IdeaBlade#EntityModel#IEntityQueriedEventArgs#UntypedEntityQuery">
            <summary>
            The query that caused the creation of these args.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQueriedEventArgs`1">
            <summary>
            Arguments to the completion handler specified for an <see cref="M:IdeaBlade.EntityModel.EntityManager.ExecuteQueryAsync``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.Action{IdeaBlade.EntityModel.EntityQueryOperation{``0}},System.Object)"/> call
            and to an <see cref="E:IdeaBlade.EntityModel.EntityManager.Queried"/> event handler.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <remarks>
            If you have subscribed to the <see cref="E:IdeaBlade.EntityModel.EntityManager.Queried"/> event, your handler will
            receive an instance of <b>EntityQueriedEventArgs</b> for both synchronous and asynchronous
            query operations.  
            <para>
            If you have called EntityManager.ExecuteQueryAsync, the <see cref="E:IdeaBlade.EntityModel.BaseOperation.Completed">Completed</see> event handler
            will be called with an instance of <b>EntityQueriedEventArgs</b> representing the results of the
            query operation.  
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueriedEventArgs`1.#ctor(IdeaBlade.EntityModel.IEntityQuery{`0},System.Object)">
            <summary>
             Internal use only.
             </summary>
             <param name="query"></param>
             <param name="userState"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueriedEventArgs`1.Query">
            <summary>
            The query executed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueriedEventArgs`1.Results">
            <summary>
            The results of this query. Not necessarily a list of entities because a query can return complex or anonymous shapes as well as 
            simple projections.
            </summary>
            <remarks>
            Note an exception is returned when calling the getter if the asynchronous operation was cancelled or failed, since
            the result is undefined.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQueriedEventArgs">
            <summary>
            Arguments to both the callback specified for an <see cref="M:IdeaBlade.EntityModel.EntityManager.ExecuteQueryAsync(IdeaBlade.EntityModel.IEntityQuery,System.Action{IdeaBlade.EntityModel.EntityQueryOperation},System.Object)"/> call
            and to an <see cref="E:IdeaBlade.EntityModel.EntityManager.Queried"/> event handler.
            </summary>
            <remarks>
            If you have subscribed to the <see cref="E:IdeaBlade.EntityModel.EntityManager.Queried"/> event, your handler will
            receive an instance of <b>EntityQueriedEventArgs</b> for both synchronous and asynchronous
            fetch operations.  The event is fired after the EntityManager has fetched data from an EntityServer.
            <para>
            If you have called <see cref="M:IdeaBlade.EntityModel.EntityManager.ExecuteQueryAsync(IdeaBlade.EntityModel.IEntityQuery,System.Action{IdeaBlade.EntityModel.EntityQueryOperation},System.Object)"/> with a callback specified, that callback
            will be called with an instance of <b>EntityQueriedEventArgs</b> representing the status of the
            fetch operation.  
            </para>
            <para>
            The <see cref="P:IdeaBlade.EntityModel.EntityQueriedEventArgs.Results">Result</see> contains an IEnumerable holding the data fetched.
            The list might be empty if the query was satisfied from cache only.
            If a span query was used, multiple entity types may be found in the list.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueriedEventArgs.#ctor(IdeaBlade.EntityModel.IEntityQuery,System.Object)">
            <summary>
             Internal use only. Only used for async Queries.
             </summary>
             <param name="query"></param>
             <param name="userState"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueriedEventArgs.ToSyncEventArgs(IdeaBlade.EntityModel.IEntityFinder)">
            <summary>
            Create args for Fetched event for a synchronous fetch. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueriedEventArgs.Query">
            <summary>
            The query executed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueriedEventArgs.Results">
            <summary>
            The list of entities fetched.
            </summary>
            <remarks>
            Note an exception is returned when calling the getter if the asynchronous operation was cancelled or failed, since
            the result is undefined.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityScalarQueriedEventArgs`1">
            <summary>
            Arguments to the completion handler specified for a scalar query executed asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            See <see cref="T:IdeaBlade.EntityModel.EntityScalarAsyncExtensions"/> for the scalar methods which may be executed asynchronously.
            The <see cref="E:IdeaBlade.EntityModel.BaseOperation.Completed">Completed</see> event handler on the <see cref="T:IdeaBlade.EntityModel.EntityScalarQueryOperation`1"/>
            returned from these methods will be called with an instance of <b>EntityScalarQueriedEventArgs</b> representing the results of the
            query operation.  
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarQueriedEventArgs`1.#ctor(IdeaBlade.EntityModel.IEntityScalarQuery{`0},System.Object)">
            <summary>
             Internal use only.
             </summary>
             <param name="query"></param>
             <param name="userState"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityScalarQueriedEventArgs`1.Query">
            <summary>
            The query executed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityScalarQueriedEventArgs`1.Result">
            <summary>
            The scalar result of this query.
            </summary>
            <remarks>
            Note an exception is returned when calling the getter if the asynchronous operation was cancelled or failed, since
            the result is undefined.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityScalarQueriedEventArgs">
            <summary>
            Arguments to the completion handler specified for a scalar query executed asynchronously.
            </summary>
            <remarks>
            See <see cref="T:IdeaBlade.EntityModel.EntityScalarAsyncExtensions"/> for the scalar methods which may be executed asynchronously.
            The <see cref="E:IdeaBlade.EntityModel.BaseOperation.Completed">Completed</see> event handler on the <see cref="T:IdeaBlade.EntityModel.EntityScalarQueryOperation`1"/>
            returned from these methods will be called with an instance of <b>EntityScalarQueriedEventArgs</b> representing the results of the
            query operation.  
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarQueriedEventArgs.#ctor(IdeaBlade.EntityModel.IEntityScalarQuery,System.Object)">
            <summary>
             Internal use only.
             </summary>
             <param name="query"></param>
             <param name="userState"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityScalarQueriedEventArgs.Query">
            <summary>
            The query executed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityScalarQueriedEventArgs.Result">
            <summary>
            The scalar result of this query.
            </summary>
            <remarks>
            Note an exception is returned when calling the getter if the asynchronous operation was cancelled or failed, since
            the result is undefined.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.QueryResultsList`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryResultsList`1.OnCollectionChanged">
            <summary>
            Raises the CollectionChanged event.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.QueryResultsList`1.CollectionChanged">
            <summary>
            Raised when the collection changes.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.QueryResultsList`1.IsPopulated">
            <summary>
            Whether the collection has been populated.
            </summary>
            <remarks>
            The collection is not populated until the query completes.  If the query returns no data,
            the IsPopulated flag will still return true.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQueryParameter">
            <summary>
               Represents a query parameter that is passed to an EntityQuery.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryParameter.#ctor(System.Object)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryParameter.#ctor(System.String,System.Object)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryParameter.#ctor(System.String,System.Type)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryParameter.Equals(System.Object)">
            <summary>
            Determines whether this instance and the specified object are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryParameter.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryParameter.Name">
            <summary>
            The parameter name.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryParameter.Type">
            <summary>
            The type of the parameter.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryParameter.TypeWrapper">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryParameter.Value">
            <summary>
            The value of the parameter.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.KnownTypeHelper">
            <summary>
            Internal use only.
            </summary>
            <remarks>
            Used to retrieve "known types" for data contract serialization.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.KnownTypeHelper.GetEntityAndComplexTypes">
            <summary>
            Probe for entity types in user assemblies.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.KnownTypeHelper.GetKnownEntityRelatedTypes">
            <summary>
            Returns types needed for known type support by the EntityServer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.KnownTypeHelper.GetKnownNonEntityUserDefinedTypes">
            <summary>
            Get all nonentity user types implementing the <see cref="T:IdeaBlade.EntityModel.IKnownType"/> interface or with a Discoverable knowntype attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.KnownTypeHelper.GetServiceKnownTypes(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Defined on service contract - called when service or proxy initialized.  Also called during cloning.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.ServerEntityQuery">
            <summary>
            An EntityQuery localized for use on the BOS.  Internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQuery">
            <summary>
            Abstract base class for the <see cref="T:IdeaBlade.EntityModel.EntityQuery`1"/> class.
            <seealso cref="T:IdeaBlade.EntityModel.EntityQueryExtensions"/>
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.ITypedEntityQuery">
            <summary>
            Marker interface implemented by any <see cref="T:IdeaBlade.EntityModel.IEntityQuery"/> that is generic and composable.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityQuery">
             <summary>
             Standard interface used to express all business object queries. Knowledge of this interface is only needed 
             if you are extending the existing query mechanisms.
             <seealso cref="T:IdeaBlade.EntityModel.EntityQuery`1"/>
             <seealso cref="T:IdeaBlade.EntityModel.StoredProcQuery"/>
             <seealso cref="T:IdeaBlade.EntityModel.PassthruEsqlQuery"/>
             <seealso cref="P:IdeaBlade.EntityModel.IEntityQuery.EntityManager"/>
             </summary>
             <remarks>
             Every query which can be executed by the <see cref="P:IdeaBlade.EntityModel.IEntityQuery.EntityManager"/> is a concrete implementation
             of the <b>IEntityQuery</b>.  See the overloaded <see cref="M:IdeaBlade.EntityModel.EntityManager.ExecuteQuery(IEntityQuery)"/>
             for more information.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityQuery.CreateFinder(IdeaBlade.EntityModel.EntityManager)">
            <summary>
            Internal use only.
            </summary>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityQuery.QueryableType">
            <summary>
            The type that was originally queried.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityQuery.ElementType">
            <summary>
             The type returned by the query.
            </summary>
            <remarks>
            Depending on the concrete implementation, this type may be an entity type, a primitive type,
            or an anonymous type.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityQuery.QueryStrategy">
            <summary>
            Determines whether this query will operate against the data source, the in-memory cache,
            or a combination of the two.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityQuery.EntityManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityQuery.CommandTimeout">
            <summary>
            Gets or sets the wait time in seconds before terminating the attempt to execute a command and generating an error.
            </summary>
            <remarks>
            A value of 0 indicates that the default timeout value for the data provider should be used - this is usually 30 seconds.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityQuery.Tag">
            <summary>
            Gets or sets user-defined information regarding this query.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.ISupportsQueryCache">
            <summary>
            To be implemented when an IEntityQuery can support use of the QueryCache.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.ISupportsQueryCache.InQueryCache(IdeaBlade.EntityModel.QueryCache)">
            <summary>
            Gets whether the query is in the <see cref="T:IdeaBlade.EntityModel.QueryCache"/>.
            </summary>
            <param name="queryCache"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.ISupportsQueryCache.AddToQueryCache(IdeaBlade.EntityModel.QueryCache)">
            <summary>
            Adds the query to the <see cref="T:IdeaBlade.EntityModel.QueryCache"/>.
            </summary>
            <param name="queryCache"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.Create(System.Type)">
            <summary>
            Creates a strongly typed Entity{T}.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.Create(System.Type,IdeaBlade.EntityModel.EntityManager)">
            <summary>
            Creates a strongly typed Entity{T}.
            </summary>
            <param name="entityType"></param>
            <param name="entityManager"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.Create(System.Type,System.String)">
            <summary>
            Creates a strongly typed Entity{T}. Used for NamedQueries.
            </summary>
            <param name="entityType"></param>
            <param name="entitySetName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.Create(System.Type,System.String,IdeaBlade.EntityModel.EntityManager)">
            <summary>
            Creates a strongly typed Entity{T}. Used for NamedQueries.
            </summary>
            <param name="entityType"></param>
            <param name="entitySetName"></param>
            <param name="entityManager"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.#ctor">
            <summary>
            Protected constructor.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.#ctor(IdeaBlade.EntityModel.EntityQuery)">
            <summary>
            Copy constructor.
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.AddParameter(IdeaBlade.EntityModel.EntityQueryParameter)">
            <summary>
            For use with Poco queries only.  Otherwise closure variables should be used instead.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.AddParameter(System.Object)">
            <summary>
            For use with Poco queries only.  Otherwise closure variables should be used instead.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.RemoveParameter(IdeaBlade.EntityModel.EntityQueryParameter)">
            <summary>
            For use with Poco queries only.  Otherwise closure variables should be used instead.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.GetExpressionWrapper">
            <summary>
            Gets the Expression to be stored in the QueryCache.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.AddIncludePaths(System.String[])">
            <summary>
            Create a new query with additional "Include" paths added.
            </summary>
            <param name="propertyPaths"></param>
            <returns></returns>
            <remarks>
            You will generally use the <see cref="M:IdeaBlade.EntityModel.EntityQueryExtensions.Include``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})"/>
            extension method to perform this action.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.RemoveIncludePaths(System.String[])">
            <summary>
            Returns a new query with the specified "Include" paths removed.
            </summary>
            <param name="propertyPaths"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.ToString">
            <summary>
            Returns a human readable representation of the current query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.CreateFinder(IdeaBlade.EntityModel.EntityManager)">
            <summary>
            Internal use only.
            </summary>
            <param name="entityManager"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.InQueryCache(IdeaBlade.EntityModel.QueryCache)">
            <summary>
            Gets whether this query is in the <see cref="T:IdeaBlade.EntityModel.QueryCache"/>.
            </summary>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.AddToQueryCache(IdeaBlade.EntityModel.QueryCache)">
            <summary>
            Add this query to the <see cref="T:IdeaBlade.EntityModel.QueryCache"/>.
            </summary>
            <param name="cache"></param>
            <remarks>
            DevForce will add a query to the <see cref="T:IdeaBlade.EntityModel.QueryCache"/>
            if the query meets certain criteria and has executed successfully;
            you don't need to directly call this method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.Clone">
            <summary>
            Create a deep copy of this query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.UpdateSettingsFrom(IdeaBlade.EntityModel.EntityQuery)">
            <summary>
            Internal use only.
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.ExecuteCacheQuery">
            <summary>
            Internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.GetServerQuery">
            <summary>
            Internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <remarks>QueryStrategy is not part of the comparison, but cacheQueryOptions are.</remarks>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery.Parameters">
            <summary>
            For use with Poco queries only.  Otherwise closure variables should be used instead.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery.Expression">
            <summary>
            See <see cref="T:System.Linq.IQueryable"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery.EntityManager">
            <summary>
            Gets or sets the EntityManager to use when the query is run.
            </summary>
            <remarks>When EntityManager is not set ( or set to null) the <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultManager"/>
            is used when the query is executed.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery.EntitySetName">
            <summary>
            Gets or sets the name of the Entity Data Model (EDM) entity set used by this query.
            </summary>
            <remarks>
            A valid entity set name is required by the Entity Framework when executing a query
            against the backend data source.  DevForce uses the entity set names defined
            in your conceptual model.  
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery.IsExecuteQuery">
            <summary>
            Gets whether the query can be executed immediately (e.g., the query ends with a call to First(), Single(), Last(), ElementAt() or performs an aggregation).
            Internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery.Tag">
            <summary>
            Gets or sets user-defined information regarding this query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery.IncludePaths">
            <summary>
            Gets a collection of path strings in "Include" statements added to this query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery.ElementType">
            <summary>
            The type of elements returned by the query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery.QueryableType">
            <summary>
            Gets the Entity type being queried.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery.IsNamedQuery">
            <summary>
            Returns true if the query is a named query having a server query method.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery.OriginalClientQuery">
            <summary>
            The original query before being merged with any named query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery.NamedQuery">
            <summary>
            The named query, if any, that this query is based upon.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery.NamedQueryMethod">
            <summary>
            The named method, if any, that this query was based on.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery.NamedQueryResultIsEnumerable">
            <summary>
            Returns true if the query is an IQueryable.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery.QueryStrategy">
            <summary>
            Gets or sets the <see cref="T:IdeaBlade.EntityModel.QueryStrategy"/> to use when executing this query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery.IsDefaultEntitySet">
            <summary>
            Returns whether the query is using the "default" entity set.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery.InternalQueryStrategy">
            <summary>
            Returns the internal query strategy for this query. May be different from the QueryStrategy during the execution of 
            a cache query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery.CommandTimeout">
            <summary>
            Gets or sets the wait time in seconds before terminating the attempt to execute a command and generating an error.
            </summary>
            <remarks>
            A value of 0 indicates that the default timeout value for the data provider should be used - this is usually 30 seconds.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery.EntityGroup">
            <summary>
            Gets the <see cref="T:IdeaBlade.EntityModel.EntityGroup"/> for this query's type.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.ServerEntityQuery.#ctor(IdeaBlade.EntityModel.EntityQuery)">
            <summary>
            Copy constructor.
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ServerEntityQuery.ExecuteCacheQuery">
            <summary>
            Not supported.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.ServerEntityQuery.GetServerQuery">
            <summary>
            Not supported.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.ServerEntityQuery.Clone">
            <summary>
            Not supported.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.PocoEntityAspect">
            <summary>
            Used internally by the framework with POCO entities.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.PocoEntityAspect.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.PocoEntityAspect.AreEqual(IdeaBlade.EntityModel.EntityAspect,System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.DataEntityProperty})">
            <summary>
            
            </summary>
            <param name="sourceAspect"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.PocoEntityAspect.ReplaceAllCore(IdeaBlade.EntityModel.EntityAspect,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sourceAspect"></param>
            <param name="copy"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.PocoEntityAspect.ReplaceOriginalCore(IdeaBlade.EntityModel.EntityAspect,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sourceAspect"></param>
            <param name="copy"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.PocoEntityAspect.ReplaceCurrentOnLoadCore(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            
            </summary>
            <param name="sourceAspect"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.PocoEntityAspect.CreateBackupVersionIfNecessary">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.PocoEntityAspect.ClearBackupVersion(IdeaBlade.EntityModel.EntityVersion)">
            <summary>
            
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.PocoEntityAspect.RestoreBackupVersion(IdeaBlade.EntityModel.EntityVersion)">
            <summary>
            
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.PocoEntityAspect.CloneCore">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.PocoEntityAspect.SetValueWithChangeTracking(IdeaBlade.EntityModel.DataEntityProperty,System.Object)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.PocoEntityAspect.SetValueRaw(IdeaBlade.EntityModel.DataEntityProperty,System.Object)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.PocoEntityAspect.GetValueRaw(IdeaBlade.EntityModel.DataEntityProperty,IdeaBlade.EntityModel.EntityVersion)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.PocoEntityAspect.GetValue(IdeaBlade.EntityModel.EntityProperty)">
            <summary>
            Retrieves the value of the specified property.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.PocoEntityAspect.GetValue(IdeaBlade.EntityModel.DataEntityProperty,IdeaBlade.EntityModel.EntityVersion)">
            <summary>
            Retrieves the value of the specified property and version on this object.
            </summary>
            <param name="property"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.PocoEntityAspect.SetValue(IdeaBlade.EntityModel.EntityProperty,System.Object)">
            <summary>
            Sets the value of the specified property.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQueryFilterCollection">
            <summary>
            An independent collection of query filters.
            </summary>
            <remarks>
            Use the <b>EntityQueryFilterCollection</b> to create a collection of filters for different
            entity types.  You can create the collection independent of your queries and apply the filters
            when needed, for example in a server-side <b>EntityServerQueryInterceptor</b> implementation
            using the <see cref="M:IdeaBlade.EntityModel.EntityQueryExtensions.Filter``1(``0,IdeaBlade.EntityModel.EntityQueryFilterCollection)">Filter</see>
            extension method.
            <para>
            The collection may contain only one query filter per entity type, but may contain any number of filters.
            When applied to an <see cref="T:IdeaBlade.EntityModel.EntityQuery"/>, only the applicable filters will be used.  For example,
            if you'ved added filters for both the Customer and Employee entity types to a collection and apply this
            to a query of Customers, only the pertinent filter will be applied.
            </para>
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
public void FilteringSample() {
  // Query for all customers.  A filter will be applied prior to execution.
  var mgr = new DomainModelEntityManager();
  var list = mgr.Customers.ToList();
}

// Server-side implementation of EntityServerQueryInterceptor
public class EntityServerQueryManager : EntityServerQueryInterceptor {

  protected override bool FilterQuery()
    // Add filters
    QueryFilters.AddFilter<Customer>(q => q.Where(c => c.Country == "USA"));
    QueryFilters.AddFilter<Employee>(q => q.Where(e => e.Country == "USA"));
    return true;
	}
}
       ]]>
</code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryFilterCollection.#ctor">
            <summary>
            Create a new EntityQueryFilterCollection.
            </summary>
            <remarks>
            See <see cref="M:IdeaBlade.EntityModel.EntityQueryFilterCollection.AddFilter(System.Type,System.Func{System.Linq.IQueryable,System.Linq.IQueryable},System.Boolean)"/> for information on adding filters to the collection.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryFilterCollection.AddFilter``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}},System.Boolean)">
            <summary>
            Add a filter for an entity type to the collection.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="transformFunc">A Func that takes and returns an IQueryable{T}</param>
            <param name="canReplaceIfAlreadyExists"></param>
            <remarks>
            The <paramref name="transformFunc"/>, although it looks intimidating, is really a simple
            <b>Where</b> predicate which you're already familiar with when using query expression syntax.
            See the example for more information.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if a filter for the entity type is already in the collection and the canReplaceIfAlreadyExists paremter is set to false</exception>
            <example>
        <code lang="C#">
          <![CDATA[
public void FilteringSample() {
  // Query for all customers.  A filter will be applied prior to execution.
  var mgr = new DomainModelEntityManager();
  var list = mgr.Customers.ToList();
}

// Server-side implementation of EntityServerQueryInterceptor
public class EntityServerQueryManager : EntityServerQueryInterceptor {

  protected override bool FilterQuery()
    // Add filters
    QueryFilters.AddFilter<Customer>(q => q.Where(c => c.Country == "USA"));
    QueryFilters.AddFilter<Employee>(q => q.Where(e => e.Country == "USA"));
    return true;
	}
}
       ]]>
</code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryFilterCollection.AddFilter(System.Type,System.Func{System.Linq.IQueryable,System.Linq.IQueryable},System.Boolean)">
            <summary>
            Add a filter for an entity type to the collection.
            </summary>
            <param name="type">Entity type</param>
            <param name="transformFunc">A Func that takes and returns an IQueryable{T}</param>
            <param name="canReplaceIfAlreadyExists"></param>
            <remarks>
            The <paramref name="transformFunc"/>, although it looks intimidating, is really a simple
            <b>Where</b> predicate which you're already familiar with when using query expression syntax.
            See the example for more information.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if a filter for the entity type is already in the collection and the canReplaceIfAlreadyExists paremter is set to false</exception>
            <example>
        <code lang="C#">
          <![CDATA[
public void FilteringSample() {
  // Query for all customers.  A filter will be applied prior to execution.
  var mgr = new DomainModelEntityManager();
  var list = mgr.Customers.ToList();
}

// Server-side implementation of EntityServerQueryInterceptor
public class EntityServerQueryManager : EntityServerQueryInterceptor {

  protected override bool FilterQuery()
    // Add filters
    QueryFilters.AddFilter<Customer>(q => q.Where(c => c.Country == "USA"));
    QueryFilters.AddFilter<Employee>(q => q.Where(e => e.Country == "USA"));
    return true;
	}
}
       ]]>
</code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryFilterCollection.AddFilter(IdeaBlade.Core.IPredicateDescription,System.Boolean)">
            <summary>
            Add a filter to the collection.
            </summary>
            <param name="pd"></param>
            <param name="canReplaceIfAlreadyExists"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryFilterCollection.GetFilterQueryForType(System.Type)">
            <summary>
            Retrieve the filter query for the specified entity type.
            </summary>
            <param name="t">Entity type</param>
            <returns>The filter, or null if not found</returns>
            <remarks>
            The <b>EntityQueryFilterCollection</b> can contain only one filter per entity type, but may
            contain many filters for different types.  Use this method to retrieve a single filter.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityPropertyInterceptorArgs">
            <summary>
            Base interface for arguments to a <see cref="T:IdeaBlade.Core.PropertyInterceptorAction">PropertyInterceptorAction</see>
            on an <see cref="T:IdeaBlade.EntityModel.EntityProperty">EntityProperty</see>.
            <seealso cref="T:IdeaBlade.Core.PropertyInterceptorArgs"/>
            <seealso cref="T:IdeaBlade.Core.PropertyInterceptorAction"/>
            <seealso cref="T:IdeaBlade.Core.PropertyInterceptor"/>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityPropertyInterceptorArgs.EntityProperty">
            <summary>
            The <see cref="P:IdeaBlade.EntityModel.IEntityPropertyInterceptorArgs.EntityProperty"/> being retrieved or set.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityPropertySetInterceptorArgs">
            <summary>
            Interface for arguments to a BeforeSet or AfterSet action on an <see cref="T:IdeaBlade.EntityModel.EntityProperty"/>.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityPropertyGetInterceptorArgs">
            <summary>
            Interface for arguments to a BeforeGet or AfterGet action on an <see cref="T:IdeaBlade.EntityModel.EntityProperty"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityPropertyGetInterceptorArgs.EntityVersion">
            <summary>
            Version of the Entity.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.INavigationEntityPropertyInterceptorArgs">
            <summary>
            Interface for arguments to a <see cref="T:IdeaBlade.Core.PropertyInterceptorAction">PropertyInterceptorAction</see>
            on a <see cref="T:IdeaBlade.EntityModel.NavigationEntityProperty">NavigationEntityProperty</see>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.INavigationEntityPropertyInterceptorArgs.NavigationEntityProperty">
            <summary>
            The <see cref="P:IdeaBlade.EntityModel.INavigationEntityPropertyInterceptorArgs.NavigationEntityProperty"/> being retrieved or set.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.NavigationEntityPropertyInterceptorArgs`2">
            <summary>
            Strongly-typed arguments to a <see cref="T:IdeaBlade.Core.PropertyInterceptorAction">PropertyInterceptorAction</see> 
            on a <see cref="T:IdeaBlade.EntityModel.NavigationEntityProperty">NavigationEntityProperty</see>.
            </summary>
            <typeparam name="TInstance">Type of declaring object</typeparam>
            <typeparam name="TValue">Type of property value</typeparam>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationEntityPropertyInterceptorArgs`2.#ctor(IdeaBlade.EntityModel.NavigationEntityProperty,`0,System.Object)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="entityProperty"></param>
            <param name="instance"></param>
            <param name="context"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationEntityPropertyInterceptorArgs`2.#ctor(IdeaBlade.Core.PropertyInterceptorArgs)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationEntityPropertyInterceptorArgs`2.NavigationEntityProperty">
            <summary>
            The <see cref="P:IdeaBlade.EntityModel.NavigationEntityPropertyInterceptorArgs`2.NavigationEntityProperty"/> being retrieved or set.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationEntityPropertyInterceptorArgs`2.IdeaBlade#EntityModel#IEntityPropertyInterceptorArgs#EntityProperty">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityProperty"/> being retrieved or set.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.NavigationEntityPropertyGetInterceptorArgs`2">
            <summary>
            Strongly-typed arguments to a BeforeGet or AfterGet action on a <see cref="T:IdeaBlade.EntityModel.NavigationEntityProperty"/>.
            </summary>
            <typeparam name="TInstance">Type of declaring object</typeparam>
            <typeparam name="TResult">Type of property value</typeparam>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationEntityPropertyGetInterceptorArgs`2.#ctor(IdeaBlade.EntityModel.NavigationEntityProperty,`0,System.Object)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="entityProperty"></param>
            <param name="instance"></param>
            <param name="context"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationEntityPropertyGetInterceptorArgs`2.#ctor(IdeaBlade.Core.PropertyInterceptorArgs)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationEntityPropertyGetInterceptorArgs`2.EntityVersion">
            <summary>
            Version of the Entity.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.NavigationEntityPropertySetInterceptorArgs`2">
            <summary>
            Strongly-typed arguments to a BeforeSet or AfterSet action on a <see cref="T:IdeaBlade.EntityModel.NavigationEntityProperty"/>.
            </summary>
            <typeparam name="TInstance">Type of declaring object</typeparam>
            <typeparam name="TResult">Type of property value</typeparam>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationEntityPropertySetInterceptorArgs`2.#ctor(IdeaBlade.EntityModel.NavigationEntityProperty,`0,System.Object)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="entityProperty"></param>
            <param name="instance"></param>
            <param name="context"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationEntityPropertySetInterceptorArgs`2.#ctor(IdeaBlade.Core.PropertyInterceptorArgs)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.NavigationEntityProperty">
            <summary>
            Representation of a relational property within an <see cref="T:IdeaBlade.EntityModel.IEntity"/>.  
            <seealso cref="T:IdeaBlade.EntityModel.EntityProperty"/>
            <seealso cref="T:IdeaBlade.EntityModel.DataEntityProperty"/>
            <seealso cref="T:IdeaBlade.EntityModel.NavigationScalarEntityProperty`2"/>
            <seealso cref="T:IdeaBlade.EntityModel.NavigationListEntityProperty`2"/>
            </summary>
            <remarks>
            The <b>IdeaBlade DevForce Object Mapping Tool</b> automatically generates
            <b>EntityProperties</b> for your business objects:  a <b>DataEntityProperty</b>
            is generated for all simple properties, and a <see cref="T:IdeaBlade.EntityModel.NavigationEntityProperty"/>
            is generated for all relational properties.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityProperty">
            <summary>
            Representation of a single property within an <see cref="T:IdeaBlade.EntityModel.IEntity"/>.  
            </summary>
            <remarks>
            The <b>IdeaBlade DevForce Object Mapping Tool</b> automatically generates
            <b>EntityProperties</b> for your business objects:  a <see cref="T:IdeaBlade.EntityModel.DataEntityProperty"/>
            is generated for all simple properties, and a <see cref="T:IdeaBlade.EntityModel.NavigationEntityProperty"/>
            is generated for all relational properties.
            <para>
            The auto-generated <b>EntityProperties</b> are statically defined within each Entity
            class and are constructed when the Entity types are loaded, which usually occurs
            when the assembly is loaded and the <b>EntityRelations.Initialize</b> method is called
            by DevForce.  
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityProperty.#ctor(System.Type,System.String,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the EntityProperty class.
            </summary>
            <param name="entityType">The entity type that this property belongs to</param>
            <param name="propertyName">The entity property name</param>
            <param name="dataType">The data type of this property</param>
            <param name="isNullable">Whether this property can accept null values</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityProperty.GetValueRaw(IdeaBlade.EntityModel.IStructuralObject)">
            <summary>
            Returns the value of the underlying property with no property interception.
            </summary>
            <param name="so"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityProperty.SetValueRaw(IdeaBlade.EntityModel.IStructuralObject,System.Object)">
            <summary>
            Sets the value of the underlying property with no property interception, validation or change tracking.
            </summary>
            <param name="so"></param>
            <param name="value"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityProperty.GetValue(System.Object)">
            <summary>
            Gets the value for this property on the selected instance.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityProperty.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value for this property on the selected instance.
            </summary>
            <param name="instance"></param>
            <param name="value"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityProperty.ToString">
            <summary>
            A string representation of this property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityProperty.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)">Object.Equals</see>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityProperty.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityProperty.GetEntityProperty(System.Type,System.String,System.Boolean)">
            <summary>
            Gets the entity property for a specified entity type and property name.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityProperty.GetEntityProperties(System.Type)">
            <summary>
            Return a list of all of the EntityProperties associated with a specified entity type.
            </summary>
            <param name="entityType">A Type of <see cref="P:IdeaBlade.EntityModel.EntityProperty.EntityKind"/></param>
            <returns>List of <see cref="T:IdeaBlade.EntityModel.EntityProperty"/> objects</returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityProperty.MemberMetadata">
            <summary>
            Metadata for the property.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityProperty.EntityType">
            <summary>
            The type of <see cref="T:IdeaBlade.EntityModel.IEntity"/> to which this property belongs.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityProperty.Name">
            <summary>
            The name of this property in the Entity; this is not necessarily the data source name.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityProperty.DataType">
            <summary>
            The datatype of this property.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityProperty.IsNullable">
            <summary>
            Whether this property can accept a null value.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityProperty.IsReadOnly">
            <summary>
            Is this property readonly? 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityProperty.PropertyInfo">
            <summary>
            The actual property that this EntityProperty describes.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityProperty.EntityKind">
            <summary>
            The type of object on which the property is defined.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationEntityProperty.#ctor(System.Type,System.String,System.Type,System.Boolean,System.String,IdeaBlade.EntityModel.QueryDirection,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the NavigationEntityProperty class.
            </summary>
            <param name="entityType">The entity type that this property belongs to</param>
            <param name="propertyName">The entity property name</param>
            <param name="dataType">The data type of this property</param>
            <param name="isNullable"></param>
            <param name="relationName"></param>
            <param name="queryDirection"></param>
            <param name="isCollectionReadOnly"></param>
            <param name="shouldUpdateMetadataStore"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationEntityProperty.GetEntityReference(System.Object)">
            <summary>
            Returns the <see cref="T:IdeaBlade.EntityModel.EntityReferenceBase"/> for this navigation property.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationEntityProperty.Equals(System.Object)">
            <summary>
            Provides value equality.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationEntityProperty.GetHashCode">
            <summary>
            Returns the hash of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationEntityProperty.IsCollectionReadOnly">
            <summary>
            Returns whether the list is read only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationEntityProperty.ReferenceStrategy">
            <summary>
            Gets or sets the <see cref="T:IdeaBlade.EntityModel.EntityReferenceStrategy"/> that determines how references using this role are resolved.
            </summary>
            <remarks>
            You can set this value to override the <see cref="F:IdeaBlade.EntityModel.EntityReferenceStrategy.Default"/> 
            strategy set when the <see cref="T:IdeaBlade.EntityModel.EntityRelation"/> was constructed.  Changing the strategy
            affects only the EntityReference for this specific end of the <see cref="T:IdeaBlade.EntityModel.EntityRelation"/>.
            <example><code lang="C#">
              // Globally change the strategy for the Customer.OrderSummaries relation:
              var ers = new EntityReferenceStrategy(EntityReferenceLoadStrategy.Load, MergeStrategy.PreserveChanges);
              Customer.OrderSummariesEntityProperty.ReferenceStrategy = ers;
            </code></example>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationEntityProperty.RelationName">
            <summary>
            The namespace-qualified name of the relation involved in this navigation.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationEntityProperty.UnqualifiedRelationName">
            <summary>
            The unqualified name of the relation involved in this navigation.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationEntityProperty.QueryDirection">
            <summary>
            The <see cref="F:QueryDirection"/> of this navigation.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationEntityProperty.RelationLink">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityRelation"/> and direction of this navigation.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationEntityProperty.IsScalar">
            <summary>
            Returns whether this is a scalar navigation property.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationEntityProperty.IsManyToMany">
            <summary>
            Returns whether this is one side of a many to many navigation.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.NavigationScalarEntityProperty`2">
            <summary>
            A relational entity property for a scalar data type.
            </summary>
            <typeparam name="TInstance">Type of entity</typeparam>
            <typeparam name="TValue">Type of property</typeparam>
            <remarks>
            The <b>EntityProperties</b> auto-generated by the Object Mapper
            use this strongly-typed declaration for all relational properties having a scalar data type.
            <para>
            Every <b>NavigationScalarEntityProperty</b> has both a <see cref="P:IdeaBlade.EntityModel.NavigationScalarEntityProperty`2.GetterInterceptor"/> and <see cref="P:IdeaBlade.EntityModel.NavigationScalarEntityProperty`2.SetterInterceptor"/>
            to which you can inject custom actions.  You add these actions using <see cref="T:IdeaBlade.Core.PropertyInterceptorAttribute">attributes</see>
            and the <see cref="M:IdeaBlade.Core.PropertyInterceptor`3.AddAction(IdeaBlade.Core.PropertyInterceptorAction{`2})">AddAction</see> method.
            </para>
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.IHasPropertyInterceptors">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IHasPropertyInterceptors.GetterInterceptor">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IHasPropertyInterceptors.SetterInterceptor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationScalarEntityProperty`2.#ctor(System.String,System.Boolean,System.String,IdeaBlade.EntityModel.QueryDirection,System.Boolean)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="propertyName"></param>
            <param name="isNullable"></param>
            <param name="relationName"></param>
            <param name="queryDirection"></param>
            <param name="shouldUpdateMetadataStore"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationScalarEntityProperty`2.GetEntityReference(`0)">
            <summary>
            Returns the <see cref="T:IdeaBlade.EntityModel.ScalarEntityReference`1"/> for this navigation property.
            </summary>
            <param name="instance">Entity instance</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationScalarEntityProperty`2.GetValue(System.Object)">
            <summary>
            Retrieves the value of this property in the specified object.
            </summary>
            <param name="instance"></param>
            <returns></returns>
            <remarks>
            All getter interceptor actions are called when using this method.
            This method is called from auto-generated properties in the domain model.
            </remarks>
            <example><code lang="C#">

    // Sample auto-generated property

    #region Manager property

    /// <summary>Gets or sets the Manager. </summary>
    [Bindable(false)]
    [Display(AutoGenerateField=false)]
    [DataMember]
    [IbEm.RelationProperty("FK_Employees_Employees", IbEm.QueryDirection.ToRole2)]
    public Employee Manager {
      get { return PropertyMetadata.Manager.GetValue(this); }
      set { PropertyMetadata.Manager.SetValue(this, value); }
    }
    #endregion Manager property
  </code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationScalarEntityProperty`2.GetValue(`0)">
            <summary>
            Retrieves the value of this property in the specified object.
            </summary>
            <param name="instance"></param>
            <returns></returns>
            <remarks>
            All getter interceptor actions are called when using this method.
            This method is called from auto-generated properties in the domain model.
            </remarks>
            <example><code lang="C#">

    // Sample auto-generated property

    #region Manager property

    /// <summary>Gets or sets the Manager. </summary>
    [Bindable(false)]
    [Display(AutoGenerateField=false)]
    [DataMember]
    [IbEm.RelationProperty("FK_Employees_Employees", IbEm.QueryDirection.ToRole2)]
    public Employee Manager {
      get { return PropertyMetadata.Manager.GetValue(this); }
      set { PropertyMetadata.Manager.SetValue(this, value); }
    }
    #endregion Manager property
  </code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationScalarEntityProperty`2.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of this property in the specified object.
            </summary>
            <param name="instance"></param>
            <param name="value"></param>
            <remarks>
            Any registered <see cref="F:IdeaBlade.Validation.VerifierExecutionModes.OnBeforeSetTriggers"/>
            and <see cref="F:IdeaBlade.Validation.VerifierExecutionModes.OnAfterSetTriggers"/> verifiers will be executed.
            <para>
            All setter interceptor actions are called when using this method.
            This method is called from auto-generated properties in the domain model.
            </para>
            </remarks>
            <example><code lang="C#">

    // Sample auto-generated property

    #region Manager property

    /// <summary>Gets or sets the Manager. </summary>
    [Bindable(false)]
    [Display(AutoGenerateField=false)]
    [DataMember]
    [IbEm.RelationProperty("FK_Employees_Employees", IbEm.QueryDirection.ToRole2)]
    public Employee Manager {
      get { return PropertyMetadata.Manager.GetValue(this); }
      set { PropertyMetadata.Manager.SetValue(this, value); }
    }
    #endregion Manager property
  </code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationScalarEntityProperty`2.SetValue(`0,`1)">
            <summary>
            Sets the value of this property in the specified object.
            </summary>
            <param name="instance"></param>
            <param name="value"></param>
            <remarks>
            Any registered <see cref="F:IdeaBlade.Validation.VerifierExecutionModes.OnBeforeSetTriggers"/>
            and <see cref="F:IdeaBlade.Validation.VerifierExecutionModes.OnAfterSetTriggers"/> verifiers will be executed.
            <para>
            All setter interceptor actions are called when using this method.
            This method is called from auto-generated properties in the domain model.
            </para>
            </remarks>
            <example><code lang="C#">

    // Sample auto-generated property

    #region Manager property

    /// <summary>Gets or sets the Manager. </summary>
    [Bindable(false)]
    [Display(AutoGenerateField=false)]
    [DataMember]
    [IbEm.RelationProperty("FK_Employees_Employees", IbEm.QueryDirection.ToRole2)]
    public Employee Manager {
      get { return PropertyMetadata.Manager.GetValue(this); }
      set { PropertyMetadata.Manager.SetValue(this, value); }
    }
    #endregion Manager property
  </code></example>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationScalarEntityProperty`2.IsScalar">
            <summary>
            Returns whether this is a scalar navigation property.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationScalarEntityProperty`2.GetterInterceptor">
            <summary>
            The getter <see cref="T:IdeaBlade.Core.PropertyInterceptor">PropertyInterceptor</see>.
            </summary>
            <remarks>
            Use the <b>GetterInterceptor</b> to add custom <b>BeforeGet</b> and <b>AfterGet</b>
            interception actions to a property getter.
            </remarks>
            <example>
        <code lang="C#">
    public void Sample() {

      // Add a BeforeGet action to a GetterInterceptor:
      Employee.PropertyMetadata.DirectReports.GetterInterceptor.AddAction(
        PropertyInterceptorTiming.Before,
        TraceGetter);

      // Add a BeforeSet action to a SetterInterceptor (a SetterInterceptor is available
      // only for scalar and non-readonly navigation properties).
      Employee.PropertyMetadata..Manager.SetterInterceptor.AddAction(
        PropertyInterceptorTiming.Before,
        TraceSetter);

      // Get/set a few properties
      DomainModelEntityManager mgr = new DomainModelEntityManager();
      Employee e = mgr.Employees.First();
      e.Manager = null;         
      var list = e.DirectReports;
    }

    public static void TraceGetter(IEntityPropertyGetInterceptorArgs args) {
      Console.WriteLine("getter called for " + args.EntityProperty.Name);
    }

    public static void TraceSetter(IEntityPropertySetInterceptorArgs args) {
      Console.WriteLine("setter called for " + args.EntityProperty.Name);
    }
        </code>
      </example>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationScalarEntityProperty`2.SetterInterceptor">
            <summary>
            The setter <see cref="T:IdeaBlade.Core.PropertyInterceptor">PropertyInterceptor</see>.
            </summary>
            <remarks>
            Use the <b>SetterInterceptor</b> to add custom <b>BeforeSet</b> and <b>AfterSet</b>
            interception actions to a property setter.
            <para>
            Any registered <see cref="F:IdeaBlade.Validation.VerifierExecutionModes.OnBeforeSetTriggers"/>
            and <see cref="F:IdeaBlade.Validation.VerifierExecutionModes.OnAfterSetTriggers"/> verifiers will be executed 
            This verification is done immediately before and after the value is stored in the backing field.
            BeforeSet actions will occur before OnBeforeSet verification and AfterSet actions will occur
            after OnAfterSet verification.
            </para>
            <para>
            Will be null for a read only property.
            </para>
            </remarks>
            <example>
        <code lang="C#">
    public void Sample() {

      // Add a BeforeGet action to a GetterInterceptor:
      Employee.PropertyMetadata.DirectReports.GetterInterceptor.AddAction(
        PropertyInterceptorTiming.Before,
        TraceGetter);

      // Add a BeforeSet action to a SetterInterceptor (a SetterInterceptor is available
      // only for scalar and non-readonly navigation properties).
      Employee.PropertyMetadata..Manager.SetterInterceptor.AddAction(
        PropertyInterceptorTiming.Before,
        TraceSetter);

      // Get/set a few properties
      DomainModelEntityManager mgr = new DomainModelEntityManager();
      Employee e = mgr.Employees.First();
      e.Manager = null;         
      var list = e.DirectReports;
    }

    public static void TraceGetter(IEntityPropertyGetInterceptorArgs args) {
      Console.WriteLine("getter called for " + args.EntityProperty.Name);
    }

    public static void TraceSetter(IEntityPropertySetInterceptorArgs args) {
      Console.WriteLine("setter called for " + args.EntityProperty.Name);
    }
        </code>
      </example>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationScalarEntityProperty`2.IdeaBlade#EntityModel#IHasPropertyInterceptors#GetterInterceptor">
            <summary>
            The getter <see cref="T:IdeaBlade.Core.PropertyInterceptor"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationScalarEntityProperty`2.IdeaBlade#EntityModel#IHasPropertyInterceptors#SetterInterceptor">
            <summary>
            The setter <see cref="T:IdeaBlade.Core.PropertyInterceptor"/>.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.NavigationListEntityProperty`2">
            <summary>
            A relational entity property for a list data type.
            </summary>
            <typeparam name="TInstance">Type of entity</typeparam>
            <typeparam name="TValue">Type of property</typeparam>
            <remarks>
            The <b>EntityProperties</b> auto-generated by the Object Mapper
            use this strongly-typed declaration for all relational properties having a list data type.
            <para>
            Every <b>NavigationListEntityProperty</b> has a <see cref="P:IdeaBlade.EntityModel.NavigationListEntityProperty`2.GetterInterceptor"/> 
            to which you can inject custom actions.  You add these actions using <see cref="T:IdeaBlade.Core.PropertyInterceptorAttribute">attributes</see>
            and the <see cref="M:IdeaBlade.Core.PropertyInterceptor`3.AddAction(IdeaBlade.Core.PropertyInterceptorAction{`2})">AddAction</see> method.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationListEntityProperty`2.#ctor(System.String,System.Boolean,System.String,IdeaBlade.EntityModel.QueryDirection,System.Boolean,System.Boolean)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="propertyName"></param>
            <param name="isNullable"></param>
            <param name="relationName"></param>
            <param name="queryDirection"></param>
            <param name="isCollectionReadOnly"></param>
            <param name="shouldUpdateMetadataStore"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationListEntityProperty`2.GetValue(System.Object)">
            <summary>
            Retrieves the value of this property in the specified object.
            </summary>
            <param name="instance"></param>
            <returns></returns>
            <remarks>
            All getter interceptor actions are called when using this method.
            This method is called from auto-generated properties in the domain model.
            </remarks>
            <example><code lang="C#">

    // Sample auto-generated property

    #region Manager property

    /// <summary>Gets or sets the Manager. </summary>
    [Bindable(false)]
    [Display(AutoGenerateField=false)]
    [DataMember]
    [IbEm.RelationProperty("FK_Employees_Employees", IbEm.QueryDirection.ToRole2)]
    public Employee Manager {
      get { return PropertyMetadata.Manager.GetValue(this); }
      set { PropertyMetadata.Manager.SetValue(this, value); }
    }
    #endregion Manager property
  </code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationListEntityProperty`2.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of this property on the specified object. NOT SUPPORTED for List Navigation properites.
            </summary>
            <param name="instance"></param>
            <param name="value"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationListEntityProperty`2.GetValue(`0)">
            <summary>
            Retrieves the value of this property in the specified object.
            </summary>
            <param name="instance"></param>
            <returns></returns>
            <remarks>
            All getter interceptor actions are called when using this method.
            This method is called from auto-generated properties in the domain model.
            </remarks>
            <example>
       <code lang="C#">

         // Sample auto-generated property

    #region Employees property

    /// <summary>Gets the Employees. </summary>
    [Bindable(false)]
    [Display(AutoGenerateField=false)]
    [DataMember]
    [IbEm.RelationProperty("FK_Employees_Employees", IbEm.QueryDirection.ToRole1)]
    public IbEm.RelatedEntityList&lt;Employee&gt; Employees {
      get { return PropertyMetadata.Employees.GetValue(this); }
    }
    #endregion Employees property
       </code>
     </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.NavigationListEntityProperty`2.GetEntityReference(`0)">
            <summary>
            Returns the <see cref="T:IdeaBlade.EntityModel.ListEntityReference`1"/> for this navigation property.
            </summary>
            <param name="instance">Entity instance</param>
            <returns></returns>
            <remarks>
            
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationListEntityProperty`2.IsScalar">
            <summary>
            Returns whether this is a scalar navigation property.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationListEntityProperty`2.GetterInterceptor">
            <summary>
            The getter <see cref="T:IdeaBlade.Core.PropertyInterceptor">PropertyInterceptor</see>.
            </summary>
            <remarks>
            Use the <b>GetterInterceptor</b> to add custom <b>BeforeGet</b> and <b>AfterGet</b>
            interception actions to a property getter.
            </remarks>
            <example>
        <code lang="C#">
    public void Sample() {

      // Add a BeforeGet action to a GetterInterceptor:
      Employee.PropertyMetadata.DirectReports.GetterInterceptor.AddAction(
        PropertyInterceptorTiming.Before,
        TraceGetter);

      // Add a BeforeSet action to a SetterInterceptor (a SetterInterceptor is available
      // only for scalar and non-readonly navigation properties).
      Employee.PropertyMetadata..Manager.SetterInterceptor.AddAction(
        PropertyInterceptorTiming.Before,
        TraceSetter);

      // Get/set a few properties
      DomainModelEntityManager mgr = new DomainModelEntityManager();
      Employee e = mgr.Employees.First();
      e.Manager = null;         
      var list = e.DirectReports;
    }

    public static void TraceGetter(IEntityPropertyGetInterceptorArgs args) {
      Console.WriteLine("getter called for " + args.EntityProperty.Name);
    }

    public static void TraceSetter(IEntityPropertySetInterceptorArgs args) {
      Console.WriteLine("setter called for " + args.EntityProperty.Name);
    }
        </code>
      </example>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationListEntityProperty`2.IdeaBlade#EntityModel#IHasPropertyInterceptors#GetterInterceptor">
            <summary>
            The getter <see cref="T:IdeaBlade.Core.PropertyInterceptor"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationListEntityProperty`2.IdeaBlade#EntityModel#IHasPropertyInterceptors#SetterInterceptor">
            <summary>
            Not applicable.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.NavigationEntityPropertySurrogate">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationEntityPropertySurrogate.IsScalar">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationEntityPropertySurrogate.EntityTypeWrapper">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationEntityPropertySurrogate.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationEntityPropertySurrogate.DataTypeWrapper">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationEntityPropertySurrogate.IsNullable">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationEntityPropertySurrogate.UnqualifiedRelationName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationEntityPropertySurrogate.QueryDirection">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NavigationEntityPropertySurrogate.IsCollectionReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IDataEntityPropertyInterceptorArgs">
            <summary>
            Interface for arguments to a <see cref="T:IdeaBlade.Core.PropertyInterceptorAction"/>
            on a <see cref="P:IdeaBlade.EntityModel.IDataEntityPropertyInterceptorArgs.DataEntityProperty"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IDataEntityPropertyInterceptorArgs.DataEntityProperty">
            <summary>
            The <see cref="P:IdeaBlade.EntityModel.IDataEntityPropertyInterceptorArgs.DataEntityProperty"/> being retrieved or set.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.DataEntityPropertyInterceptorArgs`2">
            <summary>
            Strongly-typed arguments to a <see cref="T:IdeaBlade.Core.PropertyInterceptorAction">PropertyInterceptorAction</see>
            on a <see cref="T:IdeaBlade.EntityModel.DataEntityProperty">DataEntityProperty</see>.
            </summary>
            <typeparam name="TInstance">Type of declaring object</typeparam>
            <typeparam name="TValue">Type of property value</typeparam>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataEntityPropertyInterceptorArgs`2.#ctor(IdeaBlade.EntityModel.DataEntityProperty,`0,System.Object)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="entityProperty"></param>
            <param name="instance"></param>
            <param name="context"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataEntityPropertyInterceptorArgs`2.#ctor(IdeaBlade.Core.PropertyInterceptorArgs)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityPropertyInterceptorArgs`2.DataEntityProperty">
            <summary>
            The <see cref="P:IdeaBlade.EntityModel.DataEntityPropertyInterceptorArgs`2.DataEntityProperty"/> being retrieved or set.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityPropertyInterceptorArgs`2.IdeaBlade#EntityModel#IEntityPropertyInterceptorArgs#EntityProperty">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityProperty"/> being retrieved or set.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.DataEntityPropertyGetInterceptorArgs`2">
            <summary>
            Strongly-typed arguments to a BeforeGet or AfterGet action on a <see cref="T:IdeaBlade.EntityModel.DataEntityProperty"/>.
            </summary>
            <typeparam name="TInstance">Type of declaring object</typeparam>
            <typeparam name="TResult">Type of property value</typeparam>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataEntityPropertyGetInterceptorArgs`2.#ctor(IdeaBlade.EntityModel.DataEntityProperty,`0,System.Object)">
            <summary>
            Creats an instance of this class.
            </summary>
            <param name="entityProperty"></param>
            <param name="instance"></param>
            <param name="context"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataEntityPropertyGetInterceptorArgs`2.#ctor(IdeaBlade.Core.PropertyInterceptorArgs)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityPropertyGetInterceptorArgs`2.EntityVersion">
            <summary>
            Version of the Entity.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.DataEntityPropertySetInterceptorArgs`2">
            <summary>
            Strongly-typed arguments to a BeforeSet or AfterSet action on a <see cref="T:IdeaBlade.EntityModel.DataEntityProperty"/>.
            </summary>
            <typeparam name="TInstance">Type of declaring object</typeparam>
            <typeparam name="TResult">Type of property value</typeparam>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataEntityPropertySetInterceptorArgs`2.#ctor(IdeaBlade.EntityModel.DataEntityProperty,`0,System.Object)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="entityProperty"></param>
            <param name="instance"></param>
            <param name="context"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataEntityPropertySetInterceptorArgs`2.#ctor(IdeaBlade.Core.PropertyInterceptorArgs)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.DataEntityProperty">
            <summary>
            Representation of a simple property within an <see cref="T:IdeaBlade.EntityModel.IEntity"/>.  
            <seealso cref="T:IdeaBlade.EntityModel.EntityProperty"/>
            <seealso cref="T:IdeaBlade.EntityModel.DataEntityProperty`2"/>
            <seealso cref="T:IdeaBlade.EntityModel.NavigationEntityProperty"/>
            </summary>
            <remarks>
            The <b>IdeaBlade DevForce Object Mapping Tool</b> automatically generates
            <b>EntityProperties</b> for your business objects:  a <b>DataEntityProperty</b>
            is generated for all simple properties, and a <see cref="T:IdeaBlade.EntityModel.NavigationEntityProperty"/>
            is generated for all relational properties.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataEntityProperty.Create(System.Type,System.String,System.Type,System.Boolean,System.Boolean,IdeaBlade.EntityModel.ConcurrencyStrategy,System.Boolean,System.String)">
            <summary>
            Creates a new DataEntityProperty from the information provided.
            </summary>
            <param name="entityType"></param>
            <param name="propertyName"></param>
            <param name="dataType"></param>
            <param name="isNullable"></param>
            <param name="isPartOfKey"></param>
            <param name="concurrencyStrategy"></param>
            <param name="isAutoIncrementing"></param>
            <param name="relatedNavigationPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataEntityProperty.#ctor(System.Type,System.String,System.Type,System.Boolean,System.Boolean,IdeaBlade.EntityModel.ConcurrencyStrategy,System.Boolean,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the EntityProperty class.
            </summary>
            <param name="entityType">The entity type that this property belongs to</param>
            <param name="propertyName">The entity property name</param>
            <param name="dataType">The data type of this property</param>
            <param name="isNullable">Whether this property can accept null values</param>
            <param name="isPartOfKey">Whether this property is a primary key property</param>
            <param name="concurrencyStrategy">Whether this property is a concurrency column and the strategy to use</param>
            <param name="isAutoIncrementing">Whether this property is autoincrementing</param>
            <param name="relatedNavigationPropertyName"></param>
            <param name="isNativeProperty">Whether this property is a native property (default=true)</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataEntityProperty.GetValue(System.Object)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataEntityProperty.GetValue(System.Object,IdeaBlade.EntityModel.EntityVersion)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataEntityProperty.Equals(System.Object)">
            <summary>
            Provides value equality.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataEntityProperty.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityProperty.Ordinal">
            <summary>
            The ordinal index of the property in the collection of all properties for the Entity.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityProperty.IsForeignKeyProperty">
            <summary>
            Is this a foreign key property.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityProperty.IsPartOfKey">
            <summary>
            Whether this property is part of the primary key.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityProperty.ConcurrencyStrategy">
            <summary>
            <see cref="T:IdeaBlade.EntityModel.ConcurrencyStrategy"/> for this property.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityProperty.IsConcurrencyProperty">
            <summary>
            Whether this property is a concurrency property.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityProperty.IsAutoIncrementing">
            <summary>
            Whether this property is auto-incrementing.
            </summary>
            <remarks>
            Auto-incrementing key properties are assumed to use
            a store-generated value, such as an SQL Server Identity
            or Oracle Sequence.  If you are using store-generated
            keys you do not need to provide a custom <see cref="T:IdeaBlade.EntityModel.IIdGenerator"/>.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityProperty.DefaultValue">
            <summary>
            Gets or sets the default value for this property.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityProperty.IsComplexType">
            <summary>
            Whether this property is a complex type (a non-primitive data type).
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityProperty.IsNativeProperty">
            <summary>
            Gets or sets whether this property is a native property.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityProperty.RelatedNavigationPropertyName">
            <summary>
            The related navigation property name that this is the foreign key for. 
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.DataEntityProperty`2">
            <summary>
            Strongly-typed <see cref="T:IdeaBlade.EntityModel.DataEntityProperty"/>.
            </summary>
            <typeparam name="TInstance">Type of entity</typeparam>
            <typeparam name="TValue">Type of property</typeparam>
            <remarks>
            The <b>EntityProperties</b> auto-generated by the Object Mapper
            use this strongly-typed declaration for all simple properties in your entities.
            <para>
            Every <b>DataEntityProperty</b> has both a <see cref="P:IdeaBlade.EntityModel.DataEntityProperty`2.GetterInterceptor"/> and <see cref="P:IdeaBlade.EntityModel.DataEntityProperty`2.SetterInterceptor"/>
            to which you can inject custom actions.  You add these actions using <see cref="T:IdeaBlade.Core.PropertyInterceptorAttribute">attributes</see>
            and the <see cref="M:IdeaBlade.Core.PropertyInterceptor`3.AddAction(IdeaBlade.Core.PropertyInterceptorAction{`2})">AddAction</see> method.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataEntityProperty`2.#ctor(System.String,System.Boolean,System.Boolean,IdeaBlade.EntityModel.ConcurrencyStrategy,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="propertyName">The entity property name</param>
            <param name="isNullable">Whether this property can accept null values</param>
            <param name="isPartOfKey">Whether this property is a primary key property</param>
            <param name="concurrencyStrategy">Whether this property is a concurrency column and the strategy to use</param>
            <param name="isAutoIncrementing">Whether this property is autoincrementing</param>
            <param name="relatedNavigationPropertyName">Name of any related navigation property.</param>  
            <param name="isNativeProperty">Whether this property is a native property (default=true)</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataEntityProperty`2.GetValue(System.Object,IdeaBlade.EntityModel.EntityVersion)">
            <summary>
            Retrieves the value of this property using the specified version and object.
            </summary>
            <param name="instance"></param>
            <param name="version"></param>
            <returns></returns>
            <remarks>
            All getter interceptor actions are called when using this method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataEntityProperty`2.GetValue(`0)">
            <summary>
            Retrieves the value of this property using the specified object.
            </summary>
            <param name="instance"></param>
            <returns></returns>
            <remarks>
            All getter interceptor actions are called when using this method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataEntityProperty`2.GetValue(`0,IdeaBlade.EntityModel.EntityVersion)">
            <summary>
            Retrieves the value of this property using the specified version and object.
            </summary>
            <param name="instance"></param>
            <param name="version"></param>
            <returns></returns>
            <remarks>
            All getter interceptor actions are called when using this method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataEntityProperty`2.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of this property in the specified object.
            </summary>
            <param name="instance"></param>
            <param name="newValue"></param>
            <remarks>
            Any registered <see cref="F:IdeaBlade.Validation.VerifierExecutionModes.OnBeforeSetTriggers"/>
            and <see cref="F:IdeaBlade.Validation.VerifierExecutionModes.OnAfterSetTriggers"/> verifiers will be executed 
            based on the <see cref="P:IdeaBlade.Validation.VerifierOptions.ExecutionModes"/> in effect.
            <para>
            All setter interceptor actions are called when using this method.
            This method is called from auto-generated properties in the domain model.
            </para>
            </remarks>
            <example><code lang="C#">

    // Sample auto-generated property

    /// <summary>Gets or sets the LastName. </summary>
    [Bindable(true, BindingDirection.TwoWay)]
    [Editable(true)]
    [Display(Name="LastName", AutoGenerateField=true)]
    [IbVal.ValidateProperty]
    [IbVal.StringLengthVerifier(MaxValue=30, IsRequired=true, ErrorMessageResourceName="Employee_LastName")]
    [DataMember]
    public string LastName {
      get { return PropertyMetadata.LastName.GetValue(this); }
      set { PropertyMetadata.LastName.SetValue(this, value); }
    }
    #endregion LastName property
  </code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataEntityProperty`2.SetValue(`0,`1)">
            <summary>
            Sets the value of this property in the specified object.
            </summary>
            <param name="instance"></param>
            <param name="value"></param>
            <remarks>
            Any registered <see cref="F:IdeaBlade.Validation.VerifierExecutionModes.OnBeforeSetTriggers"/>
            and <see cref="F:IdeaBlade.Validation.VerifierExecutionModes.OnAfterSetTriggers"/> verifiers will be executed 
            based on the <see cref="P:IdeaBlade.Validation.VerifierOptions.ExecutionModes"/> in effect.
            <para>
            All setter interceptor actions are called when using this method.
            This method is called from auto-generated properties in the domain model.
            </para>
            </remarks>
            <example><code lang="C#">

    // Sample auto-generated property

    /// <summary>Gets or sets the LastName. </summary>
    [Bindable(true, BindingDirection.TwoWay)]
    [Editable(true)]
    [Display(Name="LastName", AutoGenerateField=true)]
    [IbVal.ValidateProperty]
    [IbVal.StringLengthVerifier(MaxValue=30, IsRequired=true, ErrorMessageResourceName="Employee_LastName")]
    [DataMember]
    public string LastName {
      get { return PropertyMetadata.LastName.GetValue(this); }
      set { PropertyMetadata.LastName.SetValue(this, value); }
    }
    #endregion LastName property
  </code></example>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityProperty`2.GetterInterceptor">
            <summary>
            The getter <see cref="T:IdeaBlade.Core.PropertyInterceptor">PropertyInterceptor</see>.
            </summary>
            <remarks>
            Use the <b>GetterInterceptor</b> to add custom <b>BeforeGet</b> and <b>AfterGet</b>
            interception actions to a property getter.
            </remarks>
            <example>
        <code lang="C#">
        public void Sample() {

          // Add a BeforeGet action to a GetterInterceptor:
          Employee.PropertyMetadata.Address.GetterInterceptor.AddAction(
            PropertyInterceptorTiming.Before,
            TraceGetter);

          // Add a BeforeSet action to a SetterInterceptor:
          Employee.PropertyMetadata.Country.SetterInterceptor.AddAction(
            PropertyInterceptorTiming.Before,
            TraceSetter);

          // Get/set a few properties
          DomainModelEntityManager mgr = new DomainModelEntityManager();
          Employee e = mgr.Employees.First();
          string addy = e.Address;
          e.Country = "UK";
        }

        public static void TraceGetter(IEntityPropertyGetInterceptorArgs args) {
          Console.WriteLine("getter called for " + args.EntityProperty.Name);
        }

        public static void TraceSetter(IEntityPropertySetInterceptorArgs args) {
          Console.WriteLine("setter called for " + args.EntityProperty.Name);
        }
        </code>
      </example>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityProperty`2.SetterInterceptor">
            <summary>
            The setter <see cref="T:IdeaBlade.Core.PropertyInterceptor">PropertyInterceptor</see>.
            </summary>
            <remarks>
            Use the <b>SetterInterceptor</b> to add custom <b>BeforeSet</b> and <b>AfterSet</b>
            interception actions to a property setter.
            <para>
            Any registered <see cref="F:IdeaBlade.Validation.VerifierExecutionModes.OnBeforeSetTriggers">OnBeforeSetTriggers</see>
            and <see cref="F:IdeaBlade.Validation.VerifierExecutionModes.OnAfterSetTriggers">OnAfterSetTriggers</see> verifiers will be executed 
            based on the <see cref="P:IdeaBlade.Validation.VerifierOptions.ExecutionModes"/> in effect for the interceptor.  This
            verification is done immediately before and after the value is stored in the backing field.
            BeforeSet actions will occur before OnBeforeSet verification and AfterSet actions will occur
            after OnAfterSet verification.
            </para>
            <para>
            Will be null for a readonly property.
            </para>
            </remarks>
            <example>
        <code lang="C#">
        public void Sample() {

          // Add a BeforeGet action to a GetterInterceptor:
          Employee.PropertyMetadata.Address.GetterInterceptor.AddAction(
            PropertyInterceptorTiming.Before,
            TraceGetter);

          // Add a BeforeSet action to a SetterInterceptor:
          Employee.PropertyMetadata.Country.SetterInterceptor.AddAction(
            PropertyInterceptorTiming.Before,
            TraceSetter);

          // Get/set a few properties
          DomainModelEntityManager mgr = new DomainModelEntityManager();
          Employee e = mgr.Employees.First();
          string addy = e.Address;
          e.Country = "UK";
        }

        public static void TraceGetter(IEntityPropertyGetInterceptorArgs args) {
          Console.WriteLine("getter called for " + args.EntityProperty.Name);
        }

        public static void TraceSetter(IEntityPropertySetInterceptorArgs args) {
          Console.WriteLine("setter called for " + args.EntityProperty.Name);
        }
        </code>
      </example>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityProperty`2.IdeaBlade#EntityModel#IHasPropertyInterceptors#GetterInterceptor">
            <summary>
            The getter <see cref="T:IdeaBlade.Core.PropertyInterceptor"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityProperty`2.IdeaBlade#EntityModel#IHasPropertyInterceptors#SetterInterceptor">
            <summary>
            The setter <see cref="T:IdeaBlade.Core.PropertyInterceptor"/>.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.DataEntityPropertySurrogate">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataEntityPropertySurrogate.#ctor(IdeaBlade.EntityModel.DataEntityProperty)">
            <summary>
            For internal use only.
            </summary>
            <param name="property"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityPropertySurrogate.EntityTypeWrapper">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityPropertySurrogate.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityPropertySurrogate.DataTypeWrapper">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityPropertySurrogate.IsNullable">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityPropertySurrogate.IsPartOfKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityPropertySurrogate.ConcurrencyStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityPropertySurrogate.IsAutoIncrementing">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityPropertySurrogate.RelatedNavigationPropertyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityPropertySurrogate.IsNativeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityPropertySurrogate.Ordinal">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityKind">
            <summary>
            Used internally within the framework to indicate the kind of object on which the 
            property is defined.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityKind.Entity">
            <summary>
            A sub-type of <see cref="T:IdeaBlade.EntityModel.IEntity"/>
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityKind.ComplexObject">
            <summary>
            A sub-type of <see cref="F:IdeaBlade.EntityModel.EntityKind.ComplexObject"/>.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityKind.UDT">
            <summary>
            A POCO (or user defined) type.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityPropertyCollection">
            <summary>
            Collection of <see cref="T:IdeaBlade.EntityModel.EntityProperty"/> objects.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityPropertyCollection.Item(System.String)">
            <summary>
            Provides access to an EntityProperty by its name.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityPropertyCollection.Item(System.Reflection.MemberInfo)">
            <summary>
            Provides access to an EntityProperty by its propertyInfo.
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.DataEntityPropertyCollection">
            <summary>
            Collection of <see cref="T:IdeaBlade.EntityModel.DataEntityProperty"/> objects.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataEntityPropertyCollection.Item(System.String)">
            <summary>
            Allows access to an EntityProperty by its name.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.ServiceProxyEvents">
            <summary>
            Provides a means of customizing a WCF proxy used to communicate with the BOS.
            </summary>
            <remarks>
            Communication with the WCF services comprising the BOS, the EntityService and all EntityServers, can be customized
            by sub-typing this class and overriding the methods provided.  
            </remarks>
            <example>
		   <code lang="C#">

using System;
using System.ComponentModel.Composition;
using System.ServiceModel.Channels;
using System.ServiceModel.Description;
using IdeaBlade.EntityModel;

  public class MyServiceProxyEvents : ServiceProxyEvents {

    // Called after an endpoint is created.
     public override void OnEndpointCreated(ServiceEndpoint endpoint) {

       // Here we'll tweak the binding to add security. 
       // Bindings used in DevForce are by default the CustomBinding type.
       // Remember that bindings on both the client and server must correspond
       // for communications to take place.  

       if (endpoint.Binding is CustomBinding) {

         var binding = endpoint.Binding as CustomBinding;
         var elements = binding.CreateBindingElements();

         // Add transport security.
         var transport = elements.Find&lt;TransportBindingElement&gt;();
         if (transport.Scheme != "https") {
           elements.Remove(transport);
           transport = new HttpsTransportBindingElement();
           elements.Add(transport);
         }
         var sec = new TransportSecurityBindingElement();
         elements.Insert(1, sec);

         // Replace the binding on the endpoint.
         endpoint.Binding = new CustomBinding(elements);

         var uri = endpoint.Address.Uri;
         var newUri = uri.AbsoluteUri.Replace("http", "https");
         endpoint.Address = new System.ServiceModel.EndpointAddress(newUri);
       }

      // Let's change the default timeouts too.
      endpoint.Binding.ReceiveTimeout = new TimeSpan(0, 2, 0);
      endpoint.Binding.SendTimeout = new TimeSpan(0, 2, 0);
    }

    // Called before a channel is created and opened from the ChannelFactory.
     public override void OnFactoryCreated(System.ServiceModel.ChannelFactory factory) {
       factory.Credentials.UserName.UserName = "name";
       factory.Credentials.UserName.Password = "pwd";
     }
  }
		   </code>
	   </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.ServiceProxyEvents.OnEndpointCreated(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Called when a ServiceEndpoint has been created.
            </summary>
            <param name="endpoint"></param>
            <remarks>
            Override this method if you need to customize the endpoint.  For example, you can modify the default timeout values, 
            add security to the binding, or add additional endpoint behaviors.  The base implementation performs no action.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.ServiceProxyEvents.OnFactoryCreated(System.ServiceModel.ChannelFactory)">
            <summary>
            Called when a ChannelFactory has been created.
            </summary>
            <param name="factory"></param>
            <remarks>
            Override this method to perform additional customization of the proxy before the channel is opened.  For example, you can add additional
            endpoints and behaviors.  The base implementation performs no action.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.ServiceNameInfo">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ServiceNameInfo.EntityServerName">
            <summary>
            Name of the requested EntityServer servce.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.SubscribeWorkState">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SubscribeWorkState.ServiceTypeName">
            <summary>
            With ServerMethodName, defines the service method.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SubscribeWorkState.ServiceMethodName">
            <summary>
            With ServerTypeName, defines the service method.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SubscribeWorkState.UserToken">
            <summary>
            Identifies the subscription.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SubscribeWorkState.ClientArgs">
            <summary>
            Optional arguments to the service.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SubscribeWorkState.ServiceCallback">
            <summary>
            WCF callback.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SubscribeWorkState.ClientAction">
            <summary>
            Client callback action.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SubscribeWorkState.ServiceArgs">
            <summary>
            Data pushed from service.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.UnsubscribeWorkState">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.UnsubscribeWorkState.UserToken">
            <summary>
            Token identifying the subscription to be cancelled.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.SubscriptionOperation">
            <summary>
            Information about a subscription registered via the <see cref="M:IdeaBlade.EntityModel.EntityManager.RegisterCallback(System.String,System.String,System.Action{IdeaBlade.EntityModel.SubscriptionOperation},System.Object,System.Object[])"/>.
            </summary>
            <remarks>
            The <b>SubscriptionOperation</b> is passed to the callback action registered via the <see cref="M:IdeaBlade.EntityModel.EntityManager.RegisterCallback(System.String,System.String,System.Action{IdeaBlade.EntityModel.SubscriptionOperation},System.Object,System.Object[])"/>.
            Data returned from the service is available in the <see cref="P:IdeaBlade.EntityModel.SubscriptionOperation.NotificationData"/>.  If an error has occurred the <see cref="P:IdeaBlade.EntityModel.SubscriptionOperation.Error"/>
            property will contain the exception.  You can cancel the subscription with the <see cref="M:IdeaBlade.EntityModel.SubscriptionOperation.CancelCallback"/> method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.SubscriptionOperation.CancelCallback">
            <summary>
            Cancel the subscription.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SubscriptionOperation.NotificationData">
            <summary>
            Data returned by the service.
            </summary>
            <remarks>
            The contents of the object array are determined by your service requirements.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.SubscriptionOperation.Error">
            <summary>
            Returns the exception if the operation failed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SubscriptionOperation.HasError">
            <summary>
            Returns whether the operation failed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SubscriptionOperation.UserToken">
            <summary>
            Returns the user token which identifies the subscription.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.UnresolvedParentMap">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.UnresolvedParentMap.AddToMap(IdeaBlade.EntityModel.EntityKey,IdeaBlade.EntityModel.EntityRelationLink,IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            For internal use only.
            </summary>
            <param name="parentEntityKey"></param>
            <param name="link"></param>
            <param name="aspectToAdd"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions">
            <summary>
            Provides a set of static helper methods for an Entity.
            <seealso cref="N:System.Linq"/>
            </summary>
            <remarks>
            To use these extensions, add a using statement (Imports in Visual Basic) for this namespace
            to your class.  
            <para>
            For more information on extension methods, see <b>Extension Methods (C# Programming Guide)</b>
            or <b>Extension Methods (Visual Basic)</b> in the Visual Studio 2008 documentation.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.GetEntityManager(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityManager"/> that manages this entity.
            </summary>
            <param name="entity"></param>
            <remarks>
            This value will be null until an object is attached to an <b>EntityManager</b>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.GetEntityState(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityState"/> of this entity.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.GetEntityMetadata(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityMetadata"/> for this Entity.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.GetEntityGroup(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityGroup"/> that this Entity belongs to.
            </summary>
            <param name="entity"></param>
            <remarks>
            Note that the EntityGroup will never be null (it will be a prototype group 
            in the event that this entity is not yet attached to a specific entity manager. 
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.GetEntitySetName(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            The name of the Entity Framework EntitySet containing this entity.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.GetEntityKey(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityKey"/> for this entity. 
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.Delete(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            Marks this Entity for deletion; the <see cref="T:IdeaBlade.EntityModel.EntityState"/> becomes "Deleted".
            </summary>
            <remarks>
            You must call <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges()"/> to persist this change to the 
            backend data source.  
            <para>
            The <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanging"/> and <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanged"/> events
            will fire during a <b>Delete</b> call with an EntityAction of <see cref="F:IdeaBlade.EntityModel.EntityAction.Delete"/>.
            </para>  
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.AcceptChanges(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
             Accepts all changes to this Entity, returning the EntityState to Unchanged.
            </summary>
            <remarks>
            <b>AcceptChanges</b> is automatically called by the EntityManager after a successful 
            <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges()"/> call; there is rarely a need to call this method directly.
            <para>
            The <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanging"/> and <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanged"/>
            events are fired with an EntityAction of <see cref="F:IdeaBlade.EntityModel.EntityAction.Commit"/> when this
            method is executed.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.RejectChanges(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            Rejects (rolls back) all changes to this Entity since it was queried or had <see cref="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.AcceptChanges(IdeaBlade.EntityModel.EntityAspect)"/> called on it.
            </summary>
            <remarks>
            Rejects any changes made to the Entity since the last save operation.
            This will also remove the Entity from the <b>EntityManager</b> if it was an 'added' object.
            <para>
            The <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanging"/> and <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanged"/> events
            will fire during a <b>RejectChanges</b> call with an EntityAction of <see cref="F:IdeaBlade.EntityModel.EntityAction.Rollback"/>.
            </para>
            <seealso cref="M:IdeaBlade.EntityModel.Entity.RejectChanges"/>
            <seealso cref="M:IdeaBlade.EntityModel.Entity.RemoveFromManager()"/>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.IsNullEntity(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            Returns whether the current instance is a null entity.
            </summary>
            <param name="entity"></param>
            <remarks>
            The EntityManager will return a NullEntity instead of a null value when
            a requested entity is not found.
            </remarks>
            <example><code lang="C#">
// Sample showing IsNullEntity check.

    DomainModelEntityManager mgr = new DomainModelEntityManager();

    // Try to retrieve order #1 - FirstOrNullEntity will return null entity if not found.
    OrderSummary order = mgr.OrderSummaries.FirstOrNullEntity(o =&gt; o.Id == 1);
    if (order.IsNullEntity)
       Console.WriteLine("Order #1 not found");

    // Now try another order, using FirstOrDefault, which returns null if not found.
    OrderSummary order2 = mgr.OrderSummaries.FirstOrDefault(o =&gt; o.Id == 2);
    if (order2 == null) {
       Console.WriteLine("Order #2 is null");
    } else if (order2.IsNullEntity) {
       Console.WriteLine("Order #2 is a null entity");
    }

    // Note, you can't use .First (since the EF will throw an exception).
    OrderSummary order3 = mgr.OrderSummaries.First(o =&gt; o.Id == 3); 
    
</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.IsPendingEntity(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            Returns whether the current instance is a pending entity.
            </summary>
            <param name="entity"></param>
            <remarks>
            The EntityManager will return a PendingEntity instead of a null value when
            a requested entity is being queried asynchronously and has not yet been returned.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.IsNullOrPendingEntity(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            Returns whether the current instance is a null entity or a pending entity.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.AddToManager(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            Adds a newly created entity to its associated <see cref="T:IdeaBlade.EntityModel.EntityManager"/>. 
            </summary>
            <param name="entity"></param>
            <remarks>The associated EntityManager will either be the EntityManager that was called to create this Entity
            (<see cref="M:IdeaBlade.EntityModel.EntityManager.CreateEntity``1"/>) or that was used to generate its ids ( <see cref="M:IdeaBlade.EntityModel.EntityManager.GenerateId(System.Object,IdeaBlade.EntityModel.DataEntityProperty)"/>)
            If neither of these cases apply, then the <see cref="T:IdeaBlade.EntityModel.EntityManager"/>'s DefaultManager"/&gt; will be used.
            There is no difference between <b>AddToManager</b> and 
            <see cref="M:IdeaBlade.EntityModel.EntityManager.AddEntity(IdeaBlade.EntityModel.Entity)"/>.
            Use either method to add a business object created by the <see cref="M:IdeaBlade.EntityModel.EntityManager.CreateEntity(System.Type)"/> method
            to the EntityManager cache.  The object must have a "detached" <see cref="P:IdeaBlade.EntityModel.EntityAspect.EntityState"/>, must not
            have ever been associated with another EntityManager and must have a unique EntityKey within the EntityManager to which it will
            be added. 
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.RemoveFromManager(IdeaBlade.EntityModel.EntityAspect)">
             <summary>
             Removes the entity from the EntityManager cache.
             </summary>
             <param name="entity"></param>
             <remarks>The Entity will be in a "detached" state after the remove. 
             <b>RemoveFromManager</b> and <see cref="M:IdeaBlade.EntityModel.EntityManager.RemoveEntity(IdeaBlade.EntityModel.Entity)"/>
              can be used interchangeably. Calling <b>RemoveFromManager</b> also clears the EntityManager's <see cref="P:IdeaBlade.EntityModel.EntityManager.QueryCache"/>.
            <para>This does not delete the object from the backend server.  To delete an entity,
            use the <see cref="M:IdeaBlade.EntityModel.Entity.Delete"/> method.</para>
             </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.RemoveFromManager(IdeaBlade.EntityModel.EntityAspect,System.Boolean)">
             <summary>
             Removes the entity from the EntityManager cache.
             </summary>
             <param name="entity"></param>
             <remarks>The Entity will be in a "detached" state after the remove. 
             <b>RemoveFromManager</b> and <see cref="M:IdeaBlade.EntityModel.EntityManager.RemoveEntity(IdeaBlade.EntityModel.Entity)"/>
              can be used interchangeably. Calling <b>RemoveFromManager</b> also clears the EntityManager's <see cref="P:IdeaBlade.EntityModel.EntityManager.QueryCache"/>.
            <para>This does not delete the object from the backend server.  To delete an entity,
            use the <see cref="M:IdeaBlade.EntityModel.Entity.Delete"/> method.</para>
             </remarks>
             <param name="clearQueryCache"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.GetRelatedEntity(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            Returns the related entity via a <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/>.
            </summary>
            <param name="entity"></param>
            <param name="relationLink"></param>
            <returns></returns>
            <remarks>
            The current <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultQueryStrategy"/> is used
            to determine how this query is fulfilled.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.GetRelatedEntity(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityRelationLink,IdeaBlade.EntityModel.QueryStrategy)">
            <summary>
            Returns the related entity via a <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/> using the specified QueryStrategy.
            </summary>
            <param name="entity"></param>
            <param name="relationLink"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.GetRelatedEntity``1(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            Returns the related entity via a <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="relationLink"></param>
            <returns></returns>
            <remarks>
            The current <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultQueryStrategy"/> is used
            to determine how this query is fulfilled.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.GetRelatedEntity``1(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityRelationLink,IdeaBlade.EntityModel.QueryStrategy)">
            <summary>
            Returns the related entity via a <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/> using the specified QueryStrategy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="relationLink"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.GetRelatedEntities(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            Returns all related entities via the specified <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/>.
            </summary>
            <param name="entity"></param>
            <param name="relationLink"></param>
            <returns></returns>
            <remarks>
            The current <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultQueryStrategy"/> is used
            to determine how this query is fulfilled.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.GetRelatedEntities(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityRelationLink,IdeaBlade.EntityModel.QueryStrategy)">
            <summary>
            Returns all related entities via the specified <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/> using the specified QueryStrategy.
            </summary>
            <param name="entity"></param>
            <param name="relationLink"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.GetRelatedEntities``1(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            Returns all related entities via the specified <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="relationLink"></param>
            <returns></returns>
            <remarks>
            The current <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultQueryStrategy"/> is used
            to determine how this query is fulfilled.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.Extensions.EntityAspectExtensions.GetRelatedEntities``1(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityRelationLink,IdeaBlade.EntityModel.QueryStrategy)">
            <summary>
            Returns all related entities via the specified <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/> using the specified QueryStrategy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="relationLink"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.IKnownType">
            <summary>
            Marker interface for specification of known types.
            </summary>
            <remarks>
            A "known type" is a type which the <see cref="T:System.Runtime.Serialization.DataContractSerializer">DataContractSerializer</see> knows
            how to serialize.  DevForce uses this serializer in Silverlight applications, or in any n-tier application
            in which the <see cref="P:IdeaBlade.Core.Configuration.ObjectServerElement.UseDCS">Object Server UseDCS flag</see> has been 
            set.  DevForce will automatically discover most known types, but in some situations you will also need
            to specify the known types for DevForce to use.  You can do this in several ways: 1) use this marker interface, 
            2) decorate the type with the <see cref="T:IdeaBlade.EntityModel.DiscoverableTypeAttribute"/>, 3) decorate an existing
            known type with the <see cref="T:System.Runtime.Serialization.KnownTypeAttribute"/>, or 4) implement the <see cref="T:IdeaBlade.EntityModel.IKnownTypeProvider"/> to programmatically add known types.
            <para>
            The types which you need to make known to DevForce are typically those used with the 
            <b>EntityManager.InvokeServerMethod</b> or the <b>Notification Service</b>. 
            </para>
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.IKnownTypeProvider">
            <summary>
            Interface which allows for programmatic specification of known types.
            </summary>
            <remarks>
            A "known type" is a type which the <see cref="T:System.Runtime.Serialization.DataContractSerializer">DataContractSerializer</see> knows
            how to serialize.  DevForce uses this serializer in Silverlight applications, or in any n-tier application
            in which the <see cref="P:IdeaBlade.Core.Configuration.ObjectServerElement.UseDCS">Object Server UseDCS flag</see> has been 
            set.  DevForce will automatically discover most known types, but in some situations you will also need
            to specify the known types for DevForce to use.  You can do this in several ways: 1) use the marker interface
            <see cref="T:IdeaBlade.EntityModel.IKnownType"/>, 2) decorate the type with the <see cref="T:IdeaBlade.EntityModel.DiscoverableTypeAttribute"/>, 3) decorate an existing
            known type with the <see cref="T:System.Runtime.Serialization.KnownTypeAttribute"/>, or 4) implement the <b>IKnownTypeProvider</b> to programmatically add known types.
            <para>
            The types which you need to make known to DevForce are typically those used with the 
            <b>EntityManager.InvokeServerMethod</b> or the <b>Notification Service</b>. 
            </para>
            <para>
            DevForce will find and use all implementations of the <b>IKnownTypeProvider</b> interface.  
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.IKnownTypeProvider.AddKnownTypes">
            <summary>
            Provide any types for the <see cref="T:System.Runtime.Serialization.DataContractSerializer">DataContractSerializer</see>
            which DevForce won't otherwise discover.
            </summary>
            <returns></returns>
            <remarks>
            This method will be called when communications are initialized on both the client and the server.  The method may
            also be called when the <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/> is saved or restored, and when the various
            <see cref="T:IdeaBlade.EntityModel.SerializationFns"/> are called.  The publicly available method <see cref="M:IdeaBlade.EntityModel.KnownTypeHelper.GetServiceKnownTypes(System.Reflection.ICustomAttributeProvider)"/>
            also calls this method.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.InvokeServerMethodResult">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.InvokeServerMethodResult.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="returnObject"></param>
        </member>
        <member name="F:IdeaBlade.EntityModel.InvokeServerMethodResult.ReturnObject">
            <summary>
            Object returned from InvokeServerMethod call.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.PendingEntityResolvedEventArgs">
            <summary>
            Arguments to a <see cref="E:IdeaBlade.EntityModel.EntityAspect.PendingEntityResolved"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.PendingEntityResolvedEventArgs.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="entity"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.PendingEntityResolvedEventArgs.ResolvedEntity">
            <summary>
            The entity fetched by the asynchronous navigation.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.PendingEntityListResolvedEventArgs`1">
            <summary>
            Arguments to a <see cref="E:IdeaBlade.EntityModel.RelatedEntityList`1.PendingEntityListResolved"/> event.
            </summary>
            <typeparam name="T">Entity type in list</typeparam>
        </member>
        <member name="M:IdeaBlade.EntityModel.PendingEntityListResolvedEventArgs`1.#ctor(IdeaBlade.EntityModel.RelatedEntityList{`0})">
            <summary>
            
            </summary>
            <param name="resolvedEntities"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.PendingEntityListResolvedEventArgs`1.ResolvedEntities">
            <summary>
            The entities fetched by the asynchronous navigation.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityFetchingEventArgs">
            <summary>
            Arguments to the <see cref="E:IdeaBlade.EntityModel.EntityManager.Fetching"/> event.
            </summary>
            <remarks>
            The <see cref="E:IdeaBlade.EntityModel.EntityManager.Fetching"/> event is fired
            before the EntityManager fetches data from an EntityServer.  Note that cache only queries or optimized queries that
            are handled from cache will not go through this handler.  The <see cref="P:IdeaBlade.EntityModel.EntityFetchingEventArgs.Query"/>
            provided in this event may be "reduced" from the query initially submitted to satisfy internal processing requirements.  If you
            need to see or modify the original query you should provide a handler for the <see cref="E:IdeaBlade.EntityModel.EntityManager.Querying"/> event. 
            Set <see cref="P:IdeaBlade.EntityModel.EntityFetchingEventArgs.Cancel"/> to cancel the fetch.  
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityFetchingEventArgs.#ctor(IdeaBlade.EntityModel.IEntityQuery)">
            <summary>
            Initialize a new instance of this class.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityFetchingEventArgs.Query">
            <summary>
            Gets the IEntityQuery involved in this event.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.LoginEventArgs">
            <summary>
            Arguments to a <see cref="E:IdeaBlade.EntityModel.BaseOperation.Completed">LoginOperation.Completed</see> event handler.
            </summary>
            <remarks>
            The Completed handler will be called with an instance
            of <b>LoginEventArgs</b> representing the status of the login operation.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.LoginEventArgs.#ctor(IdeaBlade.EntityModel.ILoginCredential,IdeaBlade.EntityModel.Security.LoginOptions,System.Object)">
            <summary>
            Construct an instance of this class.  Internal use only.
            </summary>
            <param name="credential"></param>
            <param name="options"></param>
            <param name="userState"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.LoginEventArgs.LoginCredential">
            <summary>
            The credentials passed in the Login request.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.LoginEventArgs.LoginOptions">
            <summary>
            The options passed with the <b>LoginAsync</b> call.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.LoginEventArgs.AuthenticationContext">
            <summary>
            Returned by the login.
            </summary>
            <remarks>
            Note an exception is returned when calling the getter if the asynchronous operation was cancelled or failed, since
            the result is undefined.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityRelationRefConstraint">
            <summary>
            The referential integrity constraint for a role.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityRelationRefConstraint.None">
            <summary>
            Not applicable.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityRelationRefConstraint.Principal">
            <summary>
            The role is the principal in the relationship.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityRelationRefConstraint.Dependent">
            <summary>
            The role is the dependent in the relationship.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityRelationRole">
            <summary>
            Represents one end of an <see cref="P:IdeaBlade.EntityModel.EntityRelationRole.EntityRelation"/>.
            </summary>
            <remarks>
            You can obtain an instance of <b>EntityRelationRole</b> from an <see cref="T:IdeaBlade.EntityModel.EntityRelation"/>
            or <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/>.  You may use the <see cref="P:IdeaBlade.EntityModel.EntityRelationRole.ReferenceStrategy"/> property
            to change the default handling for a <see cref="T:IdeaBlade.EntityModel.NavigationEntityProperty"/> on an Entity.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationRole.Equals(System.Object)">
            <summary>
            Overridden. See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationRole.GetHashCode">
            <summary>
            Overridden. See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationRole.EntityRelation">
            <summary>
            Gets the <see cref="P:IdeaBlade.EntityModel.EntityRelationRole.EntityRelation"/> that this role is part of.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationRole.EntityType">
            <summary>
            Gets the entity type for this role.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationRole.RelationPropertyName">
            <summary>
            Gets the name of the 'relation' property associated with this role.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationRole.Properties">
            <summary>
            Gets the <see cref="T:IdeaBlade.EntityModel.EntityProperty"/> or EntityProperties involved in this relation.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationRole.Multiplicity">
            <summary>
            Gets the <see cref="T:IdeaBlade.EntityModel.Multiplicity"/> of the role in this relation.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationRole.OnDeleteMode">
            <summary>
            Gets the <see cref="T:IdeaBlade.EntityModel.OnDeleteMode"/> applicable when the object at this end of the relation is deleted.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationRole.IsImplicitDeleteCascade">
            <summary>
            Is this an implicit OnDeleteCascade
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationRole.ReferenceStrategy">
            <summary>
            Gets or sets the <see cref="T:IdeaBlade.EntityModel.EntityReferenceStrategy"/> that determines how references using this role are resolved.
            </summary>
            <remarks>
            You can set this value to override the <see cref="F:IdeaBlade.EntityModel.EntityReferenceStrategy.Default"/> 
            strategy set when the <see cref="P:IdeaBlade.EntityModel.EntityRelationRole.EntityRelation"/> was constructed.  Changing the strategy
            affects only the EntityReference for this specific end of the <see cref="P:IdeaBlade.EntityModel.EntityRelationRole.EntityRelation"/>.
            <example><code lang="C#">
              // Globally change the strategy for the Customer.OrderSummaries relation:
              var ers = new EntityReferenceStrategy(EntityReferenceLoadStrategy.Load, MergeStrategy.PreserveChanges);
              Customer.OrderSummariesEntityProperty.ReferenceStrategy = ers;
            </code></example>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationRole.QueryDirection">
            <summary>
            Gets the <see cref="T:IdeaBlade.EntityModel.QueryDirection"/> of this role.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationRole.OtherRole">
            <summary>
            Gets the "other" role that particapates in the relation with this role.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationRole.Link">
            <summary>
            Gets the <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/> that corresponds to the directed entity relation with this role
            as the "To" role.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationRole.EntityRelationRefConstraint">
            <summary>
            Gets the kind of referential integrity constraint for this role.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationRole.EntitySubtypes">
            <summary>
            Gets all subtypes of the Type.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityManagerAsync">
            <summary>
            Interface implemented explicitly by the <see cref="T:IdeaBlade.EntityModel.EntityManager"/> to support the 
            <see cref="T:System.IAsyncResult"/> asynchronous design pattern.
            <seealso cref="T:System.IAsyncResult"/>
            <seealso cref="T:System.AsyncCallback"/>
            </summary>
            <remarks>
            The EntityManager supports a hybrid of the event-based asynchronous pattern as part of its standard API.  You'll
            recognize these methods by the OperationName<b>Async</b> naming convention.  For those needing additional control
            over their asynchronous operations the EntityManager also supports the IAsyncResult pattern through the <b>IEntityManagerAsync</b> interface.
            <para>
            In the <b>IAsyncResult</b> pattern an asynchronous operation is implemented as two methods named <b>Begin</b>OperationName and
            <b>End</b>OperationName to begin and end the asynchronous operation "OperationName".  
            After calling <b>Begin</b>OperationName, an application can continue executing instructions 
            on the calling thread while the asynchronous operation takes place on a different thread. 
            For each call to <b>Begin</b>OperationName, the application should also call <b>End</b>OperationName to get the results of the operation. 
            </para>
            <para>
            The <b>Begin</b>OperationName method begins the asynchronous operation and returns an object that implements the <see cref="T:System.IAsyncResult"/> interface. 
            These operations accept the parameters declared in the synchronous version of the method, as well as an <see cref="T:System.AsyncCallback"/>
            delegate and a user-defined object.  Either or both of these additional parameters may be null.  If specified, 
            the <see cref="T:System.AsyncCallback"/> delegate is called when the operation completes.
            </para>
            <para>
            The <b>End</b>OperationName method ends the asynchronous operation.  The return value of the method is the same type returned 
            by its synchronous counterpart.  The <see cref="T:System.IAsyncResult"/> returned by the Begin operation must be passed as a parameter
            to the corresponding End operation.  If the asynchronous operation has not completed when <b>End</b>OperationName is called, 
            the method blocks the calling thread until the asynchronous operation is complete. 
            Exceptions thrown by the asynchronous operation are thrown when <b>End</b>OperationName is called.
            </para>
            <para>Note:  In Silverlight applications, the <b>End</b>OperationName methods should only be called within the
            <see cref="T:System.AsyncCallback"/> method, otherwise you will hang the UI thread.  
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityManagerAsync.BeginConnect(System.AsyncCallback,System.Object)">
            <summary>
            Begin an asynchronous connect.
            </summary>
            <param name="asyncCallback"></param>
            <param name="userState"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityManagerAsync.EndConnect(System.IAsyncResult)">
            <summary>
            End an asynchronous connect.
            </summary>
            <param name="asyncResult"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityManagerAsync.BeginLogin(IdeaBlade.EntityModel.ILoginCredential,System.AsyncCallback,System.Object)">
            <summary>
            Begin an asynchronous login.
            </summary>
            <param name="credential"></param>
            <param name="asyncCallback"></param>
            <param name="userState"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityManagerAsync.EndLogin(System.IAsyncResult)">
            <summary>
            End an asynchronous login.
            </summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityManagerAsync.BeginLogout(System.AsyncCallback,System.Object)">
            <summary>
            Begin an asynchronous logout.
            </summary>
            <param name="asyncCallback"></param>
            <param name="userState"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityManagerAsync.EndLogout(System.IAsyncResult)">
            <summary>
            End an asynchronous logout.
            </summary>
            <param name="asyncResult"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityManagerAsync.BeginExecuteQuery(IdeaBlade.EntityModel.IEntityQuery,System.AsyncCallback,System.Object)">
            <summary>
            Begin asynchronous execution of a query.
            </summary>
            <param name="query"></param>
            <param name="asyncCallback"></param>
            <param name="userState"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityManagerAsync.EndExecuteQuery(System.IAsyncResult)">
            <summary>
            End asynchronous execution of a query.
            </summary>
            <param name="asyncResult"></param>
            <returns>An IEnumerable containing the results</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityManagerAsync.BeginExecuteQuery``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.AsyncCallback,System.Object)">
            <summary>
            Begin asynchronous execution of a query.
            </summary>
            <typeparam name="T">Entity type queried</typeparam>
            <param name="query"></param>
            <param name="asyncCallback"></param>
            <param name="userState"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityManagerAsync.EndExecuteQuery``1(System.IAsyncResult)">
            <summary>
            End asynchronous execution of a query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="asyncResult"></param>
            <returns>An IEnumerable{T} containing the returned entities</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityManagerAsync.BeginSaveChanges(System.Collections.IEnumerable,IdeaBlade.EntityModel.SaveOptions,System.AsyncCallback,System.Object)">
            <summary>
            Begin an asynchronous save operation.
            </summary>
            <param name="entities"></param>
            <param name="saveOptions"></param>
            <param name="asyncCallback"></param>
            <param name="userState"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityManagerAsync.EndSaveChanges(System.IAsyncResult)">
            <summary>
            End an asynchronous save operation.
            </summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityManagerAsync.BeginInvokeServerMethod(System.String,System.String,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            Begin an asynchronous invocation of a server method.
            </summary>
            <param name="typeName"></param>
            <param name="methodName"></param>
            <param name="callback"></param>
            <param name="userState"></param>
            <param name="userArguments"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityManagerAsync.EndInvokeServerMethod(System.IAsyncResult)">
            <summary>
            End an asynchronous server method invocation.
            </summary>
            <param name="asyncResult"></param>
            <returns>The object returned by the server method</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityManagerAsync.BeginForceIdFixup(System.AsyncCallback,System.Object)">
            <summary>
            Begin an asynchronous Id fixup.
            </summary>
            <param name="asyncCallback"></param>
            <param name="userState"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityManagerAsync.EndForceIdFixup(System.IAsyncResult)">
            <summary>
            End an asynchronous Id fixup.
            </summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityManagerAsync.BeginRefetchEntities(IdeaBlade.EntityModel.EntityKeyList,IdeaBlade.EntityModel.MergeStrategy,System.AsyncCallback,System.Object)">
            <summary>
            Begin asynchronous execution of a refetch operation.
            </summary>
            <param name="entityKeys"></param>
            <param name="mergeStrategy"></param>
            <param name="asyncCallback"></param>
            <param name="userState"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityManagerAsync.EndRefetchEntities(System.IAsyncResult)">
            <summary>
            End asynchronous execution of a refetch operation.
            </summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.LoginFault">
            <summary>
            Internal use only.  Fault contract for login exceptions.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.LoginFault.Type">
            <summary/>
        </member>
        <member name="P:IdeaBlade.EntityModel.LoginFault.LoginExceptionType">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.LoginFault.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.LoginFault.UserData">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.MergeStrategy">
            <summary>
            Strategy to control how Entities are merged into an EntityManager's cache.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.MergeStrategy.NotApplicable">
            <summary>
            No merge action applies because there is no data source data. This merge strategy must be used – and may only be used – with the CacheOnly fetch strategy. 
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.MergeStrategy.OverwriteChanges">
            <summary>
            Overwrites the cached entity with incoming data and uses the EntityState of the incoming entity (will be 
            Unchanged if the incoming entity is from the data source).
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.MergeStrategy.PreserveChanges">
            <summary>
            Preserves (does not overwrite) any existing entities that have been changed (modified, added or deleted).
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.MergeStrategy.PreserveChangesUnlessOriginalObsolete">
            <summary>
            Preserves the persistent state of the cached entity if the entity is current. 
            Overwrites an entity if it is obsolete and gives it the EntityState of the incoming entity (will be
            Unchanged if the incoming entity is from the data source).
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.MergeStrategy.PreserveChangesUpdateOriginal">
            <summary>
            Preserves the persistent state of the cached entity whether it is current or not.
            Overwrites the <b>Original</b> version of the entity if obsolete.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.PersistenceFailure">
            <summary>
            Indicates the general failure type of an <see cref="T:IdeaBlade.EntityModel.EntityServerException"/>.
            </summary>
            <remarks>
            The <see cref="T:IdeaBlade.EntityModel.EntityServerException"/> sub-type and the <see cref="P:System.Exception.InnerException"/>
            will provide additional information on the failure.
            </remarks>
        </member>
        <member name="F:IdeaBlade.EntityModel.PersistenceFailure.Connection">
            <summary>
            Connection failure.  The error occurred while accessing the network.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.PersistenceFailure.Data">
            <summary>
            Data failure.  The error occurred while accessing the data source.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.PersistenceFailure.QueryFilter">
            <summary>
            Invalid Query filter
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.PersistenceFailure.Validation">
            <summary>
            Validation error.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.PersistenceFailure.Authorization">
            <summary>
            
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.PersistenceFailure.Concurrency">
            <summary>
            Data concurrency failure.  A database concurrency failure was raised.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.PersistenceFailure.Cancelled">
            <summary>
            Cancelled by a EntityServerSaveInterceptor or EntityServerQueryInterceptor.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.PersistenceFailure.License">
            <summary>
            A license exception.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.PersistenceFailure.Other">
            <summary>
            Unspecified failure.  Check the <see cref="P:System.Exception.InnerException"/> for more information.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.PersistenceOperation">
            <summary>
            Indicates the persistence operation requested when an <see cref="T:IdeaBlade.EntityModel.EntityServerException"/> occurs.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.PersistenceOperation.Connect">
            <summary>
            Connect request.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.PersistenceOperation.Login">
            <summary>
            Login request.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.PersistenceOperation.Query">
            <summary>
            Query request
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.PersistenceOperation.Save">
            <summary>
            Save request.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.PersistenceOperation.IdFixup">
            <summary>
            Temporary-to-real ID fixup request.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.PersistenceOperation.Other">
            <summary>
            Unspecified or undetermined request.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.QueryInversionMode">
            <summary>
            Determines whether or not to attempt query inversion.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.QueryInversionMode.Try">
            <summary>
            Try to invert, if possible.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.QueryInversionMode.On">
            <summary>
            Invert the query.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.QueryInversionMode.Off">
            <summary>
            Do not invert query.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.QueryInversionMode.Manual">
            <summary>
            Do not invert the query, but assume that it inversion has been handled by other means.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.QueryStrategy">
            <summary>
            Determines the <see cref="T:IdeaBlade.EntityModel.FetchStrategy"/>, <see cref="T:IdeaBlade.EntityModel.MergeStrategy"/>, <see cref="T:IdeaBlade.EntityModel.QueryInversionMode"/>
            <see cref="T:IdeaBlade.EntityModel.TransactionSettings"/> and <see cref="T:IdeaBlade.EntityModel.CacheQueryOptions"/>to use when retrieving entities.
            </summary>
            <remarks>
            All pre-defined static QueryStrategy objects use a <see cref="T:TransactionSettings"/> which
            defaults to not use DTC.  If you need to perform transactional fetches you will need to
            set the appropriate TransactionSettings values.
            </remarks>
        </member>
        <member name="F:IdeaBlade.EntityModel.QueryStrategy.DataSourceOnly">
            <summary>
            Retrieve entities from the back-end data source only, and overwrite any matching entities.
            QueryInversion is turned off for this strategy.
            </summary>
            <remarks>
            Combines <see cref="F:IdeaBlade.EntityModel.FetchStrategy.DataSourceOnly"/> and <see cref="F:IdeaBlade.EntityModel.MergeStrategy.OverwriteChanges"/>.
            </remarks>
        </member>
        <member name="F:IdeaBlade.EntityModel.QueryStrategy.DataSourceOnlyWithInversion">
            <summary>
            Retrieve entities from the back-end data source only, and overwrite any matching entities.
            QueryInversion is turned on for this strategy.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.QueryStrategy.DataSourceThenCache">
            <summary>
            Retrieve entities from the backend data source, add objects from cache, and overwrite any matching entities.
            QueryInversion is set to 'Try' for this strategy.
            </summary>
            <remarks>
            Combines <see cref="F:IdeaBlade.EntityModel.FetchStrategy.DataSourceThenCache"/> and <see cref="F:IdeaBlade.EntityModel.MergeStrategy.OverwriteChanges"/>.
            </remarks>
        </member>
        <member name="F:IdeaBlade.EntityModel.QueryStrategy.Normal">
            <summary>
            Retrieve business objects from the cache, and if not in cache, the back-end data source, preserving any changes.
            QueryInversion is set to 'Try' for this strategy.
            </summary>
            <remarks>
            Combines <see cref="F:IdeaBlade.EntityModel.FetchStrategy.CacheThenDataSource"/> and <see cref="F:IdeaBlade.EntityModel.MergeStrategy.PreserveChanges"/>.
            </remarks>
        </member>
        <member name="F:IdeaBlade.EntityModel.QueryStrategy.CacheOnly">
            <summary>
            Retrieve business objects from the cache only.
            QueryInversion is not applicable for this strategy.
            </summary>
            <remarks>
            Combines <see cref="F:IdeaBlade.EntityModel.FetchStrategy.CacheOnly"/> and <see cref="F:IdeaBlade.EntityModel.MergeStrategy.NotApplicable"/>.
            </remarks> 
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryStrategy.#ctor(IdeaBlade.EntityModel.FetchStrategy,IdeaBlade.EntityModel.MergeStrategy)">
            <summary>
            Initialize a new QueryStrategy with the fetch and merge strategies specified, and defaulting the 
            <see cref="P:IdeaBlade.EntityModel.QueryStrategy.TransactionSettings"/> to not use DTC.
            </summary>
            <param name="fetchStrategy">Fetch strategy</param>
            <param name="mergeStrategy">Merge strategy</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryStrategy.#ctor(IdeaBlade.EntityModel.FetchStrategy,IdeaBlade.EntityModel.MergeStrategy,IdeaBlade.EntityModel.QueryInversionMode)">
            <summary>
            
            </summary>
            <param name="fetchStrategy"></param>
            <param name="mergeStrategy"></param>
            <param name="inversionMode"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryStrategy.#ctor(IdeaBlade.EntityModel.FetchStrategy,IdeaBlade.EntityModel.MergeStrategy,IdeaBlade.EntityModel.QueryInversionMode,IdeaBlade.EntityModel.TransactionSettings,IdeaBlade.EntityModel.CacheQueryOptions)">
            <summary>
            Initialize a new QueryStrategy.
            </summary>
            <param name="fetchStrategy"></param>
            <param name="mergeStrategy"></param>
            <param name="inversionMode"></param>
            <param name="transactionSettings"></param>
            <param name="cacheQueryOptions"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryStrategy.#ctor(IdeaBlade.EntityModel.QueryStrategy,IdeaBlade.EntityModel.TransactionSettings,IdeaBlade.EntityModel.CacheQueryOptions)">
            <summary>
            Initialize a new QueryStrategy based on another.
            </summary>
            <param name="queryStrategy"></param>
            <param name="transactionSettings"></param>
            <param name="cacheQueryOptions"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryStrategy.With(IdeaBlade.EntityModel.QueryInversionMode)">
            <summary>
            Creates a clone of the current strategy with the specified QueryInversionMode.
            </summary>
            <param name="inversionMode"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryStrategy.With(IdeaBlade.EntityModel.MergeStrategy)">
            <summary>
            Creates a clone of the current strategy with the specified MergeStrategy.
            </summary>
            <param name="mergeStrategy"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryStrategy.With(IdeaBlade.EntityModel.FetchStrategy)">
            <summary>
            Creates a clone of the current strategy with the specified FetchStrategy.
            </summary>
            <param name="fetchStrategy"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryStrategy.With(IdeaBlade.EntityModel.TransactionSettings)">
            <summary>
            Creates a clone of the current strategy with the specified TransactionSettings.
            </summary>
            <param name="transactionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryStrategy.With(IdeaBlade.EntityModel.CacheQueryOptions)">
            <summary>
            Creates a clone of the current strategy with the specified CacheQueryOptions.
            </summary>
            <param name="cacheQueryOptions"></param>    /// 
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryStrategy.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryStrategy.op_Equality(IdeaBlade.EntityModel.QueryStrategy,IdeaBlade.EntityModel.QueryStrategy)">
            <summary>
            Operator == overload.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryStrategy.op_Inequality(IdeaBlade.EntityModel.QueryStrategy,IdeaBlade.EntityModel.QueryStrategy)">
            <summary>
            Operator != overload.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryStrategy.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.QueryStrategy.FetchStrategy">
            <summary>
            Returns the FetchStrategy for this QueryStrategy.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.QueryStrategy.MergeStrategy">
            <summary>
            Returns the MergeStrategy for this QueryStrategy.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.QueryStrategy.InversionMode">
            <summary>
            Returns the <see cref="T:IdeaBlade.EntityModel.QueryInversionMode"/> for this QueryStrategy.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.QueryStrategy.TransactionSettings">
            <summary>
            Returns the TransactionSettings for this QueryStrategy.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.QueryStrategy.CacheQueryOptions">
            <summary>
            Returns the CacheQueryOptions for this QueryStrategy. May be null in which case no special handling will
            occur when cache queries are executed and standard .NET CLR query semantics will apply.  These are likely
            to be different than those of the backend datastore. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.QueryStrategy.EntityReferenceStrategy">
            <summary>
            Returns the <see cref="P:IdeaBlade.EntityModel.QueryStrategy.EntityReferenceStrategy"/> for this QueryStrategy.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.DefaultEntitySetNameAttribute">
            <summary>
              Defines an attribute that associates an Entity subclass with a default EntitySet name.
            </summary>
            <remarks>
            This attribute is auto-generated by the Object Mapper on each Entity class using the
            Entity Set Name specified for the Entity in the model.  The default name is the
            one used when the <see cref="P:IdeaBlade.EntityModel.EntityQuery.EntitySetName"/> has not been set for a query.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.DefaultEntitySetNameAttribute.#ctor(System.String)">
            <summary>
              Initializes a new instance of the class.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DefaultEntitySetNameAttribute.Name">
            <summary>
            The default EntitySet name.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityChangeEventArgs">
            <summary>
            Base class for all Entity/EntityProperty Changing/Changed event args.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityChangeEventArgs.#ctor(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            Create an instance of this class.
            </summary>
            <param name="entityAspect"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityChangeEventArgs.EntityAspect">
            <summary>
            Returns the EntityAspect for the entity involved in the event.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityChangeEventArgs.EntityWrapper">
            <summary>
            Gets the <see cref="P:IdeaBlade.EntityModel.EntityChangeEventArgs.EntityWrapper"/> involved in the event.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityChangeEventArgs.Entity">
            <summary>
             The object that is changing or has been changed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityChangeEventArgs.NativeEntity">
            <summary>
            The Entity that is changing or has been changed.
            </summary>
            <remarks>
            The <b>NativeEntity</b> will return <see cref="T:IdeaBlade.EntityModel.IEntity"/> if the type is a
            member of the domain model; for POCO types this property returns null.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityChangeCancelEventArgs">
            <summary>
             Base class for all Entity/EntityProperty Changing EventArgs.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityChangeCancelEventArgs.#ctor(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            
            </summary>
            <param name="entityAspect"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityChangeCancelEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the event should be canceled.
            </summary>
            <value>True if the event should be canceled; otherwise, False.</value>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityPropertyChangingEventArgs">
            <summary>
            Provides information to the <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityPropertyChanging"/> event.
            </summary>
            <remarks>
            The <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityPropertyChanging"/> event fires whenever a property
            setter is called on an entity in your model before the new value is set.
            You can set the <see cref="P:IdeaBlade.EntityModel.EntityPropertyChangingEventArgs.Cancel"/> property to true in your handler to stop further 
            processing of the change.  
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityPropertyChangingEventArgs.#ctor(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityProperty,System.Object)">
            <summary>
            Ctor.
            </summary>
            <param name="entityAspect"></param>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityPropertyChangingEventArgs.#ctor(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityProperty,System.Object,IdeaBlade.EntityModel.EntityProperty,System.Object)">
            <summary>
            Ctor.
            </summary>
            <param name="topLevelAspect"></param>
            <param name="topLevelProperty"></param>
            <param name="proposedValueParent"></param>
            <param name="proposedValueProperty"></param>
            <param name="value"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityPropertyChangingEventArgs.Property">
            <summary>
            Property that is changing.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityPropertyChangingEventArgs.ProposedValueParent">
            <summary>
            The local parent object ( may be a complex object) containing the property being changed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityPropertyChangingEventArgs.ProposedValueProperty">
            <summary>
            The local parent property that is actually being changed. Will be different from <see cref="P:IdeaBlade.EntityModel.EntityPropertyChangingEventArgs.Property"/> when a complex object is involved.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityPropertyChangingEventArgs.ProposedValue">
            <summary>
            Gets or sets the proposed value of the property that is changing.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityPropertyChangedEventArgs">
            <summary>
            Provides information to the <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityPropertyChanged"/> event.
            </summary>
            <remarks>
            The <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityPropertyChanged"/> event fires whenever a property
            setter is called on an entity in your model after the new value is set.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityPropertyChangedEventArgs.#ctor(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityProperty,System.Object)">
            <summary>
            Public ctor.
            </summary>
            <param name="entityAspect"></param>
            <param name="property"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityPropertyChangedEventArgs.#ctor(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityProperty,System.Object,IdeaBlade.EntityModel.EntityProperty,System.Object)">
            <summary>
            Ctor.
            </summary>
            <param name="topLevelAspect"></param>
            <param name="topLevelProperty"></param>
            <param name="newValueParent"></param>
            <param name="newValueProperty"></param>
            <param name="value"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityPropertyChangedEventArgs.Property">
            <summary>
            Property whose value has changed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityPropertyChangedEventArgs.NewValueProperty">
            <summary>
            For complex objects this is the local complex object property that changed. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityPropertyChangedEventArgs.NewValueParent">
            <summary>
            For changes to complex objects this is the local Complex Object that changed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityPropertyChangedEventArgs.NewValue">
            <summary>
            The value that was just set.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityChangingEventArgs">
            <summary>
            Provides information to the <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanging"/> event.
            </summary>
            <remarks>
            The <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanging"/> event fires whenever an action
            is about to take place on an entity.
            You can set the <see cref="P:IdeaBlade.EntityModel.EntityChangingEventArgs.Cancel"/> property to true in your handler to stop further 
            processing of the change.  See the <see cref="T:IdeaBlade.EntityModel.EntityAction"/> for the action to
            be performed.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityChangingEventArgs.#ctor(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityAction)">
            <summary>
            Ctor.
            </summary>
            <param name="entityAspect"></param>
            <param name="action"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityChangingEventArgs.Action">
            <summary>
            Action that caused this change.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityChangedEventArgs">
            <summary>
            Provides information to the <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanged"/> event.
            </summary>
            <remarks>
            The <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanged"/> event fires whenever an action
            has taken place on an entity. See the <see cref="T:IdeaBlade.EntityModel.EntityAction"/> for the action performed.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityChangedEventArgs.#ctor(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityAction)">
            <summary>
            Ctor.
            </summary>
            <param name="entityAspect"></param>
            <param name="action"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityChangedEventArgs.Action">
            <summary>
            Action that caused this change.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.ClientEdmKey">
            <summary>
            Represents the connection information to a database.
            </summary>
            <remarks>
            By default an <b>EdmKey</b> is created from the connection information
            for a matching element in the <see cref="T:System.Configuration.ConnectionStringsSection">ConnectionStrings</see>
            section of your configuration file.  You can override this default by specifying an
            <see cref="T:IdeaBlade.Core.Configuration.EdmKeyElement">EdmKey</see> in the
            IdeaBlade section of the configuration file. You can also create an EdmKey at run-time by 
            implementing a custom <see cref="T:IdeaBlade.EntityModel.IDataSourceKeyResolver"/>.
            <para>
            The <b>ClientEdmKey</b> is a client-side version of the <b>EdmKey</b> and requires
            no connection string information.  If you implement a custom
            <see cref="T:IdeaBlade.EntityModel.IIdGenerator"/> the <see cref="M:IdeaBlade.EntityModel.IIdGenerator.IsApplicable(IdeaBlade.EntityModel.IDataSourceKey)"/> method
            will be called with a client-side key when invoked on the client, and with
            the server-side <b>EdmKey</b> when invoked on the server.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.ClientEdmKey.#ctor(System.String,System.String)">
            <summary>
            Create an instance of this class from the information provided.
            </summary>
            <param name="name">Key name</param>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ClientEdmKey.LocateEdmKey(System.String)">
            <summary>
            Finds information for the specified key name in the IdeaBlade configuration file.
            </summary>
            <param name="pKeyName">Key name</param>
            <returns>The specified EdmKey or null if not found.</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.ClientEdmKey.#ctor(IdeaBlade.Core.Configuration.EdmKeyElement)">
            <summary>
            Construct an instance of the class from a key element in the configuration file.  Internal use only.
            </summary>
            <param name="keyElement"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ClientEdmKey.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Create an instance of this class specifying all values.
            </summary>
            <param name="name">Key name</param>
            <param name="connectionString">Connection string</param>
            <param name="logTraceString">Whether generated SQL should be logged</param>
            <param name="tag">User-defined tag value</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.ClientEdmKey.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.ClientEdmKey.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.ClientEdmKey.ConnectionString">
            <summary>
            Gets the connection string for the key.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ClientEdmKey.LogTraceString">
            <summary>
            Gets a value indicating whether the SQL generated from Entity Framework queries is logged.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ClientEdmKey.Name">
            <summary>
            Gets the name of the data source key.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ClientEdmKey.Tag">
            <summary>
            Gets a free-form string value for the developer's use.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.ConcurrencyStrategy">
            <summary>
            The strategy to use when working with a 'concurrency' <see cref="T:IdeaBlade.EntityModel.EntityProperty"/>.
            </summary>
            <remarks>
            The DevForce Object Mapping tool allows you to set a <b>ConcurrencyStrategy</b>
            for every property to be used as a concurrency field.  Concurrency properties
            are used to support optimistic concurrency checking during 
            <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges"/> processing.
            <para>
            If you choose a strategy of <see cref="F:IdeaBlade.EntityModel.ConcurrencyStrategy.ServerCallback"/> then you must implement
            a custom <see cref="T:IdeaBlade.EntityModel.IConcurrencyStrategy"/> so that your callback routine will
            be called during save processing.
            </para>
            </remarks>
        </member>
        <member name="F:IdeaBlade.EntityModel.ConcurrencyStrategy.None">
            <summary>
            The property is not a concurrency field.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.ConcurrencyStrategy.AutoGuid">
            <summary>
            Allow DevForce to automatically assign a new Guid to the property upon insert or update.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.ConcurrencyStrategy.AutoDateTime">
            <summary>
            Allow DevForce to automatically set the current date and time to the property upon insert or update.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.ConcurrencyStrategy.AutoIncrement">
            <summary>
            Allow DevForce to automatically increment a numeric field by 1 upon insert or update.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.ConcurrencyStrategy.ServerCallback">
            <summary>
            Call a custom <see cref="T:IdeaBlade.EntityModel.IConcurrencyStrategy"/> upon insert or update.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.ConcurrencyStrategy.Client">
            <summary>
            The property is a concurrency field, but the client application is responsible for maintaining the value.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityMetadataStore">
            <summary>
            Thread-safe repository of information on the metadata associated with all of the types in a domain model.
            </summary>
            <remarks>
            DevForce creates a singleton instance of the <b>EntityMetadataStore</b> at startup.  
            You can use <see cref="M:IdeaBlade.EntityModel.EntityMetadataStore.GetEntityMetadata(System.Type,System.Boolean)"/> to retrieve metadata for an entity.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadataStore.MergeEntityModelMetadata(IdeaBlade.EntityModel.EntityModelMetadata)">
            <summary>
            Internal use only.  Used to load an IdeaBlade Model Metadata xml file into the EntityMetadataStore.
            </summary>
            <param name="modelMetadata"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadataStore.LoadMetadataFromEmbeddedResources(System.Reflection.Assembly)">
            <summary>
            Internal use only.  Used to load an IdeaBlade Model Metadata xml file into the EntityMetadataStore.
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadataStore.GetEntityTypes">
            <summary>
            Returns developer types ( EF types, POCO types, and Complex types) from all probe assemblies.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadataStore.IsEntityType(System.Type)">
            <summary>
            Is the specified type a valid entity type ( either EF or Poco) or a complex type.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadataStore.GetEntityMetadata(System.Type,System.Boolean)">
            <summary>
            Returns the <see cref="T:IdeaBlade.EntityModel.EntityMetadata"/> for the specified type.
            </summary>
            <param name="entityType"></param>
            <param name="canThrowException"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadataStore.IsMetadataLoaded(System.Type)">
            <summary>
            Returns whether metadata has already been loaded for a specified type.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadataStore.GetSelfAndSubtypes(System.Type)">
            <summary>
            Returns a list of this type and all of its subtypes (subtypes must be defined in the same assembly).
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadataStore.GetEntityRelation(System.String,System.Reflection.Assembly)">
            <summary>
            Returns the first EntityRelation having the specified relation name.
            </summary>
            <param name="relationName"></param>
            <param name="assembly"></param>
            <returns></returns>
            <remarks>
            The relation name can include a namespace qualifier.  Relations are first
            searched by the fully-qualified <see cref="P:IdeaBlade.EntityModel.EntityRelation.RelationName"/>, and then if a match is not found by
            the non-qualified name.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadataStore.GetEntityRelation(System.String,System.Boolean)">
            <summary>
            Returns the first EntityRelation having the specified relation name.
            </summary>
            <param name="relationName"></param>
            <param name="useShortName">True to use a non-namespace qualified relation name search</param>
            <returns></returns>
            <remarks>
            Search for an EntityRelation by either its namespace-qualified <see cref="P:IdeaBlade.EntityModel.EntityRelation.RelationName"/>
            or its <see cref="P:IdeaBlade.EntityModel.EntityRelation.Name"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadataStore.GetEntityRelation(System.Type,System.String)">
            <summary>
            Returns the EntityRelation for the specified type and relation property name.
            </summary>
            <param name="entityType"></param>
            <param name="relationPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadataStore.GetEntityRelations">
            <summary>
            Returns a list of all of the EntityRelations currently defined.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadataStore.GetEntityRelations(System.Type)">
            <summary>
            Returns all of the entity relations for a given entity type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadataStore.GetEntityRelations(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Returns a list of all of the EntityRelations currently defined involving the specified entity types.
            </summary>
            <param name="types">types</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadataStore.GetEntityRelationLink(System.Type,System.String)">
            <summary>
            Returns the EntityRelationLink for the specified entity type and relation property.
            </summary>
            <param name="entityType"></param>
            <param name="relationPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadataStore.GetRelatedProperties(IdeaBlade.EntityModel.DataEntityProperty)">
            <summary>
            Returns a collection of properties related to the specified property.
            </summary>
            <param name="entityProperty"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadataStore.InitializeEntityRelations(System.Reflection.Assembly)">
            <summary>
            Initializes all of the EntityRelations found in an assembly.  
            </summary>
            <param name="assembly"></param>
            <remarks>
            Equivalent to calling EntityRelations.Initialize(), this method dynamically locates 
            the EntityRelations class in the assembly.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadataStore.Reset">
            <summary>
            For internal use only - calling this method WILL corrupt your environment
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadataStore.Instance">
            <summary>
            Singleton instance of this store.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadataStore.EntityAssemblies">
            <summary>
            Returns a list of all of the assemblies in which an <b>EntityRelations</b> is defined.
            </summary>
            <value>The entity assemblies.</value>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityGroupCollection">
            <summary>
            Collection of EntityGroups within a single <see cref="T:IdeaBlade.EntityModel.EntityCache"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityGroupCollection.Contains(System.String)">
            <summary>
            Returns whether this collection contains the specified table.
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityGroupCollection.Contains(System.Type)">
            <summary>
            Returns whether this collection contains a group for the specified entity type.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityGroupCollection.Contains(IdeaBlade.EntityModel.EntityGroup)">
            <summary>
            Returns whether this collection contains the specified group.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityState">
            <summary>
            The state of an <see cref="T:IdeaBlade.EntityModel.IEntity"/>.
            </summary>
            <remarks>
            Note that <see cref="M:IdeaBlade.EntityModel.EntityAspect.AcceptChanges"/> is called by the EntityManager
            after a successful <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges"/> call, and there
            is generally no need to call this method explicitly.
            </remarks>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityState.Detached">
            <summary>
            The entity has been created but is not part of any EntityGroup.
            A Entity is in this state immediately after it has been created
            and before it is added to the EntityManager, or if it has been removed from the
            EntityManager.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityState.Unchanged">
            <summary>
                The entity has not changed since last queried or saved.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityState.Added">
            <summary>
                The entity has been added to the EntityManager.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityState.Deleted">
            <summary>
                The entity was deleted using the Entity.Delete() method.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityState.Modified">
            <summary>
                The entity has been modified and EntityManager.SaveChanges() has not
                been called.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityState.AnyAddedModifiedOrDeleted">
            <summary>
            Added or Modified or Deleted.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityState.AllButDetached">
             <summary>
            All states except detached. 
             </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityStateFns">
            <summary>
            Provides a set of static methods extending an <see cref="T:IdeaBlade.EntityModel.IEntity"/> to provide
            information about the <see cref="T:IdeaBlade.EntityModel.EntityState"/>.
            <seealso cref="N:System.Linq"/>
            </summary>
            <remarks>
            To use these extensions, add a using statement (Imports in Visual Basic) for this namespace
            to your class.  
            <para>
            For more information on extension methods, see <b>Extension Methods (C# Programming Guide)</b>
            or <b>Extension Methods (Visual Basic)</b> in the Visual Studio 2008 documentation.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityStateFns.IsUnchanged(IdeaBlade.EntityModel.EntityState)">
            <summary>
            Whether this Entity is unchanged.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityStateFns.IsAdded(IdeaBlade.EntityModel.EntityState)">
            <summary>
            Whether this Entity has been added.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityStateFns.IsModified(IdeaBlade.EntityModel.EntityState)">
            <summary>
            Whether this Entity has been modified.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityStateFns.IsDetached(IdeaBlade.EntityModel.EntityState)">
            <summary>
            Whether this Entity has been detached (either not yet attached or removed via RemoveFromManager).
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityStateFns.IsDeleted(IdeaBlade.EntityModel.EntityState)">
            <summary>
            Whether this Entity has been deleted (but the change has not yet been persisted to the data source).
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityStateFns.IsAddedOrModified(IdeaBlade.EntityModel.EntityState)">
            <summary>
            Whether this Entity has been either added or modified.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityStateFns.IsAddedOrModifiedOrDeleted(IdeaBlade.EntityModel.EntityState)">
            <summary>
            Whether this Entity has been added, modified or deleted.
            </summary>
            <param name="es"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityStateFns.IsDeletedOrDetached(IdeaBlade.EntityModel.EntityState)">
            <summary>
            Whether this Entity has been either deleted or detached.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityStateFns.IsDeletedOrModified(IdeaBlade.EntityModel.EntityState)">
            <summary>
            Whether this Entity has been either deleted or modified
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityVersion">
            <summary>
               Describes the version of an Entity.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityVersion.Default">
            <summary>
                The default version for the state of the entity. For an <see cref="T:IdeaBlade.EntityModel.EntityState"/> value
                of Added, Modified or Unchanged,  the default version is Current. For an EntityState of Deleted the
                default version is Original. For an entity in IEditableObject.Edit state the version is Proposed. 
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityVersion.Original">
            <summary>
               The entity contains its original values.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityVersion.Current">
            <summary>
               The entity contains current values.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityVersion.Proposed">
            <summary>
               The entity contains a proposed value.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityAction">
            <summary>
               Describes an action performed on an Entity.
            </summary>
            <remarks>
            The <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanging"/> and <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanged"/> events
            both receive arguments containing the <b>EntityAction</b>.
            </remarks>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityAction.Nothing">
            <summary>
            The entity has not changed.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityAction.Remove">
            <summary>
            The entity was removed from the EntityGroup.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityAction.Change">
            <summary>
            The entity has changed.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityAction.Rollback">
            <summary>
            The most recent change to the entity has been rolled back.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityAction.Commit">
            <summary>
            The changes to the entity have been committed.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityAction.Add">
            <summary>
            The entity has been added to an EntityGroup.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityAction.ChangeOriginal">
            <summary>
            The original version of the entity has been changed. (Occurs on Merge with PreserveChangesUpdateOriginal strategy.)
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityAction.ChangeCurrentAndOriginal">
            <summary>
            The original and the current versions of the entity have been changed. (Occurs on Merge.)
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityAction.AddOnQuery">
            <summary>
            The entity has been added to an EntityGroup as a result of a query.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityAction.AddOnImport">
            <summary>
            The entity has been added to an EntityGroup as a result of an import operation.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityAction.AddOnAttach">
            <summary>
            The entity has been added to an EntityGroup as a result of an attach operation.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityAction.Delete">
            <summary>
            The entity was marked for deletion 
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityKey">
            <summary>
            Represents the primary key for an <see cref="T:IdeaBlade.EntityModel.IEntity"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKey.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the EntityKey class.
            </summary>
            <param name="entityType">The Entity type</param>
            <param name="aValue">The value of the primary key property</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKey.#ctor(System.Type,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the EntityKey class.
            </summary>
            <param name="entityType">The Entity type</param>
            <param name="aValue">The value of the primary key property</param>
            <param name="convertValue">Whether or not to convert the <paramref name="aValue"/> to the 
            correct datatype (if necessary)</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKey.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the EntityKey class.    
            </summary>
            <param name="entityType">The Entity type</param>
            <param name="values">The values of the primary key properties</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKey.#ctor(System.Type,System.Object[],System.Boolean)">
            <summary>
            Initializes a new instance of the EntityKey class.    
            </summary>
            <param name="entityType">The Entity type</param>
            <param name="values">The values of the primary key properties</param>
            <param name="convertValues"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKey.ToQuery(IdeaBlade.EntityModel.EntityManager)">
            <summary>
            Returns an <see cref="T:IdeaBlade.EntityModel.EntityQuery"/> to retrieve the item
            represented by this key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKey.ToKeyQuery(IdeaBlade.EntityModel.EntityManager)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKey.ConvertValues">
            <summary>
            Convert the keys values to the 
            correct datatype (if necessary)
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKey.Equals(System.Object)">
            <summary>
            Determines whether two primary keys refer to the same entity.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKey.CompareTo(System.Object)">
            <summary>
            See <see cref="M:System.IComparable.CompareTo(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKey.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKey.op_Equality(IdeaBlade.EntityModel.EntityKey,IdeaBlade.EntityModel.EntityKey)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKey.op_Inequality(IdeaBlade.EntityModel.EntityKey,IdeaBlade.EntityModel.EntityKey)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKey.ToString">
            <summary>
            Returns a human readable representation of this Primary Key.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityKey.EntityType">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.IEntity"/> type associated with this primary key.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityKey.Values">
            <summary>
            An array of values associated with individual properties of the key.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.QueryDirection">
            <summary>
            Used to indicate the direction of an <see cref="T:IdeaBlade.EntityModel.EntityRelationRole"/>.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.QueryDirection.ToRole1">
            <summary>
            Role2 is querying for role1.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.QueryDirection.ToRole2">
            <summary>
            Role1 is querying for role2.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.OnDeleteMode">
            <summary>
            Action taken on related objects when an entity is deleted.
            </summary>
            <remarks>
            The <b>Restrict</b> action is not currently implemented.
            </remarks>
        </member>
        <member name="F:IdeaBlade.EntityModel.OnDeleteMode.None">
            <summary>
            No action taken.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.OnDeleteMode.Cascade">
            <summary>
            Delete is cascaded to objects of the "other" role.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.OnDeleteMode.Restrict">
            <summary>
            Future - Delete is not allowed if objects of the "other" role are present.  
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityRelation">
            <summary>
            Represents a relationship between two <see cref="T:IdeaBlade.EntityModel.IEntity"/> subtypes.
            </summary>
            <remarks><b>EntityRelation</b> objects are automatically generated for you by the
            <b>IdeaBlade DevForce Object Mapping Tool</b> for any relationships defined during 
            design, and placed in a class called <b>EntityRelations</b> in your doman model.
            <para>
            The <b>EntityRelation</b> corresponds to an association in the conceptual model
            of your Entity Domain Model.
            There are two ends to every relation: <see cref="P:IdeaBlade.EntityModel.EntityRelation.Role1"/> and <see cref="P:IdeaBlade.EntityModel.EntityRelation.Role2"/>.  
            The multiplicity of the two ends determines the multiplicity of the relation.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelation.#ctor(System.Type,System.Type,IdeaBlade.EntityModel.DataEntityProperty[],IdeaBlade.EntityModel.DataEntityProperty[],IdeaBlade.EntityModel.Multiplicity,IdeaBlade.EntityModel.Multiplicity,IdeaBlade.EntityModel.OnDeleteMode,IdeaBlade.EntityModel.OnDeleteMode,System.String,System.Boolean)">
            <summary>
            Initialize a new instance of the EntityRelation class.
            </summary>
            <param name="role1Type">The entity type for role1</param>
            <param name="role2Type">The entity type for role2</param>
            <param name="role1Properties">An array of role1 <see cref="T:IdeaBlade.EntityModel.EntityProperty"/>s</param>
            <param name="role2Properties">A corresponding array of role2 <see cref="T:IdeaBlade.EntityModel.EntityProperty"/>s</param>
            <param name="role1Multiplicity">Multiplicity of the role1 end</param>
            <param name="role2Multiplicity">Multiplicity of the role2 end</param>
            <param name="role1OnDeleteMode">Action to take upon delete of a role1 entity</param>
            <param name="role2OnDeleteMode">Action to take upon delete of a role2 entity</param>
            <param name="relationName">The non-namespace qualified name representing the role1/role2 relation.</param>
            <param name="shouldUpdateMetadataStore"></param>
            <remarks>
            EntityRelations are automatically generated by the DevForce Object Mapping tool, and you will
            not usually need to construct additional instances.  You can retrieve one or more EntityRelations using 
            one of the <see cref="M:IdeaBlade.EntityModel.EntityRelation.GetEntityRelations"/> overloads.
            <para>
            Note that the role1Type and role2Type cannot necessarily be inferred from role1Properties and role2Properties
            because of type inheritence. For example, the role1Type may be a subclass of the role1Properties[0].EntityType.
            </para>
            <para>
            The relation name provided here should not be namespace-qualified.  Namespace qualifiers are added 
            automatically at run time to ensure that relation names are unique across all models loaded.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Relation names must be universally unique.</exception>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelation.#ctor(System.Type,System.Type,IdeaBlade.EntityModel.Multiplicity,IdeaBlade.EntityModel.Multiplicity,IdeaBlade.EntityModel.OnDeleteMode,IdeaBlade.EntityModel.OnDeleteMode,System.String,System.Boolean)">
            <summary>
            Initialize a new instance of the EntityRelation class.
            </summary>
            <param name="role1Type">Role1 entity type</param>
            <param name="role2Type">Role2 entity type</param>
            <param name="role1Multiplicity">Multiplicity of the role1 end</param>
            <param name="role2Multiplicity">Multiplicity of the role2 end</param>
            <param name="role1OnDeleteMode">Action to take upon delete of a role1 entity</param>
            <param name="role2OnDeleteMode">Action to take upon delete of a role2 entity</param>
            <param name="relationName">The non-namespace qualified name representing the role1/role2 relation.</param>
            <param name="shouldUpdateMetadataStore"></param>
            <exception cref="T:System.ArgumentException">Relation names must be universally unique.</exception>
            <remarks>
            EntityRelations are automatically generated by the DevForce Object Mapping tool, and you will
            not usually need to construct additional instances.  You can retrieve one or more EntityRelations using 
            one of the <see cref="M:IdeaBlade.EntityModel.EntityRelation.GetEntityRelations"/> overloads.
            <para>
            Note that the role1Type and role2Type cannot necessarily be inferred from role1Properties and role2Properties
            because of type inheritence. For example, the role1Type may be a subclass of the role1Properties[0].EntityType.
            </para>
            <para>
            The relation name provided here should not be namespace-qualified.  Namespace qualifiers are added 
            automatically at run time to ensure that relation names are unique across all models loaded.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelation.GetRole(IdeaBlade.EntityModel.QueryDirection)">
            <summary>
            Returns the <see cref="T:IdeaBlade.EntityModel.EntityRelationRole"/> given a specified <see cref="T:IdeaBlade.EntityModel.QueryDirection"/>.
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelation.Equals(System.Object)">
            <summary>
            Overridden. See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelation.GetHashCode">
            <summary>
            Overridden. See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelation.ToString">
            <summary>
            Returns a human readable description of this relation.
            </summary>
            <returns>A human readable description of this relation</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelation.InitializeEntityRelations(System.Reflection.Assembly)">
            <summary>
            Initializes all of the EntityRelations found in an assembly.  
            </summary>
            <param name="assembly"></param>
            <remarks>
            Equivalent to calling EntityRelations.Initialize(), this method dynamically locates 
            the EntityRelations class in the assembly.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelation.GetEntityRelation(System.String)">
            <summary>
            Returns the first EntityRelation having the specified relation name.
            </summary>
            <param name="relationName"></param>
            <returns></returns>
            <remarks>
            The relation name can include a namespace qualifier.  Relations are first
            searched by the fully-qualified <see cref="P:IdeaBlade.EntityModel.EntityRelation.RelationName"/>, and then if a match is not found by
            the non-qualified name.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelation.GetEntityRelation(System.String,System.Boolean)">
            <summary>
            Returns the first EntityRelation having the specified relation name.
            </summary>
            <param name="relationName"></param>
            <param name="useShortName">True to use a non-namespace qualified relation name search</param>
            <returns></returns>
            <remarks>
            Search for an EntityRelation by either its namespace-qualified <see cref="P:IdeaBlade.EntityModel.EntityRelation.RelationName"/>
            or its <see cref="P:IdeaBlade.EntityModel.EntityRelation.Name"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelation.GetEntityRelation(System.Type,System.String)">
            <summary>
            Returns the EntityRelation for the specified type and relation property name.
            </summary>
            <param name="entityType"></param>
            <param name="relationPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelation.GetEntityRelations">
            <summary>
            Returns a list of all of the EntityRelations currently defined.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelation.GetEntityRelations(System.Type)">
            <summary>
            Returns all of the entity relations for a given entity type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelation.GetEntityRelations(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Returns a list of all of the EntityRelations currently defined involving the specified entity types.
            </summary>
            <param name="types">types</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelation.GetEntityRelationLink(System.Type,System.String)">
            <summary>
            Returns the EntityRelationLink for the specified entity type and relation property.
            </summary>
            <param name="entityType"></param>
            <param name="relationPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelation.GetRelatedProperties(IdeaBlade.EntityModel.DataEntityProperty)">
            <summary>
            Returns a collection of properties related to the specified property.
            </summary>
            <param name="entityProperty"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelation.RelationName">
            <summary>
            Gets the namespace-qualified relation name assigned during mapping.
            </summary>
            <remarks>
            If a relation name is not provided in the constructor, then a unique 
            name will be generated based on the <see cref="P:IdeaBlade.EntityModel.EntityRelation.Role1"/> and <see cref="P:IdeaBlade.EntityModel.EntityRelation.Role2"/> type names.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelation.Name">
            <summary>
            Gets the relation name without the namespace-qualifier.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelation.Namespace">
            <summary>
            Gets the namespace portion of the <see cref="P:IdeaBlade.EntityModel.EntityRelation.RelationName"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelation.Role1">
            <summary>
            The first <see cref="T:IdeaBlade.EntityModel.EntityRelationRole"/> in this relation.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelation.Role2">
            <summary>
            The second <see cref="T:IdeaBlade.EntityModel.EntityRelationRole"/> in this relation.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelation.Roles">
            <summary>
            Both roles in this relation returned as an array.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelation.Links">
            <summary>
            Both links for this relation.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelation.IsManyToMany">
            <summary>
            Is this a many to many relation.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelation.ToRole1Link">
            <summary>
            Gets the <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/> for the Role1 end.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelation.ToRole2Link">
            <summary>
            Gets the <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/> for the Role2 end.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelation.EntityAssemblies">
            <summary>
            Returns a list of all of the assemblies in which an <b>EntityRelations</b> is defined.
            </summary>
            <value>The entity assemblies.</value>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityRelationLink">
            <summary>
            A composite of an <see cref="P:IdeaBlade.EntityModel.EntityRelationLink.EntityRelation"/> and a <see cref="P:IdeaBlade.EntityModel.EntityRelationLink.QueryDirection"/> forming an unambiguous relationship
            between <see cref="T:IdeaBlade.EntityModel.IEntity"/> types.
            </summary>
            <remarks>
            The <b>EntityRelationLink</b> does not have a public constructor.  To obtain a link instance use the 
            <see cref="M:IdeaBlade.EntityModel.EntityRelationLink.From(IdeaBlade.EntityModel.EntityRelation,IdeaBlade.EntityModel.QueryDirection)"/> static method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationLink.From(IdeaBlade.EntityModel.EntityRelation,IdeaBlade.EntityModel.QueryDirection)">
            <summary>
            Returns an <b>EntityRelationLink</b> from the <see cref="P:IdeaBlade.EntityModel.EntityRelationLink.EntityRelation"/> and <see cref="P:IdeaBlade.EntityModel.EntityRelationLink.QueryDirection"/> specified.
            </summary>
            <param name="pEntityRelation">Describes the relationship between two entities</param>
            <param name="pQueryDirection">Whether query is to the parent or the child</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationLink.From(System.String,IdeaBlade.EntityModel.QueryDirection)">
            <summary>
            Returns an <b>EntityRelationLink</b> from the EntityRelation name and <see cref="P:IdeaBlade.EntityModel.EntityRelationLink.QueryDirection"/> specified.
            </summary>
            <param name="entityRelationName">Describes the relationship between two entities</param>
            <param name="queryDirection">Whether query is to the parent or the child</param>
            <returns></returns>
            <remarks>
            The <paramref name="entityRelationName"/> can optionally contain a namespace qualifier.  If you
            are searching by a non-qualified relation name and multiple EntityRelations have this short name,
            only the first is returned.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationLink.From(System.Type,System.String)">
            <summary>
            Returns an <b>EntityRelationLink</b> for a specified Type and relational property name.
            </summary>
            <param name="type">Entity type</param>
            <param name="relationalPropertyName">Name of relational property</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationLink.GetInverse">
            <summary>
            Returns the EntityRelationLink in the inverse direction of this link's <see cref="P:IdeaBlade.EntityModel.EntityRelationLink.QueryDirection"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationLink.ToString">
            <summary>
            Returns a human readable description of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationLink.#ctor(IdeaBlade.EntityModel.EntityRelation,IdeaBlade.EntityModel.QueryDirection)">
            <summary>
            Internal constructor.
            </summary>
            <param name="entityRelation"></param>
            <param name="queryDirection"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationLink.Equals(System.Object)">
            <summary>
            Determines whether two object instances are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationLink.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationLink.UniqueName">
            <summary>
            A uniqueName for this Link
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationLink.EntityRelation">
            <summary>
            Returns the EntityRelation for this EntityRelationLink.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationLink.ToNavigationEntityProperty">
            <summary>
            Returns the NavigationEntityProperty that is associated with this link's ToRole.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationLink.ShouldCascadeDeletes">
            <summary>
            Should deletion of the from side entities cascade to entities on the to side.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationLink.QueryDirection">
            <summary>
            Returns the QueryDirection for this EntityRelationLink.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationLink.FromRole">
            <summary>
            EntityRelationRole that is navigated <b>from</b> using this EntityRelationLink.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationLink.ToRole">
            <summary>
            EntityRelationRole that is navigated <b>to</b> using this EntityRelationLink.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationLink.IsScalar">
            <summary>
            Is this a scalar link.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityRelationLinkSurrogate">
            <summary>
            Internal use only. Note that this surrogate is still usefull even with the advent of the [InternalsVisibleTo] workaround.
            This is because EntityRelations are psuedo-singletons. (i.e. only one instance of each should exist in each appdomain).
            for WCF.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationLinkSurrogate.FromEntityType">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationLinkSurrogate.RelationPropertyName">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityCache">
            <summary>
            Cache of Entities held by the EntityManager. For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityCache.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityCache.#ctor(IdeaBlade.EntityModel.EntityCache)">
            <summary>
            Copy ctor.
            </summary>
            <param name="entityCache"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityCache.AcceptChanges">
            <summary>
            Accept changes to all modified, deleted or added entities within the cache. All
            entities will be marked as <see cref="F:IdeaBlade.EntityModel.EntityState.Unchanged"/> after this operation.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityCache.RejectChanges">
            <summary>
            Reject changes to all modified, deleted or added entities within the cache. All
            entities will be marked as <see cref="F:IdeaBlade.EntityModel.EntityState.Unchanged"/> after this operation.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityCache.HasChanges">
            <summary>
            Are there any added, modified or deleted records in the cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityCache.Clone">
            <summary>
            Creates a copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityCache.Clear">
            <summary>
            Clears all data from the cache.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityCache.EntityGroups">
            <summary>
            Collection of all <see cref="T:IdeaBlade.EntityModel.EntityGroup"/>s within the cache.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityCache.EntityManager">
            <summary>
            The owning EntityManager.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityReferenceStrategy">
            <summary>
            An EntityReferenceStrategy is a combination of an <see cref="T:IdeaBlade.EntityModel.EntityReferenceLoadStrategy"/>, an <see cref="P:IdeaBlade.EntityModel.EntityReferenceStrategy.MergeStrategy"/> and whether the LoadStrategy is synchronous or not.
            </summary>
            <remarks>EntityReferenceStrategies are immutable and control both when referenced entities are loaded as well as how they are merged into 
            the <see cref="T:IdeaBlade.EntityModel.EntityManager"/>'s cache.</remarks>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityReferenceStrategy.Default">
            <summary>
            The Default strategy - a combination of <see cref="F:IdeaBlade.EntityModel.EntityReferenceLoadStrategy.Lazy"/> and 
            <see cref="F:IdeaBlade.EntityModel.MergeStrategy.PreserveChanges"/>.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityReferenceStrategy.NoLoad">
            <summary>
            A strategy that can be used to suppress the loading of Entity references (i.e. related entities).
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityReferenceStrategy.DefaultAsync">
            <summary>
            An async version of the <see cref="F:IdeaBlade.EntityModel.EntityReferenceStrategy.Default"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceStrategy.#ctor(IdeaBlade.EntityModel.EntityReferenceLoadStrategy,IdeaBlade.EntityModel.MergeStrategy)">
            <summary>
            Constructor.
            </summary>
            <param name="loadStrategy"></param>
            <param name="mergeStrategy"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceStrategy.#ctor(IdeaBlade.EntityModel.EntityReferenceLoadStrategy,IdeaBlade.EntityModel.MergeStrategy,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="loadStrategy"></param>
            <param name="mergeStrategy"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceStrategy.With(IdeaBlade.EntityModel.EntityReferenceLoadStrategy)">
            <summary>
            Creates a copy of this strategy with the specified EntityReferenceLoadStrategy
            </summary>
            <param name="loadStrategy"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceStrategy.With(IdeaBlade.EntityModel.MergeStrategy)">
            <summary>
            Creates a copy of this strategy with the specified MergeStrategy
            </summary>
            <param name="mergeStrategy"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceStrategy.With(System.Boolean)">
            <summary>
            Creates a copy of this strategy with the specified IsAsync setting.
            </summary>
            <param name="isAsync"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceStrategy.Equals(System.Object)">
            <summary>
            Provides value equality.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceStrategy.GetHashCode">
            <summary>
            Overridden. See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityReferenceStrategy.LoadStrategy">
            <summary>
            This strategy's <see cref="T:IdeaBlade.EntityModel.EntityReferenceLoadStrategy"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityReferenceStrategy.MergeStrategy">
            <summary>
            This strategy's <see cref="P:IdeaBlade.EntityModel.EntityReferenceStrategy.MergeStrategy"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityReferenceStrategy.IsAsync">
            <summary>
            Whether asynchronous navigation is used.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityReferenceLoadStrategy">
            <summary>
            A strategy that controls when and whether to go to the backend data store to retrieve entities.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityReferenceLoadStrategy.Lazy">
            <summary>
            Load the entity reference once when first accessed and never again.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityReferenceLoadStrategy.DoNotLoad">
            <summary>
            Do not ever go to the back end data store to retrieve entities.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityReferenceLoadStrategy.Load">
            <summary>
            Always go back to the back end data store to retrieve entities.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityReference">
            <summary>
            Basic interface that all EntityReference classes implement.  Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityReference.AddEntity(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="updateInverse"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityReference.RemoveEntity(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="updateInverse"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityReference.GetEntities(IdeaBlade.EntityModel.EntityReferenceStrategy)">
            <summary>
            
            </summary>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityReference.FromEntity">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.IEntity"/> that this EntityReference is for.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityReference.Link">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/> that this EntityReference is for.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityReference.Strategy">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityReferenceStrategy"/> that defines when and how the related entities are 
            retrieved and merged into the <see cref="T:IdeaBlade.EntityModel.EntityManager"/>. 
            </summary>
            <remarks>This strategy can be modified by setting the associated appropriate <see cref="P:IdeaBlade.EntityModel.EntityRelationRole.ReferenceStrategy"/>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityReference.IsLoaded">
            <summary>
            Whether or not this EntityReference's related entities have been loaded yet (i.e. retrieved from the
            back end datasource).
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityReference.IsScalar">
            <summary>
            Does this reference relate to a single entity (true) or multiple entities (false).
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IScalarEntityReference">
            <summary>
            Basic interface for all scalar <see cref="T:IdeaBlade.EntityModel.IEntityReference"/>'s.  Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IScalarEntityReference.RefreshForFkChange">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityReferenceBase">
            <summary>
            Abstract base class that all implementations of <see cref="T:IdeaBlade.EntityModel.IEntityReference"/> extend.  Internal use only.
            There will be one entityReference per navigation property per entity.  An EntityReference contains both the 
            metadata about a specific navigation properties relation as well as the resolution status of the navigation property.  
            It can be viewed as the backing store for any navigation property ( with additional status and metadata info).
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceBase.#ctor(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            Construct a new instance given an <see cref="T:IdeaBlade.EntityModel.IEntity"/> and a <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/>.
            </summary>
            <param name="fromAspect"></param>
            <param name="link"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceBase.Create(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            Static method to create a new instance given an <see cref="T:IdeaBlade.EntityModel.IEntity"/> and a <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/>.
            </summary>
            <param name="fromAspect"></param>
            <param name="relationLink"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceBase.Load(IdeaBlade.EntityModel.MergeStrategy)">
            <summary>
            Forces a load of the related entities using the specified <see cref="T:IdeaBlade.EntityModel.MergeStrategy"/> to 
            control how they are merged into the <see cref="T:IdeaBlade.EntityModel.EntityManager"/>.
            </summary>
            <param name="mergeStrategy"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceBase.AddEntity(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="updateInverse"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceBase.RemoveEntity(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="updateInverse"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceBase.AddRelatedEntity(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            For internal use only.
            </summary>
            <param name="fromAspect"></param>
            <param name="relatedAspect"></param>
            <param name="link"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceBase.RemoveRelatedEntity(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            For internal use only.
            </summary>
            <param name="fromAspect"></param>
            <param name="relatedAspect"></param>
            <param name="link"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceBase.AttachIfPossible(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            For internal use only.
            </summary>
            <param name="newValueAspect"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceBase.GetEntities(IdeaBlade.EntityModel.EntityReferenceStrategy)">
            <summary>
            Gets multiple <see cref="T:IdeaBlade.EntityModel.IEntity"/>s associated with resolving this reference according to the specified
            <see cref="T:IdeaBlade.EntityModel.EntityReferenceStrategy"/>. 
            </summary>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceBase.Clone(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            Creates a version of this EntityReference tied to another entity of the same type.
            </summary>
            <param name="fromEntity"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceBase.FixupReferences">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceBase.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceBase.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityReferenceBase.GetApplicableFetchStrategy(IdeaBlade.EntityModel.EntityReferenceStrategy)">
            <summary>
            
            </summary>
            <param name="eRefStrategy"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityReferenceBase.FromEntity">
            <summary>
            The Entity that this EntityReference is for.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityReferenceBase.PropertyName">
            <summary>
            The name of the property that this entity reference represents.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityReferenceBase.FromAspect">
            <summary>
            The EntityAspect on the 'from' side of this reference.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityReferenceBase.Link">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/> that defines the relationship from the <see cref="P:IdeaBlade.EntityModel.EntityReferenceBase.FromEntity"/>
            to its related entities.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityReferenceBase.IsScalar">
            <summary>
            Does this reference relate to a single entity (true) or multiple entities (false).
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityReferenceBase.Strategy">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityReferenceStrategy"/> that defines when and how the related entities are 
            retrieved and merged into the <see cref="T:IdeaBlade.EntityModel.EntityManager"/>. 
            </summary>
            <remarks>This strategy can be modified by setting the associated appropriate <see cref="P:IdeaBlade.EntityModel.EntityRelationRole.ReferenceStrategy"/>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityReferenceBase.IsLoaded">
            <summary>
            Whether or not this EntityReference's related entities have been loaded yet (i.e. retrieved from the
            back end datasource).
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityReferenceBase.IsEmpty">
            <summary>
            Whether this entity reference currently contains any related entities. Not the same as !IsLoaded.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.ScalarEntityReference`1">
            <summary>
            Implementation of <see cref="T:IdeaBlade.EntityModel.IEntityReference"/> for all scalar references.  Internal use only.
            </summary>
            <typeparam name="T">Entity type of the scalar value</typeparam>
            <remarks>
            The DevForce Object Mapper creates a <b>ScalarEntityReference</b> for every 
            navigation property in your domain model which returns a scalar value.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.ScalarEntityReference`1.#ctor(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            Constructor.
            </summary>
            <param name="fromAspect"></param>
            <param name="link"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ScalarEntityReference`1.Clone(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            Creates a version of this EntityReference tied to another entity of the same type.
            </summary>
            <param name="fromAspect"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.ScalarEntityReference`1.GetValue">
            <summary>
            Return the result of resolving this EntityReference. Will return either the related Entity or a Null Entity.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.ScalarEntityReference`1.GetEntities(IdeaBlade.EntityModel.EntityReferenceStrategy)">
            <summary>
            Returns all related entities given a specified EntityReferenceStrategy. For a ScalarEntityReference
            this will either be a list with 0 or 1 entities contained within it.
            </summary>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.ScalarEntityReference`1.GetEntity(IdeaBlade.EntityModel.EntityReferenceStrategy)">
            <summary>
            Gets a single <see cref="T:IdeaBlade.EntityModel.IEntity"/> associated with resolving this reference according to the specified
            <see cref="T:IdeaBlade.EntityModel.EntityReferenceStrategy"/>. 
            </summary>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.ScalarEntityReference`1.AddEntity(System.Object,System.Boolean)">
            <summary>
            For internal use only.
            </summary>
            <param name="entity"></param>
            <param name="updateInverseValues"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ScalarEntityReference`1.RemoveEntity(System.Object,System.Boolean)">
            <summary>
            For internal use only.
            </summary>
            <param name="entity"></param>
            <param name="updateInverseValues"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ScalarEntityReference`1.FixupReferences">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.ListEntityReference`1">
            <summary>
            Implementation of <see cref="T:IdeaBlade.EntityModel.IEntityReference"/> for all list references.  Internal use only.
            </summary>
            <typeparam name="T">Entity type of objects in the list</typeparam>
            <remarks>
            The DevForce Object Mapper creates a <b>ListEntityReference</b> for every 
            navigation property in your domain model which returns a non-scalar value.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.ListEntityReference`1.#ctor(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            Constructor.
            </summary>
            <param name="fromAspect"></param>
            <param name="link"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ListEntityReference`1.Clone(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            Creates a version of this EntityReference tied to another entity of the same type.
            </summary>
            <param name="fromAspect"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.ListEntityReference`1.GetEntities(IdeaBlade.EntityModel.EntityReferenceStrategy)">
            <summary>
            Gets multiple <see cref="T:IdeaBlade.EntityModel.IEntity"/>s associated with resolving this reference according to the specified
            <see cref="T:IdeaBlade.EntityModel.EntityReferenceStrategy"/>. 
            </summary>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.ListEntityReference`1.GetListValue">
            <summary>
            Return the result of resolving this EntityReference as a list of entities. 
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.ListEntityReference`1.FixupReferences">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.ListEntityReference`1.AddEntity(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="updateInverse"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ListEntityReference`1.RemoveEntity(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="updateInverse"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.DataSourceResultList`1">
            <summary>
            For internal use only.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataSourceResultList`1.#ctor">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataSourceResultList`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            For internal use only;
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.DataSourceEntityList`1">
            <summary>
            For internal use only.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataSourceEntityList`1.#ctor">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataSourceEntityList`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            For internal use only.
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataSourceEntityList`1.ConvertTo(System.Type)">
            <summary>
            For internal use only.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.DataSourceResultGroup`2">
            <summary>
            For internal use only.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataSourceResultGroup`2.#ctor">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataSourceResultGroup`2.Key">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.InvokeServerMethodEventArgs">
            <summary>
            Arguments to a <see cref="E:IdeaBlade.EntityModel.BaseOperation.Completed">InvokeServerMethodOperation.Completed"</see> event handler.
            </summary>
            <remarks>
            The Completed handler will be called with an instance
            of <b>InvokeServerMethodEventArgs</b> representing the status of the operation.  The <see cref="P:IdeaBlade.EntityModel.InvokeServerMethodEventArgs.Result"/>
            will contain the user-defined data returned by the server method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.InvokeServerMethodEventArgs.#ctor(System.String,System.String,System.Object,System.Object[])">
            <summary>
            Construct an instance of this class.  Internal use only.
            </summary>
            <param name="typeName"></param>
            <param name="methodName"></param>
            <param name="userState"></param>
            <param name="args"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.InvokeServerMethodEventArgs.TypeName">
            <summary>
            The assembly-qualified type name of the method executed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.InvokeServerMethodEventArgs.MethodName">
            <summary>
            The name of the method executed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.InvokeServerMethodEventArgs.UserArguments">
            <summary>
            Arguments to the server method.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.InvokeServerMethodEventArgs.Result">
            <summary>
            Result returned by the method.
            </summary>
            <remarks>
            Note an exception is returned when calling the getter if the asynchronous operation was cancelled or failed, since
            the result is undefined.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.PushProxyFactory">
            <summary>
            Create a WCF proxy to a service.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.DuplexProxy`2">
            <summary>
            Proxy for duplex communication.
            </summary>
            <typeparam name="TContract"></typeparam>
            <typeparam name="TCallBackContract"></typeparam>
        </member>
        <member name="T:IdeaBlade.EntityModel.WcfProxy`1">
            <summary>
            WCF proxy for the specified ServiceContract.
            </summary>
            <typeparam name="TContract"></typeparam>
        </member>
        <member name="M:IdeaBlade.EntityModel.WcfProxy`1.CreateProxyCore">
            <summary>
            Create the proxy.  We first try with config if present, and then try
            programmatically.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.QueryInversionServerException">
            <summary>
            Exception thrown for failures during QueryInversion processing on the server.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryInversionServerException.#ctor">
            <summary>
            Initializes a new instance of the EntityManagerSaveException class.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryInversionServerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the EntityManagerSaveException class.
            </summary>
            <param name="pMessage">A message added to describe the exception</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryInversionServerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the EntityManagerSaveException class.
            </summary>
            <param name="pMessage">A message added to describe the exception</param>
            <param name="pInnerException">Wrapped Exception</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryInversionServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the EntityManagerSaveException class.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryInversionServerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Internal use only.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.DataQueryResultCollection">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataQueryResultCollection.#ctor(IdeaBlade.EntityModel.DataQueryResult)">
            <summary>
            For internal use only.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataQueryResultCollection.#ctor(IdeaBlade.EntityModel.DataQueryResult,IdeaBlade.EntityModel.QueryInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="result"></param>
            <param name="queryInfo"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataQueryResultCollection.GetEntities">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataQueryResultCollection.Results">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataQueryResultCollection.QueryParameters">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataQueryResultCollection.QueryInfo">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.DataQueryResult">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataQueryResult.#ctor(IdeaBlade.EntityModel.IDataBlock)">
            <summary>
            For internal use only.
            </summary>
            <param name="dataBlock"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataQueryResult.GetEntities">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataQueryResult.DataBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.QueryInfo">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryInfo.#ctor(IdeaBlade.EntityModel.QueryClassification)">
            <summary>
            
            </summary>
            <param name="classification"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryInfo.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="isMergeable"></param>
            <param name="isQueryCachable"></param>
            <param name="isGhostable"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.QueryInfo.QueryClassification">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.QueryInfo.IsQueryMergeable">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.QueryInfo.IsQueryCacheable">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.QueryInfo.IsQueryGhostable">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.QueryClassification">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.QueryClassification.NotMergeable">
            <summary>
            
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.QueryClassification.Mergeable">
            <summary>
            
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.QueryClassification.QueryCacheable">
            <summary>
            
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.QueryClassification.Ghostable">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.DefaultConcurrencyValueSetter">
            <summary>
            Default implementation of the <see cref="T:IdeaBlade.EntityModel.IConcurrencyStrategy"/> interface.
            <seealso cref="T:IdeaBlade.EntityModel.IConcurrencyStrategy"/>
            </summary>
            <remarks>
            The DevForce Object Mapper allows you to set a concurrency strategy
            on one or more properties of every Entity.  When you choose a concurrency strategy of <b>ServerCallback</b>
            you must implement a custom <see cref="T:IdeaBlade.EntityModel.IConcurrencyStrategy"/>, or extend the
            <b>DefaultConcurrencyValueSetter</b>, in order to provide an updated value for the
            concurrency property.
            </remarks>
            <example>
		   <code lang="C#">
     
  // Sample IConcurrencyStrategy implementation.
  public class ProduceConcurrencyValueSetter : IConcurrencyStrategy {

    // Return true if this strategy can be used with the data source.
    public bool IsApplicable(IdeaBlade.Core.IDataSourceKey dataSourceKey) {
      return dataSourceKey.Name.StartsWith("Produce");
    }

    // Called during SaveChanges processing when a new value is needed prior to insert/update.
    // In this example, we just increment a RowVersion property by 1. 
    public void SetNewConcurrencyValue(ConcurrencyProperty property, Entity entity) {
      ItemOfProduce item = entity as ItemOfProduce;
      int nextval = 0;
      
      if (item.RowState == DataRowState.Modified) {
        nextval = item.RowVersion.HasValue ? item.RowVersion.Value + 1 : 1;
      }

      item.RowVersion = nextval;
    }
  }         
		   </code>
	   </example>
        </member>
        <member name="T:IdeaBlade.EntityModel.IConcurrencyStrategy">
            <summary>
            Interface to be implemented when a concurrency strategy of <b>ServerCallback</b>
            is specified for a property of an entity.
            </summary>
            <remarks>
            The <b>IConcurrencyStrategy</b> is needed on the server only.  
            </remarks>
            <seealso cref="T:IdeaBlade.EntityModel.DefaultConcurrencyValueSetter"/>
            <example>
		   <code lang="C#">
     
  // Sample IConcurrencyStrategy implementation.
  public class ProduceConcurrencyValueSetter : IConcurrencyStrategy {

    // Return true if this strategy can be used with the data source.
    public bool IsApplicable(IdeaBlade.Core.IDataSourceKey dataSourceKey) {
      return dataSourceKey.Name.StartsWith("Produce");
    }

    // Called during SaveChanges processing when a new value is needed prior to insert/update.
    // In this example, we just increment a RowVersion property by 1. 
    public void SetNewConcurrencyValue(ConcurrencyProperty property, Entity entity) {
      ItemOfProduce item = entity as ItemOfProduce;
      int nextval = 0;
      
      if (item.RowState == DataRowState.Modified) {
        nextval = item.RowVersion.HasValue ? item.RowVersion.Value + 1 : 1;
      }

      item.RowVersion = nextval;
    }
  }         
		   </code>
	   </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.IConcurrencyStrategy.IsApplicable(IdeaBlade.EntityModel.IDataSourceKey)">
            <summary>
            Returns whether this <b>IConcurrencyStrategy</b> can be used with the specified data source key.
            </summary>
            <param name="dataSourceKey"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.IConcurrencyStrategy.SetNewConcurrencyValue(IdeaBlade.EntityModel.DataEntityProperty,System.Object)">
            <summary>
            Called when the new value for a concurrency field is needed.
            </summary>
            <param name="property">Property information</param>
            <param name="entity">Entity on which to set the new value </param>
        </member>
        <member name="M:IdeaBlade.EntityModel.DefaultConcurrencyValueSetter.IsApplicable(IdeaBlade.EntityModel.IDataSourceKey)">
            <summary>
            Override to determine whether the specified <see cref="T:IdeaBlade.EntityModel.IDataSourceKey"/>
            is applicable for this strategy.
            </summary>
            <param name="dataSourceKey"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.DefaultConcurrencyValueSetter.SetNewConcurrencyValue(IdeaBlade.EntityModel.DataEntityProperty,System.Object)">
            <summary>
            Override to set the new value of a concurrency field.
            </summary>
            <param name="property"></param>
            <param name="entity"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityManager">
             <summary>
             Management class for all high-level retrieval, caching and persistence operations on entities. 
             <seealso cref="T:IdeaBlade.EntityModel.Server.EntityServer"/>
             <seealso cref="T:IdeaBlade.EntityModel.IEntity"/>
             <seealso cref="T:IdeaBlade.EntityModel.EntityQuery"/>
             <seealso cref="T:IdeaBlade.EntityModel.PassthruEsqlQuery"/>
             <seealso cref="T:IdeaBlade.EntityModel.StoredProcQuery"/>
             </summary>
             <remarks>
             The <b>EntityManager</b> is responsible for communicating with an <see cref="T:IdeaBlade.EntityModel.Server.EntityServer"/>
             to retrieve entities from and persist entities to their backend data sources, 
             managing entities in its cache, creating new entities, ensuring entity security, and persisting its
             cache to local storage to facilitate disconnected access.
            <para>
             A single EntityManager can manage entities backed by any number of data sources.  It caches entities and queries,
             both to improve performance and to support offline operation of applications.  Entities remain in the cache 
             until the application terminates or they are explicitly removed.  
             </para>
             <para>
             Use <see cref="M:IdeaBlade.EntityModel.EntityManager.Login(IdeaBlade.EntityModel.ILoginCredential)">Login</see> and <see cref="M:IdeaBlade.EntityModel.EntityManager.Logout"/> to validate a user's credentials and
             provide session-level security to the <see cref="T:IdeaBlade.EntityModel.Server.EntityServer"/>.  
             You'll need to implement <see cref="T:IdeaBlade.EntityModel.IEntityLoginManager"/> to perform
             this validation.  If login security is required, be sure to call <b>Login</b> prior to performing any other
             EntityManager actions.
             </para>
            <para>
             Use <see cref="M:IdeaBlade.EntityModel.EntityManager.Connect"/> and <see cref="M:IdeaBlade.EntityModel.EntityManager.Disconnect"/> to explicitly manage connection state to the 
             EntityServer.  Use the <see cref="E:IdeaBlade.EntityModel.EntityManager.EntityServerError"/> delegate to set up an error handler to 
             catch connection and other EntityServer problems.  
             </para>
             <para>
             Use any of the <see cref="M:IdeaBlade.EntityModel.EntityManager.ExecuteQuery(IdeaBlade.EntityModel.IEntityQuery)">ExecuteQuery</see> overloads to explicitly retrieve entities from 
             either a backend data source or the EntityManager's cache.  When using an <see cref="T:IdeaBlade.EntityModel.EntityQuery"/>
             or any query implementing <see cref="T:System.Collections.IEnumerable"/> you can also take advantage of "deferred
             execution" and implicitly retrieve the requested results by enumerating over the query or calling
             either <b>ToList()</b> or <b>ToArray()</b>.  For more information on deferred vs. immediate execution
             and LINQ queries, see the <b>Language-Integrated Query</b> topic in the Visual Studio documentation.
             </para>
             <para>
             Use <see cref="M:IdeaBlade.EntityModel.EntityManager.CreateEntity``1">CreateEntity</see> or its overloads to create new entity instances, and 
             <see cref="M:IdeaBlade.EntityModel.EntityManager.AddEntity(System.Object)">AddEntity</see> to add the new entity to the entity cache.
             Use one of the <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges">SaveChanges</see> overloads to persist changed entities to a backend data source.
             </para>
             <para>Use <see cref="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(String)">CacheStateManager.SaveCacheState</see> to save cached data and the state of the EntityManager 
             to the local file system.  Use <see cref="M:IdeaBlade.EntityModel.CacheStateManager.RestoreCacheState(String)">CacheStateManager.RestoreCacheState</see>
             to restore from the saved file.  Use <see cref="M:IdeaBlade.EntityModel.EntityManager.ImportEntities(System.Collections.IEnumerable,IdeaBlade.EntityModel.MergeStrategy)"/> to move entities between EntityManagers.
             </para>
             <para>
             Corresponding asynchronous methods are available for any operation which may access the EntityServer.  See
             <see cref="M:IdeaBlade.EntityModel.EntityManager.ConnectAsync"/>, <see cref="M:IdeaBlade.EntityModel.EntityManager.LoginAsync(IdeaBlade.EntityModel.ILoginCredential,System.Action{IdeaBlade.EntityModel.LoginOperation},System.Object)"/>, <see cref="M:IdeaBlade.EntityModel.EntityManager.ExecuteQueryAsync(IdeaBlade.EntityModel.IEntityQuery,System.Action{IdeaBlade.EntityModel.EntityQueryOperation},System.Object)"/>, <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChangesAsync"/> and
             <see cref="M:IdeaBlade.EntityModel.EntityManager.InvokeServerMethodAsync(IdeaBlade.EntityModel.ServerMethodDelegate,System.Object[])"/>.
             </para>
             <para><b>Note:</b> The EntityManager is not thread-safe.</para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.#ctor(System.Boolean,System.String,IdeaBlade.EntityModel.EntityServiceOption,System.String)">
            <summary>
            Initialize a new instance of the EntityManager class for the specified data source key extension 
            and optionally connect to the EntityServer, with the option to use local or distributed data sources.
            </summary>
            <param name="shouldConnect">True if a connection to the EntityServer should be made.</param>
            <param name="dataSourceExtension">The DataSourceKey extension to search for in IdeaBlade configuration file.</param>
            <param name="entityServiceOption">Determines whether to use local or distributed data sources.</param>
            <param name="compositionContextName">Optional name of the CompositionContext to use for MEF composition.</param>
            <remarks>
            You can use the <paramref name="dataSourceExtension"/> to determine the run-time data source key(s) to be
            used.  Every EntityManager (and EntityServer) is associated with a data source extension.  By default, if an
            extension is not specified, then an "empty" extension is used.  See the "Data Source Keys, DataSourceKeyResolvers, and Data Source Extensions"
            topic in the DevForce Resource Center for more information on data source extensions. 
            The use of different data source extensions can be especially beneficial as you move your application between
            development, test and production environments, and for other situations in which the data source to be accessed 
            will be determined at run time.  The resolved <b>DataSourceKey</b>(s) must either be specified in the
            <b>IdeaBlade configuration</b> file or through a custom implementation of <see cref="T:IdeaBlade.EntityModel.IDataSourceKeyResolver"/>.
            <para>
            You can also choose whether a connection to the <see cref="T:IdeaBlade.EntityModel.Server.EntityServer"/>
            should be made now.  If <paramref name="shouldConnect"/> is <c>true</c> you will not be able to catch
            any <see cref="T:IdeaBlade.EntityModel.EntityServerException"/> thrown due to connection problems in an
            <see cref="E:IdeaBlade.EntityModel.EntityManager.EntityServerError"/> handler since the handler will not yet be set; you
            should instead wrap the call in a try/catch. If <paramref name="shouldConnect"/> is <c>false</c>
            then you will need to call the <see cref="M:IdeaBlade.EntityModel.EntityManager.Connect"/> method when you are ready to begin communicating with the 
            EntityServer.
            </para>
            <para>
            Use the <paramref name="entityServiceOption"/> to explicitly specify whether you will be using local or
            distributed data sources.  By default the <see cref="P:IdeaBlade.Core.IdeaBladeConfig.ObjectServer">ObjectServer</see> element in the IdeaBlade configuration file  
            determines this, but if you need to use both local and distributed data sources within the same application you'll use
            the EntityServiceOption to indicate what the EntityManager will use.  See the "Access Both Local and Remote Data Sources 
            In the Same N-tier Application" topic in the DevForce Resource Center for more information.
            </para>
            <para>
            You can also provide the name of the <see cref="P:IdeaBlade.EntityModel.EntityManager.CompositionContext"/> to be used to compose parts for runtime extensibility.
            By default if you don't provide a name the "default" context is used.  See the <see cref="P:IdeaBlade.EntityModel.EntityManager.CompositionContext"/> for more 
            information and sample usage.
            </para>
            <para>
            No connection to data sources is made during EntityManager initialization.
            </para>
            <para>
            An <see cref="E:IdeaBlade.EntityModel.EntityManager.EntityManagerCreated"/> event is fired upon creation.
            </para>
            </remarks>
            <example><code lang="C#">
    private bool Initialize() {
      string runTimeEnv;
#if TEST
      runTimeEnv = "Test";
#else
      runTimeEnv = "Prod";
#endif

      // Initialize an EntityManager for the given data source extension, and set up an error handler.
      IdeaBladeTest1Manager mgr = new IdeaBladeTest1Manager(false, runTimeEnv);
      mgr.EntityServerError += EntityServerErrorHandler;

      // Explicitly connect to the BOS now.
      // Note that no data source connection is made until entities are accessed.
      try {
        mgr.Connect();
      } catch (EntityServerException ese) {
        MessageBox.Show(ese.Message, "EntityServerException");
      } catch (Exception e) {
        MessageBox.Show(e.Message, "Exception");
      }
      return mgr.IsConnected;
    }
    private void EntityServerErrorHandler(object pSender, EntityServerErrorEventArgs e) {
      // Always a good idea to log all exception info.
      Exception ex = e.Exception;
      while (ex != null) {
        TraceFns.WriteLine(ex.ToString());
        ex = ex.InnerException;
      }
      MessageBox.Show("Trying to handle error");
      // Leave e.Handled = false if the Error should be thrown back to the calling code
      e.Handled = true;         // exception will not be thrown
    }
	</code></example>
            <exception cref="T:IdeaBlade.Core.IdeaBladeException">Thrown for miscellaneous initialization failures</exception>
            <exception cref="T:IdeaBlade.EntityModel.EntityServerException">Thrown for connection failures</exception>
            <exception cref="T:System.ArgumentException">Thrown in a Silverlight application when BOS is not specified</exception>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.#ctor(IdeaBlade.EntityModel.EntityManagerContext)">
            <summary>
            Initialize a new instance of the EntityManager class.
            </summary>
            <param name="context">EntityManager constructor parameters</param>
            <remarks>
            No connection to data sources is made during EntityManager initialization.
            <para>
            An <see cref="E:IdeaBlade.EntityModel.EntityManager.EntityManagerCreated"/> event is fired upon creation.
            </para>
            </remarks>
            <example><code lang="C#">
    private bool Initialize() {
      string runTimeEnv;
#if TEST
      runTimeEnv = "Test";
#else
      runTimeEnv = "Prod";
#endif

      // Initialize an EntityManager for the given data source extension, and set up an error handler.
      IdeaBladeTest1Manager mgr = new IdeaBladeTest1Manager(false, runTimeEnv);
      mgr.EntityServerError += EntityServerErrorHandler;

      // Explicitly connect to the BOS now.
      // Note that no data source connection is made until entities are accessed.
      try {
        mgr.Connect();
      } catch (EntityServerException ese) {
        MessageBox.Show(ese.Message, "EntityServerException");
      } catch (Exception e) {
        MessageBox.Show(e.Message, "Exception");
      }
      return mgr.IsConnected;
    }
    private void EntityServerErrorHandler(object pSender, EntityServerErrorEventArgs e) {
      // Always a good idea to log all exception info.
      Exception ex = e.Exception;
      while (ex != null) {
        TraceFns.WriteLine(ex.ToString());
        ex = ex.InnerException;
      }
      MessageBox.Show("Trying to handle error");
      // Leave e.Handled = false if the Error should be thrown back to the calling code
      e.Handled = true;         // exception will not be thrown
    }
	</code></example>
            <exception cref="T:IdeaBlade.Core.IdeaBladeException">Thrown for miscellaneous initialization failures</exception>
            <exception cref="T:IdeaBlade.EntityModel.EntityServerException">Thrown for connection failures</exception>
            <exception cref="T:System.ArgumentException">Thrown in a Silverlight application when BOS is not specified</exception>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.#ctor(IdeaBlade.EntityModel.EntityManager,System.Boolean,System.String,IdeaBlade.EntityModel.EntityServiceOption,System.String)">
             <summary>
             Initialize a new instance of the EntityManager class using the credentials and settings from another EntityManager,
             but with the connection state, data source extension and options specified.
             </summary>
             <param name="entityManager">EntityManager to copy settings from</param>
             <param name="shouldConnect">True if a connection to the EntityServer should be made.</param>
             <param name="dataSourceExtension">The DataSourceKey extension to search for in IdeaBlade configuration file.</param>
             <param name="entityServiceOption">Determines whether to use local or distributed data sources.</param>
             <param name="compositionContextName">Optional name of the CompositionContext to use for MEF composition.</param>
             <remarks>
             This copy constructor will create a new "empty" (no data) EntityManager with the same settings and 
             defaults as the specified EntityManager.  The connection state, data source extension, and option for
             distributed or local data sources specified here will override the values from the source EntityManager.
             The new EntityManager will be "logged in" to the EntityServer with the credentials already provided in the passed EntityManager.
             <para>
             An <see cref="E:IdeaBlade.EntityModel.EntityManager.EntityManagerCreated"/> event is fired upon creation.
             </para>
            </remarks>
             <exception cref="T:System.ArgumentNullException"><paramref name="entityManager"/> is null</exception>
             <exception cref="T:IdeaBlade.Core.IdeaBladeException">Thrown for miscellaneous initialization failures</exception>
             <exception cref="T:IdeaBlade.EntityModel.EntityServerException">Thrown for connection failures</exception>
             <exception cref="T:System.ArgumentException">Thrown in a Silverlight application when BOS is not specified</exception>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.#ctor(IdeaBlade.EntityModel.EntityManager,IdeaBlade.EntityModel.EntityManagerContext)">
             <summary>
             Initialize a new instance of the EntityManager class using the credentials and settings from another EntityManager.
             </summary>
             <param name="entityManager">EntityManager to copy settings from</param>
             <param name="entityManagerContext">EntityManager constructor parameters</param>
             <remarks>
             This copy constructor will create a new "empty" (no data) EntityManager with the same settings, 
             defaults and connection status as the specified EntityManager.  The new EntityManager will be "logged in" to
             the EntityServer with the credentials already provided in the passed EntityManager.
             <para>
             The VerifierEngine associated with this new EntityManager is determined by whether this ctor is called on the same thread 
             as the entityManager passed in.  If so, then the two entityManagers will share a single VerifierEngine, 
             if not, a new VerifierEngine will be created for this entityManager.  This behavior is intended to avoid
             threading issues because VeriferEngines ( like EntityManagers) are not thread safe.
             </para><para>
             Other than the login credentials and connection state, the settings copied from the source EntityManager are
             <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultQueryStrategy"/>, <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultSaveOptions"/>, <see cref="P:IdeaBlade.EntityModel.EntityManager.DataSourceExtension"/>,
             <see cref="P:IdeaBlade.EntityModel.EntityManager.EntityServiceOption"/> and <see cref="P:IdeaBlade.EntityModel.EntityManager.VerifierEngine"/>.
             </para>
             <para>
             An <see cref="E:IdeaBlade.EntityModel.EntityManager.EntityManagerCreated"/> event is fired upon creation.
             </para>
            </remarks>
             <exception cref="T:System.ArgumentNullException"><paramref name="entityManager"/> is null</exception>
             <exception cref="T:IdeaBlade.Core.IdeaBladeException">Thrown for miscellaneous initialization failures</exception>
             <exception cref="T:IdeaBlade.EntityModel.EntityServerException">Thrown for connection failures</exception>
             <exception cref="T:System.ArgumentException">Thrown in a Silverlight application when BOS is not specified</exception>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.#ctor(IdeaBlade.EntityModel.IEntityServerContract,IdeaBlade.EntityModel.Security.IAuthenticationContext,IdeaBlade.EntityModel.DataSourceResolver)">
            <summary>
            For internal use only. Called from within an EntityServer to create a server-local EntityManager. 
            </summary>
            <param name="server"></param>
            <param name="ac"></param>
            <param name="dataSourceResolver"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.#ctor(IdeaBlade.EntityModel.IEntityServerContract,IdeaBlade.EntityModel.Security.IAuthenticationContext,IdeaBlade.EntityModel.SaveWorkState)">
            <summary>
            For internal use only. Called from within an EntityServer to create a server-local EntityManager. 
            </summary>
            <param name="server"></param>
            <param name="ac"></param>
            <param name="workState"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.Login(IdeaBlade.EntityModel.ILoginCredential)">
            <summary>
            Used to validate a user's credentials.
            <seealso cref="T:IdeaBlade.EntityModel.Server.EntityServer"/>
            <seealso cref="T:IdeaBlade.EntityModel.IEntityLoginManager"/>
            </summary>
            <param name="credential">Login credentials</param>
            <returns>A boolean indicating success or failure.</returns>
            <remarks>
            <b>Login</b> may be used to validate a user's credentials and provide more secure communications between
            client and server tiers.  To use this method you should also implement 
            the <see cref="T:IdeaBlade.EntityModel.IEntityLoginManager"/> interface, which will be called by the <see cref="T:IdeaBlade.EntityModel.Server.EntityServer"/>
            to perform validation.  If using ASP.NET security, you can use the DevForce-provided <b>AspAuthenticatingLoginManager</b> to handle login
            processing.  
            <para>
            You can pass a null (Nothing in Visual Basic) in place of an ILoginCredential object.  Null credentials can indicate either that the user
            is logging in as a guest or anonymous user, or when using the <b>AspAuthenticatingLoginManager</b> that the current authenticated user
            should be loaded.  When using ASP.NET the current authenticated user is one authenticated via Windows authentication, or is the user already logged
            in because of either a persistent cookie or a login performed elsewhere in the ASP.NET application.  If you are not using the
            AspAuthenticationLoginManager then your implementation of <see cref="T:IdeaBlade.EntityModel.IEntityLoginManager"/> should handle a null credential
            if your client application can provide one.  
            </para>
            <para>
            The <see cref="P:IdeaBlade.Core.Configuration.ServerSettingsElement.AllowAnonymousLogin">AllowAnonymousLogin</see> flag in the 
            IdeaBlade configuration determines whether "anonymous" users can login to your application.  Anonymous users are ones who have
            not supplied credentials and who also cannot be authenticated by other means, such as ASP.NET authentication.   
            </para>
            <para>
            Call <b>Login</b> to validate the user after calling <see cref="M:IdeaBlade.EntityModel.EntityManager.Connect"/> and before calling any other EntityManager functions.
            This call does not cause a connection to any backend data source, nor does it maintain an open conversation with the EntityServer.
            </para>
            <para>
            If <see cref="P:IdeaBlade.EntityModel.EntityManagerOptions.UseDefaultAuthenticationContext"/> is true, the <b>Login</b> call will set the <see cref="P:IdeaBlade.EntityModel.Security.Authenticator.DefaultAuthenticationContext"/>,
            otherwise the <see cref="P:IdeaBlade.EntityModel.EntityManager.AuthenticationContext"/> is set.
            </para>
            <para>
            Credentials are passed in clear text.  Use a secure channel (such as SSL) or provide your own encryption if secure
            communications are necessary.
            </para>
            <para>
            Note that a <see cref="T:IdeaBlade.EntityModel.LoginException"/> will be thrown for bad credentials; false is not returned from this method. 
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Connect() must be called before <b>Login</b></exception>
            <exception cref="T:IdeaBlade.EntityModel.LoginException">Login failure</exception>
            <example><code lang="C#">
// Sample showing Login, and implementation of IEntityLoginManager

// Create an EntityManager - this will also do an implicit Connect().
EntityManager mgr = new DomainModelEntityManager();

// create a LoginCredential
string userName = "demo";
string password = "demo";
string domain = "Earth";
LoginCredential credential = new LoginCredential(userName, password, domain);

MessageBox.Show("Current user: " + System.Threading.Thread.CurrentPrincipal.Identity.Name);

try {
   // "Login" to EntityServer 
   mgr.Login(credential);

   // note change in current principal
   MessageBox.Show("Current user: " + System.Threading.Thread.CurrentPrincipal.Identity.Name);
} catch (LoginException le) {
   MessageBox.Show(le.Message);
} catch (EntityServerException ese) {
   MessageBox.Show("Login failed: " + ese.Message);
} catch (Exception ex) {
   MessageBox.Show(ex.Message);
}

//..... Retrieve data, etc.

// Now logout
mgr.Logout();


// Sample LoginManager class
public class LoginManager : IEntityLoginManager {
   public LoginManager() {}

   public IPrincipal Login(ILoginCredential pCredential, EntityManager pManager) {
      // note that Login runs on server-side -- this will return false
      bool isClient = pManager.IsClient;

      // You would normally validate the credentials, eg against a database, AD, etc, and then
      // build and return an object implementing IPrincipal.
      if (pCredential.Domain != "Earth") {
        throw new LoginException(LoginExceptionType.InvalidUserName, pCredential.Domain, pCredential.UserName);
      }

      // We'll just return a GenericPrincipal
      GenericIdentity identity  = new GenericIdentity(pCredential.UserName);
      return new GenericPrincipal(identity, new String[] { "user" });
   }
   
   public void Logout(IPrincipal principal, EntityManager entityManager) {
      // Use if logout processing is needed - eg, release resources, audit user logout
   }
}
</code></example><example><code lang="VB">
' Sample showing Login, and implementation of IEntityLoginManager

' Create an EntityManager - this will also do an implicit Connect().
Dim mgr As EntityManager = new DomainModelEntityManager();

' create a LoginCredential
Dim userName As String = "demo"
Dim password As String = "demo"
Dim domain As String = "Earth"
Dim credential As New LoginCredential(userName, password, domain)

MessageBox.Show(("Current user: " + System.Threading.Thread.CurrentPrincipal.Identity.Name))

Try
   ' "Login" to EntityServer 
   mgr.Login(credential)
   
   ' note change in current principal
   MessageBox.Show(("Current user: " + System.Threading.Thread.CurrentPrincipal.Identity.Name))
Catch le As LoginException
   MessageBox.Show(le.Message)
Catch pse As EntityServerException
   MessageBox.Show("Login failed: " + pse.Message)
Catch ex As Exception 
   MessageBox.Show(ex.Message)
End Try

'..... Retrieve data, etc.

' Now logout
mgr.Logout()

Public Class LoginManager : Implements IEntityLoginManager 

    Public Sub New()
    End Sub 

    Public Function Login(ByVal pCredential As ILoginCredential, ByVal pManager As EntityManager) As IPrincipal _
    Implements IEntityLoginManager.Login
        ' note that Login runs on server-side -- this will return false
        Dim isClient As Boolean = pManager.IsClient

        ' You would normally validate the credentials, eg against a database, and then
        ' build and return an object implementing IPrincipal.
        If pCredential.Domain &lt;&gt; "Earth" Then
            Throw New LoginException(LoginExceptionType.InvalidUserName, pCredential.Domain, pCredential.UserName)
        End If

        ' We'll just return a GenericPrincipal
        Dim identity As New GenericIdentity(pCredential.UserName)
        Return New GenericPrincipal(identity, New [String]() {"user"})
    End Function 
    
    Public Sub Logout(ByVal principal As IPrincipal, ByVal entityManager As EntityManager) 
      '' Use if logout processing is needed - eg, release resources, audit user logout
    End Sub

End Class 
	</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.Login(System.Guid)">
            <summary>
            Used to login to an Entity Server based on a previously established session key. 
            </summary>
            <param name="sessionKey"></param>
            <returns></returns>
            <exception cref="T:IdeaBlade.EntityModel.LoginException">Invalid session key</exception>
            <remarks>
            Use the <see cref="P:IdeaBlade.EntityModel.EntityManager.SessionKey"/> returned from a user session established previously.
            This login is most useful in ASP.NET applications
            where an EntityManager is constructed only for the lifetime of a request.  Using an 
            existing <see cref="P:IdeaBlade.EntityModel.EntityManager.SessionKey"/> allows you to recreate the user session from a lightweight
            token.
            <para>
            User sessions will by default timeout after 30 minutes of inactivity.  You will receive
            a <see cref="T:IdeaBlade.EntityModel.LoginException"/> if the session has timed out and you attempt to login with
            the session key.  The timeout value can be modified via the <see cref="P:IdeaBlade.Core.Configuration.ServerSettingsElement.UserSessionTimeout">UserSessionTimeout</see>
            setting.
            </para>
            <para>
            Use of this method is not recommended for environments using a load balanced Entity Server.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.Logout">
            <summary>
            Logs the user off, discarding session information.
            <seealso cref="P:IdeaBlade.EntityModel.EntityManager.EntityServer"/>
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.Login(IdeaBlade.EntityModel.ILoginCredential)"/>
            </summary>
            <remarks>
            If the <see cref="P:IdeaBlade.EntityModel.EntityManager.AuthenticationContext"/> for this EntityManager is shared by other EntityManagers, they will be logged off also.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.LinkForAuthentication(IdeaBlade.EntityModel.EntityManager)">
            <summary>
            Set authentication credentials on this EntityManager.
            </summary>
            <param name="sourceManager">The EntityManager whose credentials will be used</param>
            <exception cref="T:System.InvalidOperationException">Thrown if linkage cannot occur becaue the source EntityManager is not logged in.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the source EntityManager parameter is null</exception>
            <remarks>
            <b>LinkForAuthentication</b> will set the <see cref="P:IdeaBlade.EntityModel.EntityManager.AuthenticationContext"/> of this EntityManager to that of the source EntityManager.
            When using this method a <see cref="M:IdeaBlade.EntityModel.EntityManager.Login(IdeaBlade.EntityModel.ILoginCredential)"/> call is not required.  Using <b>LinkForAuthentication</b>
            performs the same authentication function as the EntityManager copy constructors, without also copying other settings.
            <para>
            Note that your <see cref="M:IdeaBlade.EntityModel.IEntityLoginManager.Login(IdeaBlade.EntityModel.ILoginCredential,IdeaBlade.EntityModel.EntityManager)"/> method may still be called when you link EntityManagers.  This will occur if different
            EntityServers are used by these EntityManagers.
            </para>
            <para>
            The "link" causes the EntityManagers to share an <see cref="P:IdeaBlade.EntityModel.EntityManager.AuthenticationContext"/>.  When that context is logged out, from any EntityManager using
            it via a <see cref="M:IdeaBlade.EntityModel.EntityManager.Logout"/> call, or from the <see cref="M:IdeaBlade.EntityModel.Security.Authenticator.Logout(IdeaBlade.EntityModel.Security.IAuthenticationContext)"/> method, all EntityManagers using the context will be logged out.
            You can link any number of EntityManagers in your application.  
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.LoginAsync(IdeaBlade.EntityModel.ILoginCredential,System.Action{IdeaBlade.EntityModel.LoginOperation},System.Object)">
            <summary>
            Perform an asynchronous login operation to validate the user's credentials.
            </summary>
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.Login(IdeaBlade.EntityModel.ILoginCredential)"/>
            <param name="credential">Login credentials</param>
            <param name="userCallback">Callback invoked when asynchronous operation completes</param>
            <param name="userState">Token identifying the asynchronous operation</param>
            <remarks>
            Provide a <paramref name="userCallback"/> if you want to be notified when the operation completes.
            Use the <paramref name="userState"/> to uniquely identify this call.  
            <para>
            <b>Login</b> may be used to validate a user's credentials and provide more secure communications between
            client and server tiers.  In a Silverlight application, you can integrate with ASP.NET authentication features
            when the <see cref="P:IdeaBlade.Core.Configuration.ServerSettingsElement.UseAspNetSecurityServices">UseAspNetSecurityServices</see> option is enabled.
            </para>
            <para>
            If <see cref="P:IdeaBlade.EntityModel.EntityManagerOptions.UseDefaultAuthenticationContext"/> is true, the <b>LoginAsync</b> call will set the <see cref="P:IdeaBlade.EntityModel.Security.Authenticator.DefaultAuthenticationContext"/>,
            otherwise the <see cref="P:IdeaBlade.EntityModel.EntityManager.AuthenticationContext"/> is set.
            </para>
            <para>
            Credentials are passed in clear text.  Use a secure channel (such as SSL) or provide your own encryption if secure
            communications are necessary.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Call Connect before doing a Login.</exception>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IdeaBlade#EntityModel#IEntityManagerAsync#BeginLogin(IdeaBlade.EntityModel.ILoginCredential,System.AsyncCallback,System.Object)">
            <summary>
            Begin an asynchronous login operation to validate the user's credentials.
            </summary>
            <param name="credential">Login credentials</param>
            <param name="asyncCallback">Callback invoked when the asynchronous operation completes</param>
            <param name="userState">Token identifying the asynchronous operation</param>
            <returns>AsyncResult holding the status of the asynchronous operation</returns>
            <remarks>
            Call the <see cref="M:IdeaBlade.EntityModel.IEntityManagerAsync.EndLogin(System.IAsyncResult)"/> method with the <see cref="T:System.IAsyncResult"/> returned
            to complete the asynchronous login operation and retrieve the result.  
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IdeaBlade#EntityModel#IEntityManagerAsync#EndLogin(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous login operation to complete and returns the result.
            </summary>
            <param name="result">AsyncResult returned by BeginLogin</param>
            <returns>A SessionBundle identifying the user's session.</returns>
            <remarks>
            <b>EndLogin</b> will block if the operation has not completed.  To avoid this you should call
            <b>EndLogin</b> from within the AsyncCallback method passed in the <b>BeginLogin</b> call.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.LogoutAsync(System.Action{IdeaBlade.EntityModel.BaseOperation},System.Object)">
            <summary>
            Perform an asynchronous logout operation.
            </summary>
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.Logout"/>
            <param name="userCallback">Callback invoked when asynchronous operation completes</param>
            <param name="userState">Token identifying the asynchronous operation</param>
            <remarks>
            Provide a <paramref name="userCallback"/> if you want to be notified when the operation completes.
            Use the <paramref name="userState"/> to uniquely identify this call.  
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IdeaBlade#EntityModel#IEntityManagerAsync#BeginLogout(System.AsyncCallback,System.Object)">
            <summary>
            Begin an asynchronous logout operation.
            </summary>
            <param name="asyncCallback">Callback invoked when the asynchronous operation completes</param>
            <param name="userState">Token identifying the asynchronous operation</param>
            <returns>AsyncResult holding the status of the asynchronous operation</returns>
            <remarks>
            Call the <see cref="M:IdeaBlade.EntityModel.IEntityManagerAsync.EndLogout(System.IAsyncResult)"/> method with the <see cref="T:System.IAsyncResult"/> returned
            to complete the asynchronous logout operation.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IdeaBlade#EntityModel#IEntityManagerAsync#EndLogout(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous logout operation to complete.
            </summary>
            <param name="result">AsyncResult returned by BeginLogin</param>
            <remarks>
            <b>EndLogout</b> will block if the operation has not completed.  To avoid this you should call
            <b>EndLogout</b> from within the AsyncCallback method passed in the <b>BeginLogout</b> call.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.SaveChanges">
             <summary>Persists all changed <see cref="T:IdeaBlade.EntityModel.IEntity"/> objects within the EntityManager cache to the 
             backend data source using the <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultSaveOptions"/>.
            </summary>
             <seealso cref="T:IdeaBlade.EntityModel.SaveOptions"/>
             <seealso cref="T:IdeaBlade.EntityModel.SaveResult"/>
             <returns>A <see cref="T:IdeaBlade.EntityModel.SaveResult"/> object that contains a boolean indicating the result of the save 
             as well as any errors encountered during the save.      
             </returns>
             <remarks>
             Persists all additions, modifications and deletions within the EntityManager cache to the 
             backend data source. Upon success, <see cref="T:System.Data.DataSet.AcceptChanges"/> will have been called.
             <para>
             A <see cref="T:IdeaBlade.EntityModel.SaveResult"/> is always returned if no errors occurred during save processing, if processing 
             was cancelled, or if the error was handled by the <see cref="E:IdeaBlade.EntityModel.EntityManager.EntityServerError"/> event handler.
             </para>
             </remarks>
             <exception cref="T:IdeaBlade.EntityModel.EntityManagerSaveException"></exception>
             <example><code lang="C#">
    <![CDATA[
private void SaveSample() {
  DomainModelEntityManager mgr = new DomainModelEntityManager();
  
  // Retrieve a single Order and its Customer
  OrderSummary order = mgr.ExecuteQuery&lt;OrderSummary&gt;(new entityKey(typeof(OrderSummary), 1));
  Customer cust = order.Customer;

  // Change the address in both Order and Customer
  order.ShipAddress = "100 Broadway";
  cust.Address = "100 Broadway";

  // Now save -- using a save list and SaveOptions.
  List<Entity> changedEntities = new List<Entity>();
  changedEntities.Add(order);
  changedEntities.Add(cust);
  SaveOptions options = new SaveOptions();

  SaveResult sr = mgr.SaveChanges(changedEntities, options);
  if (sr.Ok) {
    MessageBox.Show("Changes saved to database.");
  } 
}
]]>
</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.SaveChanges(IdeaBlade.EntityModel.SaveOptions)">
            <summary>Persists all changed <see cref="T:IdeaBlade.EntityModel.IEntity"/> objects within the EntityManager cache to the 
            backend data source using the <see cref="T:IdeaBlade.EntityModel.SaveOptions"/> specified.
            <seealso cref="T:IdeaBlade.EntityModel.SaveOptions"/>
            <seealso cref="T:IdeaBlade.EntityModel.SaveResult"/>
            </summary>
            <param name="saveOptions">Options controlling save processing</param> 
            <returns>A <see cref="T:IdeaBlade.EntityModel.SaveResult"/> object that contains a boolean indicating the result of the save 
            as well as any errors encountered during the save.      
            </returns>
            <remarks>
            Persists all additions, modifications and deletions within the EntityManager cache to the 
            backend data source. Upon success, <see cref="T:System.Data.DataSet.AcceptChanges"/> will have been called.
            <para>
            A <see cref="T:IdeaBlade.EntityModel.SaveResult"/> is always returned if no errors occurred during save processing, if processing 
            was cancelled, or if the error was handled by the <see cref="E:IdeaBlade.EntityModel.EntityManager.EntityServerError"/> event handler.
            </para>
            </remarks>
            <exception cref="T:IdeaBlade.EntityModel.EntityManagerSaveException"></exception>
            <example><code lang="C#">
    <![CDATA[
private void SaveSample() {
  DomainModelEntityManager mgr = new DomainModelEntityManager();
  
  // Retrieve a single Order and its Customer
  OrderSummary order = mgr.ExecuteQuery&lt;OrderSummary&gt;(new entityKey(typeof(OrderSummary), 1));
  Customer cust = order.Customer;

  // Change the address in both Order and Customer
  order.ShipAddress = "100 Broadway";
  cust.Address = "100 Broadway";

  // Now save -- using a save list and SaveOptions.
  List<Entity> changedEntities = new List<Entity>();
  changedEntities.Add(order);
  changedEntities.Add(cust);
  SaveOptions options = new SaveOptions();

  SaveResult sr = mgr.SaveChanges(changedEntities, options);
  if (sr.Ok) {
    MessageBox.Show("Changes saved to database.");
  } 
}
]]>
</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.SaveChanges(System.Collections.IEnumerable,IdeaBlade.EntityModel.SaveOptions)">
            <summary>
            Persists one or more selected Entities within the EntityManager cache to the 
            backend data source using the <see cref="T:IdeaBlade.EntityModel.SaveOptions"/> specified.
            <seealso cref="T:IdeaBlade.EntityModel.SaveOptions"/>
            <seealso cref="T:IdeaBlade.EntityModel.SaveResult"/>
            </summary>
            <param name="entities">List of <see cref="T:IdeaBlade.EntityModel.IEntity"/> objects to be persisted</param>
            <param name="saveOptions">Options controlling save processing</param>
            <returns>A SaveResult object that contains a boolean indicating the result of the save 
            as well as any errors encountered during the save.   
            </returns>
            <remarks>
            Persists the specified entities to the backend data source. Upon success, 
            <see cref="M:IdeaBlade.EntityModel.EntityManager.AcceptChanges"/> will have been called and all entities will return to an Unchanged state.
            <para>
            A <see cref="T:IdeaBlade.EntityModel.SaveResult"/> is always returned if no errors occurred during save processing, if processing 
            was cancelled, or if the error was handled by the <see cref="E:IdeaBlade.EntityModel.EntityManager.EntityServerError"/> event handler.
            </para>
            <para>
            If you are saving only a single entity, an easy way of calling this method 
            is to create a new one-item array, similar to the following example:
            <code>
            C#:  pm.SaveChanges(new Employee[] { myEmployee });
            VB:  pm.SaveChanges(New Employee() {myEmployee})
            </code>
            </para>
            </remarks>
            <exception cref="T:IdeaBlade.EntityModel.EntityManagerSaveException"></exception>
            <example><code lang="C#">
    <![CDATA[
private void SaveSample() {
  DomainModelEntityManager mgr = new DomainModelEntityManager();
  
  // Retrieve a single Order and its Customer
  OrderSummary order = mgr.ExecuteQuery&lt;OrderSummary&gt;(new entityKey(typeof(OrderSummary), 1));
  Customer cust = order.Customer;

  // Change the address in both Order and Customer
  order.ShipAddress = "100 Broadway";
  cust.Address = "100 Broadway";

  // Now save -- using a save list and SaveOptions.
  List<Entity> changedEntities = new List<Entity>();
  changedEntities.Add(order);
  changedEntities.Add(cust);
  SaveOptions options = new SaveOptions();

  SaveResult sr = mgr.SaveChanges(changedEntities, options);
  if (sr.Ok) {
    MessageBox.Show("Changes saved to database.");
  } 
}
]]>
</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.SaveChangesAsync">
            <summary>
            Perform an asynchronous <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges"/> operation.
            </summary>
            <example>
      <code lang="C#">
        <![CDATA[
    public void AsyncSaveSimple() {
      DomainModelEntityManager mgr = new DomainModelEntityManager();

      Customer c1 = new Customer() { CompanyName = "Toys R Us" };
      mgr.AddEntity(c1);
      Customer c2 = new Customer() { CompanyName = "Apple" };
      mgr.AddEntity(c2);

      // Save all modified entities using default SaveOptions.
      // Use a lambda expression which takes the EntitySaveOperation.
      // The userstate token is left null since it's optional.
      mgr.SaveChangesAsync(op => {
        SaveResult sr = op.SaveResult;
        MessageBox.Show(sr.Ok.ToString());
      }, null);
    }
]]>
</code>
</example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.SaveChangesAsync(System.Action{IdeaBlade.EntityModel.EntitySaveOperation},System.Object)">
            <summary>
            Perform an asynchronous <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges"/> operation.
            </summary>
            <param name="userCallback">Callback invoked when asynchronous operation completes</param>
            <param name="userState">Token identifying the asynchronous operation</param>
            <remarks>
            Provide a <paramref name="userCallback"/> if you want to be notified when the operation completes.
            The <see cref="T:IdeaBlade.EntityModel.EntitySaveOperation"/> passed to the <paramref name="userCallback"/> will contain
            the results of the save operation.
            Use the <paramref name="userState"/> to uniquely identify this call.  You can cancel a pending
            asynchronous call using <see cref="M:IdeaBlade.EntityModel.BaseOperation.Cancel">EntitySaveOperation.Cancel()</see>.
            </remarks>
            <example>
      <code lang="C#">
        <![CDATA[
    public void AsyncSaveSimple() {
      DomainModelEntityManager mgr = new DomainModelEntityManager();

      Customer c1 = new Customer() { CompanyName = "Toys R Us" };
      mgr.AddEntity(c1);
      Customer c2 = new Customer() { CompanyName = "Apple" };
      mgr.AddEntity(c2);

      // Save all modified entities using default SaveOptions.
      // Use a lambda expression which takes the EntitySaveOperation.
      // The userstate token is left null since it's optional.
      mgr.SaveChangesAsync(op => {
        SaveResult sr = op.SaveResult;
        MessageBox.Show(sr.Ok.ToString());
      }, null);
    }
]]>
</code>
</example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.SaveChangesAsync(IdeaBlade.EntityModel.SaveOptions,System.Action{IdeaBlade.EntityModel.EntitySaveOperation},System.Object)">
            <summary>
            Perform an asynchronous <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges(IdeaBlade.EntityModel.SaveOptions)"/> operation.
            </summary>
            <param name="saveOptions">Options controlling save processing</param>
            <param name="userCallback">Callback invoked when asynchronous operation completes</param>
            <param name="userState">Token identifying the asynchronous operation</param>
            <remarks>
            Provide a <paramref name="userCallback"/> if you want to be notified when the operation completes.
            The <see cref="T:IdeaBlade.EntityModel.EntitySaveOperation"/> passed to the <paramref name="userCallback"/> will contain
            the results of the save operation.
            Use the <paramref name="userState"/> to uniquely identify this call.  You can cancel a pending
            asynchronous call using <see cref="M:IdeaBlade.EntityModel.BaseOperation.Cancel">EntitySaveOperation.Cancel()</see>.
            </remarks>
            <example>
      <code lang="C#">
        <![CDATA[
    public void AsyncSaveSimple() {
      DomainModelEntityManager mgr = new DomainModelEntityManager();

      Customer c1 = new Customer() { CompanyName = "Toys R Us" };
      mgr.AddEntity(c1);
      Customer c2 = new Customer() { CompanyName = "Apple" };
      mgr.AddEntity(c2);

      // Save all modified entities using default SaveOptions.
      // Use a lambda expression which takes the EntitySaveOperation.
      // The userstate token is left null since it's optional.
      mgr.SaveChangesAsync(op => {
        SaveResult sr = op.SaveResult;
        MessageBox.Show(sr.Ok.ToString());
      }, null);
    }
]]>
</code>
</example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.SaveChangesAsync(System.Collections.IEnumerable,IdeaBlade.EntityModel.SaveOptions,System.Action{IdeaBlade.EntityModel.EntitySaveOperation},System.Object)">
            <summary>
            Perform an asynchronous <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges(System.Collections.IEnumerable,IdeaBlade.EntityModel.SaveOptions)"/> operation.
            </summary>
            <param name="entities">List of <see cref="T:IdeaBlade.EntityModel.IEntity"/> objects to be persisted</param>
            <param name="saveOptions">Options controlling save processing</param>
            <param name="userCallback">Callback invoked when asynchronous operation completes</param>
            <param name="userState">Token identifying the asynchronous operation</param>
            <remarks>
            Provide a <paramref name="userCallback"/> if you want to be notified when the operation completes.
            The <see cref="T:IdeaBlade.EntityModel.EntitySaveOperation"/> passed to the <paramref name="userCallback"/> will contain
            the results of the save operation.
            Use the <paramref name="userState"/> to uniquely identify this call.  You can cancel a pending
            asynchronous call using <see cref="M:IdeaBlade.EntityModel.BaseOperation.Cancel">EntitySaveOperation.Cancel()</see>.
            </remarks>
            <example>
      <code lang="C#">
        <![CDATA[
    public void AsyncSaveSimple() {
      DomainModelEntityManager mgr = new DomainModelEntityManager();

      Customer c1 = new Customer() { CompanyName = "Toys R Us" };
      mgr.AddEntity(c1);
      Customer c2 = new Customer() { CompanyName = "Apple" };
      mgr.AddEntity(c2);

      // Save all modified entities using default SaveOptions.
      // Use a lambda expression which takes the EntitySaveOperation.
      // The userstate token is left null since it's optional.
      mgr.SaveChangesAsync(op => {
        SaveResult sr = op.SaveResult;
        MessageBox.Show(sr.Ok.ToString());
      }, null);
    }
]]>
</code>
</example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IdeaBlade#EntityModel#IEntityManagerAsync#BeginSaveChanges(System.Collections.IEnumerable,IdeaBlade.EntityModel.SaveOptions,System.AsyncCallback,System.Object)">
            <summary>
            Begin an asynchronous <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges(System.Collections.IEnumerable,IdeaBlade.EntityModel.SaveOptions)"/> operation.
            </summary>
            <param name="entities">List of <see cref="T:IdeaBlade.EntityModel.IEntity"/> objects to be persisted</param>
            <param name="saveOptions">Options controlling save processing</param>
            <param name="asyncCallback">Callback invoked when asynchronous operation completes</param>
            <param name="userState">Token identifying the asynchronous operation</param>
            <returns>AsyncResult holding the status of the asynchronous operation</returns>
            <remarks>
            Call the <see cref="M:IdeaBlade.EntityModel.IEntityManagerAsync.EndSaveChanges(System.IAsyncResult)"/> method with the <see cref="T:System.IAsyncResult"/> returned
            to complete the asynchronous save operation and retrieve the result.  
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IdeaBlade#EntityModel#IEntityManagerAsync#EndSaveChanges(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous save operation to complete and returns the result.
            </summary>
            <param name="result">AsyncResult returned by BeginSaveChanges</param>
            <returns>A SaveResult indicating the results of the operation</returns>
            <remarks>
            <b>EndSaveChanges</b> will block if the operation has not completed.  To avoid this you should call
            this method from within the AsyncCallback method passed in the <b>BeginSaveChanges</b> call.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.AcceptChanges">
            <summary>
            Accept changes to all modified, deleted or added entities within the cache. 
            </summary>
            <remarks>
            <b>AcceptChanges</b> is automatically called by the EntityManager after a successful 
            <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges"/> call; there is rarely a need to call this method directly.
            <para>
            All entities will be marked as <see cref="F:IdeaBlade.EntityModel.EntityState.Unchanged"/> after this operation.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.RejectChanges">
            <summary>
            Rolls back all Entity changes since the cache was created or the last 
            <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges"/> call was made.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.HasChanges">
            <summary>
            Determines whether the EntityManager cache has any changes that have not
            yet been persisted to the backend data source.
            </summary>
            <returns>Whether the EntityManager has any pending changes.</returns>
            <remarks>Use <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges"/> to save changes in cached data to the backend data source.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.Clear(System.Boolean)">
            <summary>
            Resets the EntityManager to its initial "newed" state.
            </summary>
            <remarks>This will clear all cached data and queries, reset IdGenerators.  Any pending changes will be lost.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.ExecuteQueryForObject(IdeaBlade.EntityModel.IEntityQuery)">
            <summary>
            Executes the specified query returning a scalar value.
            </summary>
            <param name="query"></param>
            <returns>Primitive data type</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.ExecuteQueryForObjectAsync(IdeaBlade.EntityModel.IEntityScalarQuery,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},System.Object)">
            <summary>
            Executes the specified scalar query asynchronously.
            </summary>
            <param name="query"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.ExecuteQueryForObjectAsync``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``0}},System.Object)">
            <summary>
            Executes the specified scalar query asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <remarks>
            See <see cref="T:IdeaBlade.EntityModel.EntityScalarAsyncExtensions"/> for asynchronous scalar queries.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.ExecuteQuery``1(IdeaBlade.EntityModel.IEntityQuery{``0})">
            <summary>
            Executes the specified query.
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="query"></param>
            <returns>A collection of <typeparamref name="T"/></returns>
            <example>
      <code lang="C#">
        <![CDATA[
    public void ExecuteQuerySamples() {
      DomainModelEntityManager mgr = new DomainModelEntityManager();

      // 1a) Query by type 
      EntityQuery<Customer> query1a = mgr.Customers;
      IEnumerable<Customer> results1a = mgr.ExecuteQuery<Customer>(query1a);
      // 1b) Query by type with a query strategy
      EntityQuery<Customer> query1b = mgr.Customers.With(QueryStrategy.CacheOnly);
      IEnumerable<Customer> results1b = mgr.ExecuteQuery<Customer>(query1b);
      // 1c) Query by type using immediate execution
      List<Customer> results1c = mgr.Customers.ToList();

      // 2a) Query by EntityKey
      EntityKey key = new EntityKey(typeof(Customer), "ALFKI");
      var customer2a = key.ToQuery().FirstOrNullEntity();
      // 2b) Query by EntityKey with a query strategy
      var customer2b = key.ToQuery().With(QueryStrategy.CacheOnly).FirstOrNullEntity();

      // 3a) Query by a list of EntityKeys
      EntityKeyList keys = new EntityKeyList(typeof(Customer));
      keys.Add(new EntityKey(typeof(Customer), "ALFKI"));
      keys.Add(new EntityKey(typeof(Customer), "BONAP"));
      EntityKeyQuery query3a = keys.ToQuery();
      var results3a = mgr.ExecuteQuery(query3a);
      // 3b) Query by a list of EntityKeys with query strategy
      var results3b = mgr.ExecuteQuery(query3a.With(QueryStrategy.CacheOnly));

      // 4a) Query with an EntityQuery
      IEntityQuery<Customer> q4 = mgr.Customers.Where(c => c.CustomerID.StartsWith("A"));
      IEnumerable<Customer> results4a = mgr.ExecuteQuery<Customer>(q4);
      // 4b) Query with an EntityQuery and query strategy
      IEnumerable<Customer> results4b = mgr.ExecuteQuery<Customer>(q4.With(QueryStrategy.CacheOnly));
    }
]]>
      </code>
    </example>
            <remarks>
            In Silverlight, this query can only execute against the cache because this method is synchronous.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.ExecuteQuery(IdeaBlade.EntityModel.IEntityQuery)">
            <summary>
            Executes the specified query.
            </summary>
            <param name="query"></param>
            <returns>A collection of <see cref="P:IdeaBlade.EntityModel.IEntityQuery.ElementType"/></returns>
            <example>
      <code lang="C#">
        <![CDATA[
    public void ExecuteQuerySamples() {
      DomainModelEntityManager mgr = new DomainModelEntityManager();

      // 1a) Query by type 
      EntityQuery<Customer> query1a = mgr.Customers;
      IEnumerable<Customer> results1a = mgr.ExecuteQuery<Customer>(query1a);
      // 1b) Query by type with a query strategy
      EntityQuery<Customer> query1b = mgr.Customers.With(QueryStrategy.CacheOnly);
      IEnumerable<Customer> results1b = mgr.ExecuteQuery<Customer>(query1b);
      // 1c) Query by type using immediate execution
      List<Customer> results1c = mgr.Customers.ToList();

      // 2a) Query by EntityKey
      EntityKey key = new EntityKey(typeof(Customer), "ALFKI");
      var customer2a = key.ToQuery().FirstOrNullEntity();
      // 2b) Query by EntityKey with a query strategy
      var customer2b = key.ToQuery().With(QueryStrategy.CacheOnly).FirstOrNullEntity();

      // 3a) Query by a list of EntityKeys
      EntityKeyList keys = new EntityKeyList(typeof(Customer));
      keys.Add(new EntityKey(typeof(Customer), "ALFKI"));
      keys.Add(new EntityKey(typeof(Customer), "BONAP"));
      EntityKeyQuery query3a = keys.ToQuery();
      var results3a = mgr.ExecuteQuery(query3a);
      // 3b) Query by a list of EntityKeys with query strategy
      var results3b = mgr.ExecuteQuery(query3a.With(QueryStrategy.CacheOnly));

      // 4a) Query with an EntityQuery
      IEntityQuery<Customer> q4 = mgr.Customers.Where(c => c.CustomerID.StartsWith("A"));
      IEnumerable<Customer> results4a = mgr.ExecuteQuery<Customer>(q4);
      // 4b) Query with an EntityQuery and query strategy
      IEnumerable<Customer> results4b = mgr.ExecuteQuery<Customer>(q4.With(QueryStrategy.CacheOnly));
    }
]]>
      </code>
    </example>
            <remarks>
            In Silverlight, this query can only execute against the cache because this method is synchronous.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.ExecuteQueryAsync``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.Action{IdeaBlade.EntityModel.EntityQueryOperation{``0}},System.Object)">
            <summary>
            Execute a query asynchronously.
            </summary>
            <typeparam name="T">Entity type queried</typeparam>
            <param name="query">The <see cref="T:IdeaBlade.EntityModel.IEntityQuery"/> to execute</param>
            <param name="userCallback">Callback invoked when the query completes</param>
            <param name="userState">Token to identify the query upon completion</param>
            <remarks>
            Provide a <paramref name="userCallback"/> if you want to be notified when the operation completes.
            The query results will be returned in the <see cref="T:IdeaBlade.EntityModel.EntityQueriedEventArgs"/> 
            passed to the <paramref name="userCallback"/>.
            Use the <paramref name="userState"/> to uniquely identify this call.  You can cancel a pending
            asynchronous call using <see cref="M:IdeaBlade.EntityModel.EntityManager.CancelAsync(System.Object)"/>.
            <para>This feature is only available in certain editions of DevForce.</para>
            </remarks>  
            <example><code lang="C#">
    <![CDATA[
    private void SampleAsynchQuery() {
      DomainModelEntityManager mgr = new DomainModelEntityManager();

      // Build a query and ask mgr to run it asynchronously.
      var query = mgr.Customers.Where(c => c.CompanyName.StartsWith("C"));
      int token = 1;
      mgr.ExecuteQueryAsync(query, AsyncQueryCompleted, token);
    }

    void AsyncQueryCompleted(EntityQueryOperation<Customer> e) {
      if (e.Error != null) {
        System.Diagnostics.Debug.WriteLine(e.Error.Message);
        return;
      }
      System.Diagnostics.Debug.WriteLine("queryid = " + e.UserState.ToString());
      System.Diagnostics.Debug.WriteLine("customers retrieved = " + e.Results.Count().ToString());
    }	
]]>
</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.ExecuteQueryAsync(IdeaBlade.EntityModel.IEntityQuery,System.Action{IdeaBlade.EntityModel.EntityQueryOperation},System.Object)">
            <summary>
            Execute a query asynchronously.
            </summary>
            <param name="query">The <see cref="T:IdeaBlade.EntityModel.IEntityQuery"/> to execute</param>
            <param name="userCallback">Callback invoked when the query completes</param>
            <param name="userState">Token to identify the query upon completion</param>
            <remarks>
            Provide a <paramref name="userCallback"/> if you want to be notified when the operation completes.
            The query results will be returned in the <see cref="T:IdeaBlade.EntityModel.EntityQueriedEventArgs"/> 
            passed to the <paramref name="userCallback"/>.
            Use the <paramref name="userState"/> to uniquely identify this call.  You can cancel a pending
            asynchronous call using <see cref="M:IdeaBlade.EntityModel.EntityManager.CancelAsync(System.Object)"/>.
            <para>This feature is only available in certain editions of DevForce.</para>
            </remarks>  
            <exception cref="T:System.InvalidOperationException">DataSource fetch strategies are not allowed when disconnected</exception>
            <example><code lang="C#">
    <![CDATA[
    private void SampleAsynchQuery() {
      DomainModelEntityManager mgr = new DomainModelEntityManager();

      // Build a query and ask mgr to run it asynchronously.
      var query = mgr.Customers.Where(c => c.CompanyName.StartsWith("C"));
      int token = 1;
      mgr.ExecuteQueryAsync(query, AsyncQueryCompleted, token);
    }

    void AsyncQueryCompleted(EntityQueryOperation<Customer> e) {
      if (e.Error != null) {
        System.Diagnostics.Debug.WriteLine(e.Error.Message);
        return;
      }
      System.Diagnostics.Debug.WriteLine("queryid = " + e.UserState.ToString());
      System.Diagnostics.Debug.WriteLine("customers retrieved = " + e.Results.Count().ToString());
    }	
]]>
</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IdeaBlade#EntityModel#IEntityManagerAsync#BeginExecuteQuery``1(IdeaBlade.EntityModel.IEntityQuery{``0},System.AsyncCallback,System.Object)">
            <summary>
            Begin asynchronous execution of a query.
            </summary>
            <typeparam name="T">Type of return results</typeparam>
            <param name="query">The <see cref="T:IdeaBlade.EntityModel.IEntityQuery"/> to execute</param>
            <param name="callback">Callback invoked when the query completes</param>
            <param name="userState">Token to identify the query upon completion</param>
            <returns>AsyncResult holding the status of the asynchronous operation</returns>
            <remarks>
            Call the <see cref="M:IdeaBlade.EntityModel.IEntityManagerAsync.EndExecuteQuery``1(System.IAsyncResult)"/> method with the <see cref="T:System.IAsyncResult"/> returned
            to complete the asynchronous query operation and retrieve the result.  
            <para>This feature is only available in certain editions of DevForce.</para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IdeaBlade#EntityModel#IEntityManagerAsync#EndExecuteQuery``1(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous query operation to complete and returns the result.
            </summary>
            <param name="asyncResult">AsyncResult returned by BeginExecuteQuery</param>
            <returns>Query results</returns>
            <remarks>
            <b>EndExecuteQuery</b> will block if the operation has not completed.  To avoid this you should call
            this method from within the AsyncCallback method passed in the <b>BeginExecuteQuery</b> call.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IdeaBlade#EntityModel#IEntityManagerAsync#BeginExecuteQuery(IdeaBlade.EntityModel.IEntityQuery,System.AsyncCallback,System.Object)">
            <summary>
            Begin asynchronous execution of a query.
            </summary>
            <param name="query">The <see cref="T:IdeaBlade.EntityModel.IEntityQuery"/> to execute</param>
            <param name="callback">Callback invoked when the query completes</param>
            <param name="userState">Token to identify the query upon completion</param>
            <returns>AsyncResult holding the status of the asynchronous operation</returns>
            <remarks>
            Call the <see cref="M:IdeaBlade.EntityModel.IEntityManagerAsync.EndExecuteQuery(System.IAsyncResult)"/> method with the <see cref="T:System.IAsyncResult"/> returned
            to complete the asynchronous query operation and retrieve the result.  
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IdeaBlade#EntityModel#IEntityManagerAsync#EndExecuteQuery(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous query operation to complete and returns the result.
            </summary>
            <param name="asyncResult">AsyncResult returned by BeginExecuteQuery</param>
            <returns>Query results</returns>
            <remarks>
            <b>EndExecuteQuery</b> will block if the operation has not completed.  To avoid this you should call
            this method from within the AsyncCallback method passed in the <b>BeginExecuteQuery</b> call.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.CancelAsync(System.Object)">
            <summary>
            Cancel a pending asynchronous operation. 
            </summary>
            <param name="userState">Token identifying the operation to cancel.</param>
            <remarks>
            Use the same token passed to the asynchronous call to indicate the operation
            to be cancelled.
            <para>
            Note: To cancel a Login or Logout operation, call the Cancel method on the operation returned by the asynchronous call.
            </para>
            </remarks>
            <example>
      <code lang="C#">
        <![CDATA[
    public void CancelAsyncSample() {
      // Sample showing cancel of an async fetch operation.

      DomainModelEntityManager mgr = new DomainModelEntityManager();

      var query = mgr.Customers.With(QueryStrategy.DataSourceOnly)
        .Where(c => c.CompanyName.StartsWith("A") || c.CompanyName.EndsWith("a"));
      Guid token = Guid.NewGuid();

      // Start an async fetch
      var op = mgr.ExecuteQueryAsync<Customer>(query, (e) => {
        MessageBox.Show(e.Cancelled.ToString());
      }, token);

      // And now cancel it.
      op.Cancel();
    }
]]>
      </code>
    </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.FindEntityGraph(System.Collections.IEnumerable,System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.EntitySpan},IdeaBlade.EntityModel.EntityState)">
            <summary>
            Given any entity or entities in a graph, collects and retrieves all 
            related entities in the graph. This is a cache-only operation.
            </summary>
            <param name="roots">A list of entities used as the starting point for retrieving all other related entities</param>
            <param name="spans">One or more <see cref="T:IdeaBlade.EntityModel.EntitySpan"/>s</param>
            <param name="entityState">EntityState of entities to return</param>
            <returns>A list of related Entities</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if pEntityRoots and/or pEntitySpans is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the type in a span does not have a matching type in one of the roots.</exception>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.GetNullEntity(System.Type)">
            <summary>
            Returns a "null" entity of the specified entity type.  
            </summary>
            <param name="entityType">The Entity subtype of the "null" entity to retrieve</param>
            <returns>A "null" entity of the specified Entity subtype</returns>
            <remarks>
            The null entity is a sentinel object that looks and behaves, for the most part, like a real entity instance.
            Every entity class defines its own "null entity" instance.  When a query method 
            must return an entity and it has no valid entity instance to return, it returns the null entity for the
            requested entity type instead. When a relation property should return a related entity instance and there 
            is no such instance, it will return a null entity instead.
            <para>
            Only one instance of a null entity exists for any given entity type.  You may use <see cref="T:IdeaBlade.EntityModel.IUpdateNullEntity"/>
            to set custom defaults for the null entity.  Use <see cref="P:IdeaBlade.EntityModel.EntityAspect.IsNullEntity"/> to test whether an
            entity is the null entity.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.GetNullEntity``1">
            <summary>
            Returns a "null" entity of the specified entity type.  
            </summary>
            <typeparam name="T">The Entity subtype of the "null" entity to retrieve</typeparam>
            <returns>A "null" entity of the specified Entity subtype</returns>
            <remarks>
            The null entity is a sentinel object that looks and behaves, for the most part, like a real entity instance.
            Every entity class defines its own "null entity" instance.  When a query method 
            must return an entity and it has no valid entity instance to return, it returns the null entity for the
            requested entity type instead. When a relation property should return a related entity instance and there 
            is no such instance, it will return a null entity instead.
            <para>
            Only one instance of a null entity exists for any given entity type.  You may use <see cref="T:IdeaBlade.EntityModel.IUpdateNullEntity"/>
            to set custom defaults for the null entity.  Use <see cref="P:IdeaBlade.EntityModel.EntityAspect.IsNullEntity"/> to test whether an
            entity is the null entity.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.RefetchEntity(System.Object,IdeaBlade.EntityModel.MergeStrategy)">
            <summary>
            Forces an entity to be refetched from the backend data source.
            </summary>
            <param name="entity">The Entity to refetch</param>
            <param name="mergeStrategy">Merge strategy</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.RefetchEntities(System.Collections.IEnumerable,IdeaBlade.EntityModel.MergeStrategy)">
            <summary>
            Forces a collection of entities to be refetched from the backend data source.
            </summary>
            <param name="entities">A collection of Entities to refetch</param>
            <param name="mergeStrategy">Merge strategy</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.RefetchEntities(IdeaBlade.EntityModel.EntityKeyList,IdeaBlade.EntityModel.MergeStrategy)">
            <summary>
            Forces a collection of entities specified in an EntityKeyList to be refetched from the backend data source.
            </summary>
            <param name="entityKeys">List of primary keys</param>
            <param name="mergeStrategy">Merge strategy</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.RefetchEntities(IdeaBlade.EntityModel.EntityState,IdeaBlade.EntityModel.MergeStrategy)">
            <summary>
            Refetches all entities with the specified EntityState(s) from the backend data source.
            </summary>
            <param name="entityState">The <see cref="T:IdeaBlade.EntityModel.EntityState"/></param>
            <param name="mergeStrategy">Merge strategy</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.RefetchEntityAsync(System.Object,IdeaBlade.EntityModel.MergeStrategy,System.Action{IdeaBlade.EntityModel.EntityRefetchOperation},System.Object)">
            <summary>
            Perform an asynchronous <see cref="M:IdeaBlade.EntityModel.EntityManager.RefetchEntities(IdeaBlade.EntityModel.EntityKeyList,IdeaBlade.EntityModel.MergeStrategy)"/> operation.
            </summary>
            <param name="entity">Entity to be refetched</param>
            <param name="mergeStrategy">Merge strategy</param>
            <param name="userCallback">Callback invoked when asynchronous operation completes</param>
            <param name="userState">Token identifying the asynchronous operation</param>
            <remarks>
            Provide a <paramref name="userCallback"/> if you want to be notified when the operation completes.
            Use the <paramref name="userState"/> to uniquely identify this call.  You can cancel a pending
            asynchronous call using <see cref="M:IdeaBlade.EntityModel.EntityManager.CancelAsync(System.Object)"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.RefetchEntitiesAsync(IdeaBlade.EntityModel.EntityKeyList,IdeaBlade.EntityModel.MergeStrategy,System.Action{IdeaBlade.EntityModel.EntityRefetchOperation},System.Object)">
            <summary>
            Perform an asynchronous <see cref="M:IdeaBlade.EntityModel.EntityManager.RefetchEntities(IdeaBlade.EntityModel.EntityKeyList,IdeaBlade.EntityModel.MergeStrategy)"/> operation.
            </summary>
            <param name="entityKeys">List of entity keys</param>
            <param name="mergeStrategy">Merge strategy</param>
            <param name="userCallback">Callback invoked when asynchronous operation completes</param>
            <param name="userState">Token identifying the asynchronous operation</param>
            <remarks>
            Provide a <paramref name="userCallback"/> if you want to be notified when the operation completes.
            Use the <paramref name="userState"/> to uniquely identify this call.  You can cancel a pending
            asynchronous call using <see cref="M:IdeaBlade.EntityModel.EntityManager.CancelAsync(System.Object)"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.RefetchEntitiesAsync(System.Collections.IEnumerable,IdeaBlade.EntityModel.MergeStrategy,System.Action{IdeaBlade.EntityModel.EntityRefetchOperation},System.Object)">
            <summary>
            Forces a collection of entities to be refetched from the backend data source.
            </summary>
            <param name="entities">A collection of Entities to refetch</param>
            <param name="mergeStrategy">Merge strategy</param>
            <param name="userCallback">Callback invoked when asynchronous operation completes</param>
            <param name="userState">Token identifying the asynchronous operation</param>
            <remarks>
            Provide a <paramref name="userCallback"/> if you want to be notified when the operation completes.
            Use the <paramref name="userState"/> to uniquely identify this call.  You can cancel a pending
            asynchronous call using <see cref="M:IdeaBlade.EntityModel.EntityManager.CancelAsync(System.Object)"/>. 
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.RefetchEntitiesAsync(IdeaBlade.EntityModel.EntityState,IdeaBlade.EntityModel.MergeStrategy,System.Action{IdeaBlade.EntityModel.EntityRefetchOperation},System.Object)">
            <summary>
            Performs an asynchronous refetch of all entities with the specified EntityState(s) from the backend data source.
            </summary>
            <param name="entityState">EntityState(s) of entities to be refetched</param>
            <param name="mergeStrategy">Merge strategy</param>
            <param name="userCallback">Callback invoked when asynchronous operation completes</param>
            <param name="userState">Token identifying the asynchronous operation</param>
            <remarks>
            Provide a <paramref name="userCallback"/> if you want to be notified when the operation completes.
            Use the <paramref name="userState"/> to uniquely identify this call.  You can cancel a pending
            asynchronous call using <see cref="M:IdeaBlade.EntityModel.EntityManager.CancelAsync(System.Object)"/>. 
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IdeaBlade#EntityModel#IEntityManagerAsync#BeginRefetchEntities(IdeaBlade.EntityModel.EntityKeyList,IdeaBlade.EntityModel.MergeStrategy,System.AsyncCallback,System.Object)">
            <summary>
            Begin an asychronous <see cref="M:IdeaBlade.EntityModel.EntityManager.RefetchEntities(IdeaBlade.EntityModel.EntityKeyList,IdeaBlade.EntityModel.MergeStrategy)"/> operation.
            </summary>
            <param name="entityKeys">List of entity keys</param>
            <param name="mergeStrategy">Merge strategy</param>
            <param name="asyncCallback">Callback invoked when asynchronous operation completes</param>
            <param name="userState">Token identifying the asynchronous operation</param>
            <returns>AsyncResult holding the status of the asynchronous operation</returns>
            <remarks>
            Call the <see cref="M:IdeaBlade.EntityModel.IEntityManagerAsync.EndRefetchEntities(System.IAsyncResult)"/> method with the <see cref="T:System.IAsyncResult"/> returned
            to complete the asynchronous operation.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IdeaBlade#EntityModel#IEntityManagerAsync#EndRefetchEntities(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous refetch operation to complete.
            </summary>
            <param name="result">AsyncResult returned by BeginRefetchEntities</param>
            <remarks>
            <b>EndRefetchEntities</b> will block if the operation has not completed.  To avoid this you should call
            this method from within the AsyncCallback method passed in the <b>BeginRefetchEntities</b> call.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.CreateEntity``1">
            <summary>
            Create a new entity of the requested type.  
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.AddEntity(System.Object)"/>
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <returns>A new instance of the specified entity type</returns>
            <remarks>
            You may either "new" a business object (unless it's Abstract (or MustInherit in Visual Basic), or
            use one of the overloaded <b>CreateEntity</b> methods.  Any new entity has a "detached"
            <see cref="P:IdeaBlade.EntityModel.EntityAspect.EntityState"/> until added to the EntityManager cache using either <see cref="M:IdeaBlade.EntityModel.EntityManager.AddEntity(System.Object)"/> or
            the object's <see cref="M:IdeaBlade.EntityModel.EntityAspect.AddToManager"/> method.
            </remarks>
            <example><code lang="C#">
    <![CDATA[
  DomainModelEntityManager mgr = new DomainModelEntityManager();

  // Retrieve an order
  Order order = mgr.Orders.FirstOrNullEntity(o=> o.OrderID == 1);
  // Retrieve a product
  Product product = mgr.Products.FirstOrNullEntity(p => p.ProductID == 1);

  // Create an OrderDetail 
  OrderDetail dtl = mgr.CreateEntity<OrderDetail>();
  // assign key fields
  dtl.OrderSummary = order;
  dtl.Product = product;

  // add the OrderDetail to the EntityManager cache
  DebugFns.WriteLine("entity state before add = " + dtl.EntityState);
  dtl.AddToManager();
  DebugFns.WriteLine("entity state after add = " + dtl.EntityState);
]]>
</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.CreateEntity``1(System.String)">
            <summary>
            Create a new entity of the requested type.  
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.AddEntity(System.Object)"/>
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="entitySetName">Name of the entity set for the new entity</param>
            <returns>A new instance of the specified entity type</returns>
            <remarks>
            You may either "new" a business object (unless it's Abstract (or MustInherit in Visual Basic), or
            use one of the overloaded <b>CreateEntity</b> methods.  Any new entity has a "detached"
            <see cref="P:IdeaBlade.EntityModel.EntityAspect.EntityState"/> until added to the EntityManager cache using either <see cref="M:IdeaBlade.EntityModel.EntityManager.AddEntity(System.Object)"/> or
            the object's <see cref="M:IdeaBlade.EntityModel.EntityAspect.AddToManager"/> method.
            <para>
            The "entity set" is a construct within the Entity Framework which allows you to 
            logically group entities of the same type.  See <see cref="P:IdeaBlade.EntityModel.EntityQuery.EntitySetName"/>
            for more information.  If an entity set name is not provided then the <see cref="P:IdeaBlade.EntityModel.EntityGroup.DefaultEntitySetName"/>
            is used.
            </para>
            </remarks>
            <example><code lang="C#">
    <![CDATA[
  DomainModelEntityManager mgr = new DomainModelEntityManager();

  // Retrieve an order
  Order order = mgr.Orders.FirstOrNullEntity(o=> o.OrderID == 1);
  // Retrieve a product
  Product product = mgr.Products.FirstOrNullEntity(p => p.ProductID == 1);

  // Create an OrderDetail 
  OrderDetail dtl = mgr.CreateEntity<OrderDetail>();
  // assign key fields
  dtl.OrderSummary = order;
  dtl.Product = product;

  // add the OrderDetail to the EntityManager cache
  DebugFns.WriteLine("entity state before add = " + dtl.EntityState);
  dtl.AddToManager();
  DebugFns.WriteLine("entity state after add = " + dtl.EntityState);
]]>
</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.CreateEntity(System.Type)">
            <summary>
            Create a new entity of the requested type.  
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.AddEntity(System.Object)"/>
            </summary>
            <param name="entityType">Entity type</param>
            <returns>A new instance of the specified entity type</returns>
            <remarks>
            You may either "new" a business object (unless it's Abstract (or MustInherit in Visual Basic), or
            use one of the overloaded <b>CreateEntity</b> methods.  Any new entity has a "detached"
            <see cref="P:IdeaBlade.EntityModel.EntityAspect.EntityState"/> until added to the EntityManager cache using either <see cref="M:IdeaBlade.EntityModel.EntityManager.AddEntity(System.Object)"/> or
            the object's <see cref="M:IdeaBlade.EntityModel.EntityAspect.AddToManager"/> method.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Bad entity type</exception>
            <example><code lang="C#">
    <![CDATA[
  DomainModelEntityManager mgr = new DomainModelEntityManager();

  // Retrieve an order
  Order order = mgr.Orders.FirstOrNullEntity(o=> o.OrderID == 1);
  // Retrieve a product
  Product product = mgr.Products.FirstOrNullEntity(p => p.ProductID == 1);

  // Create an OrderDetail 
  OrderDetail dtl = mgr.CreateEntity<OrderDetail>();
  // assign key fields
  dtl.OrderSummary = order;
  dtl.Product = product;

  // add the OrderDetail to the EntityManager cache
  DebugFns.WriteLine("entity state before add = " + dtl.EntityState);
  dtl.AddToManager();
  DebugFns.WriteLine("entity state after add = " + dtl.EntityState);
]]>
</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.CreateEntity(System.Type,System.String)">
            <summary>
            Create a new entity of the requested type.  
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.AddEntity(System.Object)"/>
            </summary>
            <param name="entityType">Entity type</param>
            <param name="entitySetName">Name of the entity set for the new entity</param>
            <returns>A new instance of the specified entity type</returns>
            <remarks>
            You may either "new" a business object (unless it's Abstract (or MustInherit in Visual Basic), or
            use one of the overloaded <b>CreateEntity</b> methods.  Any new entity has a "detached"
            <see cref="P:IdeaBlade.EntityModel.EntityAspect.EntityState"/> until added to the EntityManager cache using either <see cref="M:IdeaBlade.EntityModel.EntityManager.AddEntity(System.Object)"/> or
            the object's <see cref="M:IdeaBlade.EntityModel.EntityAspect.AddToManager"/> method.
            <para>
            The "entity set" is a construct within the Entity Framework which allows you to 
            logically group entities of the same type.  See <see cref="P:IdeaBlade.EntityModel.EntityQuery.EntitySetName"/>
            for more information.  If an entity set name is not provided then the <see cref="P:IdeaBlade.EntityModel.EntityGroup.DefaultEntitySetName"/>
            is used.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Bad entity type</exception>
            <example><code lang="C#">
    <![CDATA[
  DomainModelEntityManager mgr = new DomainModelEntityManager();

  // Retrieve an order
  Order order = mgr.Orders.FirstOrNullEntity(o=> o.OrderID == 1);
  // Retrieve a product
  Product product = mgr.Products.FirstOrNullEntity(p => p.ProductID == 1);

  // Create an OrderDetail 
  OrderDetail dtl = mgr.CreateEntity<OrderDetail>();
  // assign key fields
  dtl.OrderSummary = order;
  dtl.Product = product;

  // add the OrderDetail to the EntityManager cache
  DebugFns.WriteLine("entity state before add = " + dtl.EntityState);
  dtl.AddToManager();
  DebugFns.WriteLine("entity state after add = " + dtl.EntityState);
]]>
</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.AddEntity(System.Object)">
            <summary>
            Adds a newly created entity to the EntityManager cache.
            <seealso cref="M:IdeaBlade.EntityModel.EntityAspect.AddToManager"/>
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.CreateEntity(System.Type)"/>
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.AddEntities(System.Collections.IEnumerable)"/>
            </summary>
            <param name="entity">Entity to be added.</param>
            <remarks>There is no difference between <b>AddEntity</b> and <see cref="M:IdeaBlade.EntityModel.EntityAspect.AddToManager"/>.
            Use either method to add a business object created by the <see cref="M:IdeaBlade.EntityModel.EntityManager.CreateEntity``1">CreateEntity</see> method
            to the EntityManager cache.  The object must have a "detached" <see cref="T:IdeaBlade.EntityModel.EntityState"/>.
            The added entity will have an entity state of "Added" after this method completes.
            <para>
            If the entity has an auto-incrementing <see cref="T:IdeaBlade.EntityModel.EntityKey">EntityKey</see>, the <see cref="M:IdeaBlade.EntityModel.EntityManager.GenerateId(System.Object,IdeaBlade.EntityModel.DataEntityProperty)">GenerateId</see>
            method is called to create a temporary ID.  See the Developer Guide for more information on 
            custom ID generation.
            </para>
            <para>
            The <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanging">EntityChanging</see> and 
            <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanged">EntityChanged</see>
            events fire when this method executes with an EntityAction of <see cref="F:IdeaBlade.EntityModel.EntityAction.Add"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Entity already belongs to another EntityManager</exception>
            <example><code lang="C#">
    <![CDATA[
  DomainModelEntityManager mgr = new DomainModelEntityManager();

  // Retrieve an order
  Order order = mgr.Orders.FirstOrNullEntity(o=> o.OrderID == 1);
  // Retrieve a product
  Product product = mgr.Products.FirstOrNullEntity(p => p.ProductID == 1);

  // Create an OrderDetail 
  OrderDetail dtl = mgr.CreateEntity<OrderDetail>();
  // assign key fields
  dtl.OrderSummary = order;
  dtl.Product = product;

  // add the OrderDetail to the EntityManager cache
  DebugFns.WriteLine("entity state before add = " + dtl.EntityState);
  dtl.AddToManager();
  DebugFns.WriteLine("entity state after add = " + dtl.EntityState);
]]>
</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.AddEntities(System.Collections.IEnumerable)">
            <summary>
            Adds newly created entities to the EntityManager cache.
            <seealso cref="M:IdeaBlade.EntityModel.EntityAspect.AddToManager"/>
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.CreateEntity(System.Type)"/>
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.AddEntity(System.Object)"/>
            </summary>
            <param name="entities">Entities to be added.</param>
            <remarks>Adds business objects created by the <see cref="M:IdeaBlade.EntityModel.EntityManager.CreateEntity``1"/> method
            to the EntityManager cache.  The objects must have a "detached" <see cref="P:IdeaBlade.EntityModel.EntityAspect.EntityState"/>.
            The added entities will have an entity state of "Added" after this method completes.
            <para>
            If an entity has an auto-incrementing <see cref="T:IdeaBlade.EntityModel.EntityKey"/>, the <see cref="M:IdeaBlade.EntityModel.EntityManager.GenerateId(System.Object,IdeaBlade.EntityModel.DataEntityProperty)"/>
            method is called to create a temporary ID.  See the Developers Guide for more information on 
            custom ID generation.
            </para>
            <para>
            The <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanging"/> and <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanged"/>
            events fire when this method executes.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Entity already belongs to another EntityManager</exception>
            <example><code lang="C#">
    <![CDATA[
  DomainModelEntityManager mgr = new DomainModelEntityManager();

  // Retrieve an order
  Order order = mgr.Orders.FirstOrNullEntity(o=> o.OrderID == 1);
  // Retrieve a product
  Product product = mgr.Products.FirstOrNullEntity(p => p.ProductID == 1);

  // Create an OrderDetail 
  OrderDetail dtl = mgr.CreateEntity<OrderDetail>();
  // assign key fields
  dtl.OrderSummary = order;
  dtl.Product = product;

  // add the OrderDetail to the EntityManager cache
  DebugFns.WriteLine("entity state before add = " + dtl.EntityState);
  dtl.AddToManager();
  DebugFns.WriteLine("entity state after add = " + dtl.EntityState);
]]>
</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.RemoveEntity(System.Object,System.Nullable{System.Boolean})">
            <summary>
            Removes an <see cref="T:IdeaBlade.EntityModel.IEntity"/> from the EntityManager cache.
            <seealso cref="M:IdeaBlade.EntityModel.Entity.RemoveFromManager"/>
            </summary>
            <param name="entity">The Entity to be removed</param>
            <param name="clearQueryCache">Whether removing this entity should also cause the QueryCache to be cleared. The default
            'null' value allows DevForce to make this determination based on the entity being removed. </param>
            <remarks>The <see cref="T:IdeaBlade.EntityModel.IEntity"/> will be in a "detached" state after the remove. 
            <b>RemoveEntity</b> and <see cref="M:IdeaBlade.EntityModel.EntityAspect.RemoveFromManager"/> can be used interchangeably
            <para>
            The query cache should normally be cleared after removing an
             entity from the entity cache, since removing an entity can invalidate the usefulness of the query cache and
             lead to incorrect query results.  You can choose not to clear the query cache if you know
             that removing the entity will not cause problems.
             </para>
            <para>
            This does not delete the object from the backend data source.  To delete an entity,
             use the <see cref="M:IdeaBlade.EntityModel.Entity.Delete()"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.RemoveEntities(System.Collections.IEnumerable,System.Nullable{System.Boolean})">
            <summary>
            Removes a collection of entities from the EntityManager cache.
            <seealso cref="M:IdeaBlade.EntityModel.QueryCache.Clear()"/>
            </summary>
            <param name="entities">List of entities to be removed</param>
            <param name="clearQueryCache">Whether removing these entities should also cause the QueryCache to be cleared. The default
            'null' value allows DevForce to make this determination based on the entities being removed. </param>
            <remarks>The <see cref="T:IdeaBlade.EntityModel.IEntity"/> objects will be in a "detached" state after the remove. 
            <b>RemoveEntity</b> and <see cref="M:IdeaBlade.EntityModel.EntityAspect.RemoveFromManager"/> can be used interchangeably
            <para>
            The query cache should normally be cleared after removing an
             entity from the entity cache, since removing an entity can invalidate the usefulness of the query cache and
             lead to incorrect query results.  You can choose not to clear the query cache if you know
             that removing the entity will not cause problems.
             </para>
            <para>
            This does not delete the entities from the backend data source.  To delete an entity,
             use the <see cref="M:IdeaBlade.EntityModel.Entity.Delete()"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.RemoveEntities(System.Type,IdeaBlade.EntityModel.EntityState,System.Nullable{System.Boolean})">
            <summary>
            Removes entities of the specified type and EntityState from the EntityManager cache.
            <seealso cref="M:IdeaBlade.EntityModel.QueryCache.Clear()"/>
            </summary>
            <param name="entityType">Entity type</param>
            <param name="entityState">Entity state(s)</param>
            <param name="clearQueryCache">Whether removing these entities should also cause the QueryCache to be cleared. The default
            'null' value allows DevForce to make this determination based on the entities being removed. </param>
            <remarks>The <see cref="T:IdeaBlade.EntityModel.IEntity"/> objects will be in a "detached" state after the remove. 
            <b>RemoveEntity</b> and <see cref="M:IdeaBlade.EntityModel.EntityAspect.RemoveFromManager"/> can be used interchangeably
            <para>
            The query cache should normally be cleared after removing an
             entity from the entity cache, since removing an entity can invalidate the usefulness of the query cache and
             lead to incorrect query results.  You can choose not to clear the query cache if you know
             that removing the entity will not cause problems.
             </para>
            <para>
            This does not delete the entities from the backend data source.  To delete an entity,
             use the <see cref="M:IdeaBlade.EntityModel.Entity.Delete()"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.RemoveEntities(IdeaBlade.EntityModel.EntityState,System.Nullable{System.Boolean})">
            <summary>
            Removes all entities with a specified EntityState from the EntityManager cache.
            <seealso cref="M:IdeaBlade.EntityModel.QueryCache.Clear()"/>
            </summary>
            <param name="entityState">Entity state(s) of entities to be removed</param>
            <param name="clearQueryCache">Whether removing these entities should also cause the QueryCache to be cleared. The default
            'null' value allows DevForce to make this determination based on the entities being removed. </param>
            <remarks>The <see cref="T:IdeaBlade.EntityModel.IEntity"/> objects will be in a "detached" state after the remove. 
            <b>RemoveEntity</b> and <see cref="M:IdeaBlade.EntityModel.EntityAspect.RemoveFromManager"/> can be used interchangeably
            <para>
            The query cache should normally be cleared after removing an
             entity from the entity cache, since removing an entity can invalidate the usefulness of the query cache and
             lead to incorrect query results.  You can choose not to clear the query cache if you know
             that removing the entity will not cause problems.
             </para>
            <para>
            This does not delete the entities from the backend data source.  To delete an entity,
             use the <see cref="M:IdeaBlade.EntityModel.Entity.Delete()"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.AttachEntity(System.Object,IdeaBlade.EntityModel.EntityState)">
            <summary>
            Adds a detached entity to this EntityManager and marks it with the specified EntityState.  Throws an exception if an
            entity with the same key already exists in the manager or if the specified entity is not in a detached state.
            </summary>
            <param name="entity"></param>
            <param name="entityState"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.AttachEntities(System.Collections.IEnumerable,IdeaBlade.EntityModel.EntityState)">
            <summary>
            Adds a collection of detached entities to this EntityManager and marks them with the specified EntityState.  Throws an exception if an
            entity with the same key already exists in the manager or if the specified entities are not in a detached state.
            </summary>
            <param name="entities"></param>
            <param name="entityState"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.Connect">
            <summary>
            Connect to the <see cref="T:IdeaBlade.EntityModel.Server.EntityServer"/>.
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.Disconnect"/>
            <seealso cref="T:IdeaBlade.EntityModel.Server.EntityServer"/>
            </summary>
            <remarks>
            Use <b>Connect</b> and <see cref="M:IdeaBlade.EntityModel.EntityManager.Disconnect"/> to manage the connection to the 
            EntityServer.  You should have an <see cref="E:IdeaBlade.EntityModel.EntityManager.EntityServerError"/> handler in place
            to catch connection failures.
            <para>
            <b>Connect</b> does not connect to any backend data sources.  
            </para>
            </remarks>
            <exception cref="T:IdeaBlade.EntityModel.EntityServerException"/>
            <example><code lang="C#">
    private bool Initialize() {
      string runTimeEnv;
#if TEST
      runTimeEnv = "Test";
#else
      runTimeEnv = "Prod";
#endif

      // Initialize an EntityManager for the given data source extension, and set up an error handler.
      IdeaBladeTest1Manager mgr = new IdeaBladeTest1Manager(false, runTimeEnv);
      mgr.EntityServerError += EntityServerErrorHandler;

      // Explicitly connect to the BOS now.
      // Note that no data source connection is made until entities are accessed.
      try {
        mgr.Connect();
      } catch (EntityServerException ese) {
        MessageBox.Show(ese.Message, "EntityServerException");
      } catch (Exception e) {
        MessageBox.Show(e.Message, "Exception");
      }
      return mgr.IsConnected;
    }
    private void EntityServerErrorHandler(object pSender, EntityServerErrorEventArgs e) {
      // Always a good idea to log all exception info.
      Exception ex = e.Exception;
      while (ex != null) {
        TraceFns.WriteLine(ex.ToString());
        ex = ex.InnerException;
      }
      MessageBox.Show("Trying to handle error");
      // Leave e.Handled = false if the Error should be thrown back to the calling code
      e.Handled = true;         // exception will not be thrown
    }
	</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.ConnectImplicit">
            <summary>
            Performed when an EM is constructed.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.ConnectAsync">
            <summary>
            Connect to the <see cref="T:IdeaBlade.EntityModel.Server.EntityServer"/> asynchronously.
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.Disconnect"/>
            <seealso cref="T:IdeaBlade.EntityModel.Server.EntityServer"/>
            </summary>
            <remarks>
            Use <b>ConnectAsync</b> and <see cref="M:IdeaBlade.EntityModel.EntityManager.Disconnect"/> to manage the connection to the 
            EntityServer.  You should have an <see cref="E:IdeaBlade.EntityModel.EntityManager.EntityServerError"/> handler in place
            to catch connection failures.
            <para>
            In Silverlight applications, <b>ConnectAsync</b> is called implicitly when you construct an
            EntityManager with either the default constructor or a constructor with a true "shouldConnect" argument.
            In these cases, you may want to check the <see cref="P:IdeaBlade.EntityModel.EntityManager.IsConnected"/> property before issuing other
            requests.
            </para>
            <para>
            <b>Connect</b> does not connect to any backend data sources.  
            </para>
            </remarks>
            <exception cref="T:IdeaBlade.EntityModel.EntityServerException"/>
            <example><code lang="C#">
    private bool Initialize() {
      string runTimeEnv;
#if TEST
      runTimeEnv = "Test";
#else
      runTimeEnv = "Prod";
#endif

      // Initialize an EntityManager for the given data source extension, and set up an error handler.
      IdeaBladeTest1Manager mgr = new IdeaBladeTest1Manager(false, runTimeEnv);
      mgr.EntityServerError += EntityServerErrorHandler;

      // Explicitly connect to the BOS now.
      // Note that no data source connection is made until entities are accessed.
      try {
        mgr.Connect();
      } catch (EntityServerException ese) {
        MessageBox.Show(ese.Message, "EntityServerException");
      } catch (Exception e) {
        MessageBox.Show(e.Message, "Exception");
      }
      return mgr.IsConnected;
    }
    private void EntityServerErrorHandler(object pSender, EntityServerErrorEventArgs e) {
      // Always a good idea to log all exception info.
      Exception ex = e.Exception;
      while (ex != null) {
        TraceFns.WriteLine(ex.ToString());
        ex = ex.InnerException;
      }
      MessageBox.Show("Trying to handle error");
      // Leave e.Handled = false if the Error should be thrown back to the calling code
      e.Handled = true;         // exception will not be thrown
    }
	</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.ConnectAsync(System.Action{IdeaBlade.EntityModel.BaseOperation},System.Object)">
            <summary>
            Connect to the <see cref="T:IdeaBlade.EntityModel.Server.EntityServer"/> asynchronously.
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.Disconnect"/>
            <seealso cref="T:IdeaBlade.EntityModel.Server.EntityServer"/>
            </summary>
            <param name="userCallback">Optional callback called when the operation completes</param>
            <param name="userState">Optional user token identifying the operation</param>
            <remarks>
            Use <b>ConnectAsync</b> and <see cref="M:IdeaBlade.EntityModel.EntityManager.Disconnect"/> to manage the connection to the 
            EntityServer.  You should have an <see cref="E:IdeaBlade.EntityModel.EntityManager.EntityServerError"/> handler in place
            to catch connection failures.
            <para>
            In Silverlight applications, <b>ConnectAsync</b> is called implicitly when you construct an
            EntityManager with either the default constructor or a constructor with a true "shouldConnect" argument.
            In these cases, you may want to check the <see cref="P:IdeaBlade.EntityModel.EntityManager.IsConnected"/> property before issuing other
            requests.
            </para>
            <para>
            <b>Connect</b> does not connect to any backend data sources.  
            </para>
            </remarks>
            <exception cref="T:IdeaBlade.EntityModel.EntityServerException"/>
            <example><code lang="C#">
    private bool Initialize() {
      string runTimeEnv;
#if TEST
      runTimeEnv = "Test";
#else
      runTimeEnv = "Prod";
#endif

      // Initialize an EntityManager for the given data source extension, and set up an error handler.
      IdeaBladeTest1Manager mgr = new IdeaBladeTest1Manager(false, runTimeEnv);
      mgr.EntityServerError += EntityServerErrorHandler;

      // Explicitly connect to the BOS now.
      // Note that no data source connection is made until entities are accessed.
      try {
        mgr.Connect();
      } catch (EntityServerException ese) {
        MessageBox.Show(ese.Message, "EntityServerException");
      } catch (Exception e) {
        MessageBox.Show(e.Message, "Exception");
      }
      return mgr.IsConnected;
    }
    private void EntityServerErrorHandler(object pSender, EntityServerErrorEventArgs e) {
      // Always a good idea to log all exception info.
      Exception ex = e.Exception;
      while (ex != null) {
        TraceFns.WriteLine(ex.ToString());
        ex = ex.InnerException;
      }
      MessageBox.Show("Trying to handle error");
      // Leave e.Handled = false if the Error should be thrown back to the calling code
      e.Handled = true;         // exception will not be thrown
    }
	</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IdeaBlade#EntityModel#IEntityManagerAsync#BeginConnect(System.AsyncCallback,System.Object)">
            <summary>
            Begin an asynchronous operation to connect to the <see cref="T:IdeaBlade.EntityModel.Server.EntityServer"/>.
            </summary>
            <param name="callback">Optional callback called when the operation completes</param>
            <param name="userState">Optional user token identifying the operation</param>
            <returns>An <see cref="T:IdeaBlade.EntityModel.AsyncResult"/> representing the status of the asynchronous operation</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IdeaBlade#EntityModel#IEntityManagerAsync#EndConnect(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous connect operation to complete.
            </summary>
            <param name="asyncResult"><see cref="T:IdeaBlade.EntityModel.AsyncResult"/> returned by BeginConnect</param>
            <remarks>
            <b>EndConnect</b> will block if the operation has not completed.  To avoid this you should call
            this method from within the AsyncCallback method passed to the <b>BeginConnect</b> call.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.Disconnect">
            <summary>
            Disconnect from the <see cref="T:IdeaBlade.EntityModel.Server.EntityServer"/>.
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.Connect"/>
            <seealso cref="T:IdeaBlade.EntityModel.Server.EntityServer"/>
            </summary>
            <remarks>
            <b>Disconnect</b> marks the connection to the EntityServer as closed.  Once disconnected,
            all further queries will be fulfilled using only cached entities, and any <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges"/>
            call will fail.  Note that a "null" entity is returned for any requested object not 
            found in cache. 
            <para>
            <b>Disconnect</b> does not explicitly close data source connections.
            </para>
            </remarks>
            <example><code lang="C#">
    private bool Initialize() {
      string runTimeEnv;
#if TEST
      runTimeEnv = "Test";
#else
      runTimeEnv = "Prod";
#endif

      // Initialize an EntityManager for the given data source extension, and set up an error handler.
      IdeaBladeTest1Manager mgr = new IdeaBladeTest1Manager(false, runTimeEnv);
      mgr.EntityServerError += EntityServerErrorHandler;

      // Explicitly connect to the BOS now.
      // Note that no data source connection is made until entities are accessed.
      try {
        mgr.Connect();
      } catch (EntityServerException ese) {
        MessageBox.Show(ese.Message, "EntityServerException");
      } catch (Exception e) {
        MessageBox.Show(e.Message, "Exception");
      }
      return mgr.IsConnected;
    }
    private void EntityServerErrorHandler(object pSender, EntityServerErrorEventArgs e) {
      // Always a good idea to log all exception info.
      Exception ex = e.Exception;
      while (ex != null) {
        TraceFns.WriteLine(ex.ToString());
        ex = ex.InnerException;
      }
      MessageBox.Show("Trying to handle error");
      // Leave e.Handled = false if the Error should be thrown back to the calling code
      e.Handled = true;         // exception will not be thrown
    }
	</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.InvokeServerMethod(IdeaBlade.EntityModel.ServerMethodDelegate,System.Object[])">
            <summary>
            Invokes the specified <c>static</c> (<c>Shared</c> in Visual Basic) method for execution on the server.
            </summary>
            <param name="serverMethod">Method to be invoked</param>
            <param name="args">Arguments to be passed to method</param>
            <remarks>The method called must be marked with the <see cref="T:IdeaBlade.EntityModel.AllowRpcAttribute"/>
            and correspond to the <see cref="T:IdeaBlade.EntityModel.ServerMethodDelegate">ServerMethodDelegate</see> signature.
            <para>
            <b>InvokeServerMethod</b> enables a client-side caller to invoke an arbitrary static method 
            on the server. The method can return any kind of serializable object.  
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Invalid ServerMethodDelegate provided</exception>
            <exception cref="T:System.Security.SecurityException">Thrown if the method is not marked with the
            <see cref="T:IdeaBlade.EntityModel.AllowRpcAttribute"/></exception>
            <exception cref="T:IdeaBlade.EntityModel.PersistenceSecurityException">Thrown if the server method is decorated
            with an <see cref="T:IdeaBlade.Core.DomainServices.AuthorizationAttribute">AuthorizationAttribute</see> 
            and the user is not authorized to execute the method.
            </exception>
            <example><code lang="C#">
// Sample showing invocation of server method
EntityManager mgr = new DomainModelEntityManager();
int orderId = 10250;
bool mailSent = (bool) mgr.InvokeServerMethod(Order.EmailOrderInfo, orderId);

// sample method defined in Order class
public class Order {
//...
  // ServerMethodDelegate method, called from client
  [AllowRpc]
  public static Object EmailOrderInfo(IPrincipal pPrincipal, EntityManager pPm, params Object[] pArgs) {
    int orderId = Convert.ToInt32(pArgs[0]);

    // build and send an email message 
    string from = "sales@mycompany.com";
    string to = "customer@yourcompany.com";
    System.Net.Mail.MailMessage msg = new System.Net.Mail.MailMessage(from, to);
    msg.Subject = "Order Information";
    msg.Body = string.Format("Order id = {0} has been shipped", orderId);

    System.Net.Mail.SmtpClient mailClient = new System.Net.Mail.SmtpClient("localhost");
    try {
      mailClient.Send(msg);
    } catch (Exception e) {
      TraceFns.WriteLine(e.Message);
      return false;
    }
    return true;
 }
}
</code></example><example><code lang="VB">
 ' Sample showing invocation of server method
Dim mgr As EntityManager As New DomainModelEntityManager()
Dim orderId As Integer = 10250
Dim mailSent As Boolean = CBool(mgr.InvokeServerMethod(Order.EmailOrderInfo, orderId))

' sample method defined in Order class
Public Class Order 
'...
  Public Shared&lt;AllowRpc()&gt;  _
  Function EmailOrderInfo(pPrincipal As IPrincipal, pManager As EntityManager, ParamArray pArgs() As [Object]) As [Object]
    Dim orderId As Integer = Convert.ToInt32(pArgs(0))
   
    ' build and send an email message 
    Dim from As String = "sales@mycompany.com"
    Dim [to] As String = "customer@yourcompany.com"
    Dim msg As New System.Net.Mail.MailMessage(from, [to])
   
    msg.Subject = "Order Information"
    msg.Body = String.Format("Order id = {0} has been shipped", orderId)
   
    Dim client As New System.Net.Mail.SmtpClient("localhost")
    Try
      client.Send(msg)
    Catch e As Exception
      TraceFns.WriteLine(e.Message)
      Return False
   End Try
   Return True
 End Function 
End Class
	</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.InvokeServerMethod(System.String,System.String,System.Object[])">
            <summary>
            Invokes the specified static method for execution on the server.
            </summary>
            <param name="fullTypeName">Assembly-qualified type name such as 'MyNamespace.Services, MyAssembly'</param>
            <param name="methodName">Name of method to be invoked</param>
            <param name="args">Arguments to be passed to method</param>
            <remarks>The method called must be marked with the <see cref="T:IdeaBlade.EntityModel.AllowRpcAttribute"/>
            and correspond to the <see cref="T:IdeaBlade.EntityModel.ServerMethodDelegate">ServerMethodDelegate</see> signature.
            <para>
            <b>InvokeServerMethod</b> enables a client-side caller to invoke an arbitrary static method 
            on the server. The method can return any kind of serializable object.
            </para>
            This feature is only available in certain editions of DevForce.
            </remarks>
            <exception cref="T:System.ArgumentException">Type name must be an assembly qualified type name.</exception>
            <exception cref="T:System.Security.SecurityException">Thrown if the method is not marked with the
            <see cref="T:IdeaBlade.EntityModel.AllowRpcAttribute"/></exception>
            <exception cref="T:IdeaBlade.EntityModel.PersistenceSecurityException">Thrown if the server method is decorated
            with an <see cref="T:IdeaBlade.Core.DomainServices.AuthorizationAttribute">AuthorizationAttribute</see> 
            and the user is not authorized to execute the method.
            </exception>
            <example><code lang="C#">
// Sample showing invocation of server method
EntityManager mgr = new DomainModelEntityManager();
int orderId = 10250;
bool mailSent = (bool) mgr.InvokeServerMethod(Order.EmailOrderInfo, orderId);

// sample method defined in Order class
public class Order {
//...
  // ServerMethodDelegate method, called from client
  [AllowRpc]
  public static Object EmailOrderInfo(IPrincipal pPrincipal, EntityManager pPm, params Object[] pArgs) {
    int orderId = Convert.ToInt32(pArgs[0]);

    // build and send an email message 
    string from = "sales@mycompany.com";
    string to = "customer@yourcompany.com";
    System.Net.Mail.MailMessage msg = new System.Net.Mail.MailMessage(from, to);
    msg.Subject = "Order Information";
    msg.Body = string.Format("Order id = {0} has been shipped", orderId);

    System.Net.Mail.SmtpClient mailClient = new System.Net.Mail.SmtpClient("localhost");
    try {
      mailClient.Send(msg);
    } catch (Exception e) {
      TraceFns.WriteLine(e.Message);
      return false;
    }
    return true;
 }
}
</code></example><example><code lang="VB">
 ' Sample showing invocation of server method
Dim mgr As EntityManager As New DomainModelEntityManager()
Dim orderId As Integer = 10250
Dim mailSent As Boolean = CBool(mgr.InvokeServerMethod(Order.EmailOrderInfo, orderId))

' sample method defined in Order class
Public Class Order 
'...
  Public Shared&lt;AllowRpc()&gt;  _
  Function EmailOrderInfo(pPrincipal As IPrincipal, pManager As EntityManager, ParamArray pArgs() As [Object]) As [Object]
    Dim orderId As Integer = Convert.ToInt32(pArgs(0))
   
    ' build and send an email message 
    Dim from As String = "sales@mycompany.com"
    Dim [to] As String = "customer@yourcompany.com"
    Dim msg As New System.Net.Mail.MailMessage(from, [to])
   
    msg.Subject = "Order Information"
    msg.Body = String.Format("Order id = {0} has been shipped", orderId)
   
    Dim client As New System.Net.Mail.SmtpClient("localhost")
    Try
      client.Send(msg)
    Catch e As Exception
      TraceFns.WriteLine(e.Message)
      Return False
   End Try
   Return True
 End Function 
End Class
	</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.InvokeServerMethodAsync(IdeaBlade.EntityModel.ServerMethodDelegate,System.Object[])">
            <summary>
            Asynchronously invokes the specified <c>static</c> (<c>Shared</c> in Visual Basic) method for execution on the server.
            </summary>
            <param name="serverMethod">Method to be invoked</param>
            <param name="args">Arguments to be passed to method</param>
            <remarks>The method called must be marked with the <see cref="T:IdeaBlade.EntityModel.AllowRpcAttribute"/>
            and correspond to the <see cref="T:IdeaBlade.EntityModel.ServerMethodDelegate">ServerMethodDelegate</see> signature.
            <para>
            <b>InvokeServerMethodAsync</b> enables a client-side caller to invoke an arbitrary static method 
            on the server using an asynchronous call.  The data returned from the server method 
            will be available in the <see cref="T:IdeaBlade.EntityModel.InvokeServerMethodEventArgs"/> passed to
            the supplied callback.  The server method is called once only.
            An outstanding request can be canceled using the <see cref="M:IdeaBlade.EntityModel.EntityManager.CancelAsync(System.Object)"/> method.
            </para>
            <para>
            Note that this request is run on a separate client thread.  That thread will block until the server
            request completes or is canceled.
            </para>
            This feature is only available in certain editions of DevForce.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Invalid ServerMethodDelegate provided</exception>
            <exception cref="T:System.ArgumentException">UserState token must be unique for the client</exception>
            <exception cref="T:System.Security.SecurityException">Thrown if the method is not marked with the
            <see cref="T:IdeaBlade.EntityModel.AllowRpcAttribute"/></exception>
            <exception cref="T:IdeaBlade.EntityModel.PersistenceSecurityException">Thrown if the server method is decorated with a <see cref="T:IdeaBlade.Core.DomainServices.AuthorizationAttribute">AuthorizationAttribute</see> and fails authorization</exception>
            <example><code lang="C#">
	<![CDATA[
// Sample showing asynchronous invocation of server method

// In client class:
private void MakeAsyncCall() {
  EntityManager mgr = new DomainModelEntityManager();
  // Make async call
  Guid myToken = Guid.NewGuid();
  mgr.InvokeServerMethodAsync(new ServerMethodDelegate(Order.GetNumberOfOrdersSlow), 
      InvokeServerMethodAsyncCompleted, myToken, 
 	    new DateTime(1995, 1, 1), new DateTime(1999, 1, 1));
}
private void InvokeServerMethodAsyncCompleted(InvokeServerMethodOperation e) {
  Guid token = (Guid)e.UserState;
  if (!e.Cancelled) {
     MessageBox.Show("my async result = " + Convert.ToInt32(e.Result).ToString());
  }
}

// Sample method defined in Order entity class:
public class Order {
//...

  // ServerMethodDelegate method, called from client
  [AllowRpc]
  public static Object GetNumberOfOrdersSlow(IPrincipal pPrincipal, EntityManager pMgr, params Object[] pArgs) {
     // Sleep to make this slower to show async
     System.Threading.Thread.Sleep(2000);
     DateTime dt1 = pArgs[0] as DateTime;
     DateTime dt2 = pArgs[1] as DateTime;
     return pMgr.Order.Where(o => o.OrderDate >= dt1 && o.OrderDate <= dt2).Count();
  }
}
]]>
    </code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.InvokeServerMethodAsync(IdeaBlade.EntityModel.ServerMethodDelegate,System.Action{IdeaBlade.EntityModel.InvokeServerMethodOperation},System.Object,System.Object[])">
            <summary>
            Asynchronously invokes the specified <c>static</c> (<c>Shared</c> in Visual Basic) method for execution on the server.
            </summary>
            <param name="serverMethod">Method to be invoked</param>
            <param name="userCallback">Handler called when operation completes</param>
            <param name="userState">Token identifying the asynchronous request</param>
            <param name="args">Arguments to be passed to method</param>
            <remarks>The method called must be marked with the <see cref="T:IdeaBlade.EntityModel.AllowRpcAttribute"/>
            and correspond to the <see cref="T:IdeaBlade.EntityModel.ServerMethodDelegate">ServerMethodDelegate</see> signature.
            <para>
            <b>InvokeServerMethodAsync</b> enables a client-side caller to invoke an arbitrary static method 
            on the server using an asynchronous call.  The data returned from the server method 
            will be available in the <see cref="T:IdeaBlade.EntityModel.InvokeServerMethodEventArgs"/> passed to
            the supplied callback.  The server method is called once only.
            An outstanding request can be canceled using the <see cref="M:IdeaBlade.EntityModel.EntityManager.CancelAsync(System.Object)"/> method.
            </para>
            <para>
            Note that this request is run on a separate client thread.  That thread will block until the server
            request completes or is canceled.
            </para>
            This feature is only available in certain editions of DevForce.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Invalid ServerMethodDelegate provided</exception>
            <exception cref="T:System.ArgumentException">UserState token must be unique for the client</exception>
            <exception cref="T:System.Security.SecurityException">Thrown if the method is not marked with the
            <see cref="T:IdeaBlade.EntityModel.AllowRpcAttribute"/></exception>
            <exception cref="T:IdeaBlade.EntityModel.PersistenceSecurityException">Thrown if the server method is decorated with a <see cref="T:IdeaBlade.Core.DomainServices.AuthorizationAttribute">AuthorizationAttribute</see> and fails authorization</exception>
            <example><code lang="C#">
	<![CDATA[
// Sample showing asynchronous invocation of server method

// In client class:
private void MakeAsyncCall() {
  EntityManager mgr = new DomainModelEntityManager();
  // Make async call
  Guid myToken = Guid.NewGuid();
  mgr.InvokeServerMethodAsync(new ServerMethodDelegate(Order.GetNumberOfOrdersSlow), 
      InvokeServerMethodAsyncCompleted, myToken, 
 	    new DateTime(1995, 1, 1), new DateTime(1999, 1, 1));
}
private void InvokeServerMethodAsyncCompleted(InvokeServerMethodOperation e) {
  Guid token = (Guid)e.UserState;
  if (!e.Cancelled) {
     MessageBox.Show("my async result = " + Convert.ToInt32(e.Result).ToString());
  }
}

// Sample method defined in Order entity class:
public class Order {
//...

  // ServerMethodDelegate method, called from client
  [AllowRpc]
  public static Object GetNumberOfOrdersSlow(IPrincipal pPrincipal, EntityManager pMgr, params Object[] pArgs) {
     // Sleep to make this slower to show async
     System.Threading.Thread.Sleep(2000);
     DateTime dt1 = pArgs[0] as DateTime;
     DateTime dt2 = pArgs[1] as DateTime;
     return pMgr.Order.Where(o => o.OrderDate >= dt1 && o.OrderDate <= dt2).Count();
  }
}
]]>
    </code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.InvokeServerMethodAsync(System.String,System.String,System.Action{IdeaBlade.EntityModel.InvokeServerMethodOperation},System.Object,System.Object[])">
            <summary>
            Asynchronously invokes the specified <c>static</c> (<c>Shared</c> in Visual Basic) method for execution on the server.
            </summary>
            <param name="fullTypeName">Assembly-qualified type name such as 'MyNamespace.Services, MyAssembly'</param>
            <param name="methodName">Name of method to be invoked</param>
            <param name="userCallback">Callback called when the operation completes</param>
            <param name="userState">Token identifying the asynchronous request</param>
            <param name="userArguments">Arguments to be passed to method</param>
            <remarks>The method called must be marked with the <see cref="T:IdeaBlade.EntityModel.AllowRpcAttribute"/>
            and correspond to the <see cref="T:IdeaBlade.EntityModel.ServerMethodDelegate"/> signature.
            <para>
            <b>InvokeServerMethodAsync</b> enables a client-side caller to invoke an arbitrary static method 
            on the server using an asynchronous call.  The data returned from the server method 
            will be available in the <see cref="T:IdeaBlade.EntityModel.InvokeServerMethodEventArgs"/> passed to the
            callback provided.  The server method is called once only.
            An outstanding request can be canceled using the <see cref="M:IdeaBlade.EntityModel.EntityManager.CancelAsync(System.Object)"/> method.
            </para>
            <para>
            Note that this request is run on a separate client thread.  That thread will block until the server
            request completes or is canceled.
            </para>
            This feature is only available in certain editions of DevForce.
            </remarks>
            <exception cref="T:System.ArgumentException">Type name must be fully qualified</exception>
            <exception cref="T:System.ArgumentException">UserState token must be unique for the client</exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <example><code lang="C#">
	<![CDATA[
// Sample showing asynchronous invocation of server method

// In client class:
private void MakeAsyncCall() {
  EntityManager mgr = new DomainModelEntityManager();
  // Make async call
  Guid myToken = Guid.NewGuid();
  mgr.InvokeServerMethodAsync(new ServerMethodDelegate(Order.GetNumberOfOrdersSlow), 
      InvokeServerMethodAsyncCompleted, myToken, 
 	    new DateTime(1995, 1, 1), new DateTime(1999, 1, 1));
}
private void InvokeServerMethodAsyncCompleted(InvokeServerMethodOperation e) {
  Guid token = (Guid)e.UserState;
  if (!e.Cancelled) {
     MessageBox.Show("my async result = " + Convert.ToInt32(e.Result).ToString());
  }
}

// Sample method defined in Order entity class:
public class Order {
//...

  // ServerMethodDelegate method, called from client
  [AllowRpc]
  public static Object GetNumberOfOrdersSlow(IPrincipal pPrincipal, EntityManager pMgr, params Object[] pArgs) {
     // Sleep to make this slower to show async
     System.Threading.Thread.Sleep(2000);
     DateTime dt1 = pArgs[0] as DateTime;
     DateTime dt2 = pArgs[1] as DateTime;
     return pMgr.Order.Where(o => o.OrderDate >= dt1 && o.OrderDate <= dt2).Count();
  }
}
]]>
    </code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IdeaBlade#EntityModel#IEntityManagerAsync#BeginInvokeServerMethod(System.String,System.String,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            Begin an asynchronous <see cref="M:IdeaBlade.EntityModel.EntityManager.InvokeServerMethod(System.String,System.String,System.Object[])"/> operation.
            </summary>
            <param name="fullTypeName">Assembly-qualified type name such as 'MyNamespace.Services, MyAssembly'</param>
            <param name="methodName">Name of method to be invoked</param>
            <param name="callback">Callback called when the operation completes</param>
            <param name="userState">Token identifying the asynchronous request</param>
            <param name="userArguments">Arguments to be passed to method</param>
            <returns>AsyncResult holding the status of the asynchronous operation</returns>
            <remarks>
            Call the <see cref="M:IdeaBlade.EntityModel.IEntityManagerAsync.EndInvokeServerMethod(System.IAsyncResult)"/> method with the <see cref="T:System.IAsyncResult"/> returned
            to complete the asynchronous operation and retrieve the result.  
            This feature is only available in certain editions of DevForce.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IdeaBlade#EntityModel#IEntityManagerAsync#EndInvokeServerMethod(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous <see cref="M:IdeaBlade.EntityModel.EntityManager.InvokeServerMethod(System.String,System.String,System.Object[])"/> operation to complete and returns the result.
            </summary>
            <param name="asyncResult">AsyncResult returned by BeginInvokeServerMethod</param>
            <returns>Requested data</returns>
            <remarks>
            <b>EndInvokeServerMethod</b> will block if the operation has not completed.  To avoid this you should call
            this method from within the AsyncCallback method passed in the <b>BeginInvokeServerMethod</b> call.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.RegisterCallback(IdeaBlade.EntityModel.ServerNotifyDelegate,System.Action{IdeaBlade.EntityModel.SubscriptionOperation},System.Object,System.Object[])">
            <summary>
            Register a client subscription to a server "push" method.
            </summary>
            <param name="serverDelegate">Server method providing the "push" service</param>
            <param name="callback">Client method handling pushed data</param>
            <param name="userToken">Token identifying the request</param>
            <param name="clientArgs">Optional arguments which can be passed to service code</param>
            <remarks>
            Use <b>RegisterCallback</b> to register a client for messages or data "pushed" from the server.  
            The <paramref name="serverDelegate"/> indicates the method on the server which performs processing which the
            client wants to "subscribe" to.   The <paramref name="callback"/> indicates the
            client-side method which will be called whenever the server method pushes data.  The <paramref name="userToken"/>
            should be used to identify the client request.  It does not have to be unique acrosss all clients, but it must
            be unique for all requests from a single client.  The <paramref name="clientArgs"/> can be used to pass
            argument data from the client through to the server.  The server code can query for these arguments
            using the <b>INotificationManager.GetSubscribers</b> method.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the serverDelegate is not a static method</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the callback action is not provided</exception>
            <exception cref="T:System.NotSupportedException">Thrown if called from server code</exception>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.RegisterCallback(System.String,System.String,System.Action{IdeaBlade.EntityModel.SubscriptionOperation},System.Object,System.Object[])">
            <summary>
            Register a client subscription to a server "push" method.
            </summary>
            <param name="serviceTypeName">Name of type containing the service method</param>
            <param name="serviceMethodName">Name of service method</param>
            <param name="callback">Client method handling the pushed data</param>
            <param name="userToken">Token identifying the request</param>
            <param name="clientArgs">Optional arguments which can be passed to server code</param>
            <remarks>
            Use <b>RegisterCallback</b> to register a client for messages or data "pushed" from the server.  
            The <paramref name="serviceTypeName"/> and <paramref name="serviceMethodName"/> parameters indicate the method on the server which performs processing which the
            client wants to "subscribe" to.   The <paramref name="callback"/> indicates the
            client-side method which will be called whenever the server method pushes data.  The <paramref name="userToken"/>
            should be used to identify the client request.  It does not have to be unique acrosss all clients, but it must
            be unique for all requests from a single client.  The <paramref name="clientArgs"/> can be used to pass
            argument data from the client through to the server.  The server code can query for these arguments
            using the <b>INotificationManager.GetSubscribers</b> method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if the callback action is not provided</exception>
            <exception cref="T:System.ArgumentException">Thrown if the serviceTypeName is not fully qualified</exception>
            <exception cref="T:System.NotSupportedException">Thrown if called from server code</exception>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.CancelCallback(System.Object)">
            <summary>
            Cancel an existing subscription to a server "push" method.
            </summary>
            <remarks>
            </remarks>
            <param name="userToken">Token identifying the request to be cancelled</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the userToken is null</exception>
            <exception cref="T:System.NotSupportedException">Thrown if called from server code</exception>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.GetQuery``1">
            <summary>
            Return an EntityQuery to retrieve entities of the specified type.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.GetQuery``1(System.String)">
            <summary>
            Return an EntityQuery to retrieve entities of the specified type.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="entitySetName">Name of entity set</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.GenerateId(System.Object,IdeaBlade.EntityModel.DataEntityProperty)">
            <summary>
            Generates a temporary ID for an <see cref="T:IdeaBlade.EntityModel.IEntity"/>.  The temporary ID will be mapped to a real ID when
            <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges"/> is called.
            <seealso cref="T:IdeaBlade.EntityModel.IIdGenerator"/>
            </summary>
            <param name="entity">The Entity object for which the new ID will be generated</param>
            <param name="entityProperty">The EntityProperty in which the new ID will be set </param>
            <remarks>
            You must implement the <see cref="T:IdeaBlade.EntityModel.IIdGenerator"/> interface to use ID generation.  See the
            <b>DevForce Developer's Guide</b> for more information on custom ID generation.
            <para>
            If you are using a SQL Server <b>Identity</b> property you do not need to call <b>GenerateId</b>
            for the property.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Incorrect entity type/property</exception>
            <exception cref="T:IdeaBlade.Core.IdeaBladeException">IdGenerator not found</exception>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.ForceIdFixupAsync">
            <summary>
            Perform an asynchronous <see cref="M:IdeaBlade.EntityModel.EntityManager.ForceIdFixup"/> operation.
            </summary>
            <remarks>
            Auto-generated temporary IDs are automatically "fixed up" during save processing.  You
            can force that fixup to be done prior to a save by calling this method.
            An exception will be thrown if any entity properties whose schema definition
            has a <b>StoreGeneratedPattern="identity"</b> attribute are pending fixup,
            since these IDs can only be assigned during a save operation.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.ForceIdFixupAsync(System.Action{IdeaBlade.EntityModel.BaseOperation},System.Object)">
            <summary>
            Perform an asynchronous <see cref="M:IdeaBlade.EntityModel.EntityManager.ForceIdFixup"/> operation.
            </summary>
            <param name="callback">Callback invoked when asynchronous operation completes</param>
            <param name="userState">Token identifying the asynchronous operation</param>
            <remarks>
            Provide a <paramref name="callback"/> if you want to be notified when the operation completes.
            Use the <paramref name="userState"/> to uniquely identify this call.  You can cancel a pending
            asynchronous call using <see cref="M:IdeaBlade.EntityModel.BaseOperation.Cancel"/>.
            Auto-generated temporary IDs are automatically "fixed up" during save processing.  You
            can force that fixup to be done prior to a save by calling this method.
            An exception will be thrown if any entity properties whose schema definition
            has a <b>StoreGeneratedPattern="identity"</b> attribute are pending fixup,
            since these IDs can only be assigned during a save operation.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IdeaBlade#EntityModel#IEntityManagerAsync#BeginForceIdFixup(System.AsyncCallback,System.Object)">
            <summary>
            Begin an asynchronous <see cref="M:IdeaBlade.EntityModel.EntityManager.ForceIdFixup"/> operation.
            </summary>
            <param name="asyncCallback">Callback invoked when the asynchronous operation completes</param>
            <param name="userState">Token identifying the asynchronous operation</param>
            <returns>AsyncResult holding the status of the asynchronous operation</returns>
            <remarks>
            Call the <see cref="M:IdeaBlade.EntityModel.IEntityManagerAsync.EndForceIdFixup(System.IAsyncResult)"/> method with the <see cref="T:System.IAsyncResult"/> returned
            to complete the asynchronous Id fixup operation.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IdeaBlade#EntityModel#IEntityManagerAsync#EndForceIdFixup(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous Id fixup operation to complete.
            </summary>
            <param name="result">AsyncResult returned by BeginForceIdFixup</param>
            <remarks>
            <b>EndForceIdFixup</b> will block if the operation has not completed.  To avoid this you should call
            this method from within the AsyncCallback method passed in the <b>BeginForceIdFixup</b> call.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.ImportEntities(System.Collections.IEnumerable,IdeaBlade.EntityModel.MergeStrategy)">
            <summary>
            Import entities from another EntityManager into this one.
            </summary>
            <param name="entities">Collection of entities</param>
            <param name="mergeStrategy">MergeStrategy to use in loading entities into cache</param>
            <returns>A dictionary that maps of original entityAspects to the newly merged entityAspects.</returns>
            <remarks>
            The entities may be from one or more EntityManagers.  EntityState from the imported entities
            is preserved. 
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.GetEntityGroups">
            <summary>
            Collection of all <see cref="T:IdeaBlade.EntityModel.EntityGroup"/>s within the cache.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IsEntityType(System.Type)">
            <summary>
            Determines if the specified type is an entity type.
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>
            Equivalent to <see cref="M:IdeaBlade.EntityModel.EntityMetadata.IsEntityType(System.Type)"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.GetEntityGroup(System.Type)">
            <summary>
            Returns the EntityGroup associated with a specific Entity subtype.
            </summary>
            <param name="entityType">An <see cref="T:IdeaBlade.EntityModel.IEntity"/> subtype</param>
            <returns>The <see cref="T:IdeaBlade.EntityModel.EntityGroup"/> associated with the specified Entity subtype</returns>
            <exception cref="T:System.ArgumentException">Bad entity type</exception>
            <exception cref="T:IdeaBlade.EntityModel.EntityServerException"/>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.GetEntityGroup``1">
            <summary>
            Returns the EntityGroup associated with a specific Entity subtype.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.IsEntityLoaded(IdeaBlade.EntityModel.EntityKey)">
            <summary>
            Returns true if the Entity is in cache.
            </summary>
            <param name="key">Key of entity to check</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.UpdatePkIfNeeded(IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            Insures that a temporary pk is set if necessary
            </summary>
            <param name="aspect"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.OnEntityManagerCreated(IdeaBlade.EntityModel.EntityManagerCreatedEventArgs)">
            <summary>
            Raises the <see cref="E:IdeaBlade.EntityModel.EntityManager.EntityManagerCreated"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.OnQuerying(IdeaBlade.EntityModel.IEntityQuery)">
            <summary>
            Raises the <see cref="E:IdeaBlade.EntityModel.EntityManager.Querying"/> event.
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.OnFetching(IdeaBlade.EntityModel.EntityFetchingEventArgs)">
            <summary>
            Raises the <see cref="E:IdeaBlade.EntityModel.EntityManager.Fetching"/> event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.OnQueried(IdeaBlade.EntityModel.EntityQueriedEventArgs)">
            <summary>
            Raises the <see cref="E:IdeaBlade.EntityModel.EntityManager.Queried"/> event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.OnSaving(IdeaBlade.EntityModel.EntitySavingEventArgs)">
            <summary>
            Raises the <see cref="E:IdeaBlade.EntityModel.EntityManager.Saving"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.OnSaved(IdeaBlade.EntityModel.EntitySavedEventArgs)">
            <summary>
            Raises the <see cref="E:IdeaBlade.EntityModel.EntityManager.Saved"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.OnCleared(IdeaBlade.EntityModel.EntityManagerClearedEventArgs)">
            <summary>
            Raises the <see cref="E:IdeaBlade.EntityModel.EntityManager.Cleared"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.OnConnectionStateChanged">
            <summary>
            Raises the <see cref="E:IdeaBlade.EntityModel.EntityManager.ConnectionStateChanged"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.FindEntity(IdeaBlade.EntityModel.EntityKey)">
            <summary>
            Finds the object in cache using the <see cref="T:IdeaBlade.EntityModel.EntityKey"/> provided.
            </summary>
            <param name="entityKey"></param>
            <returns>Null or the found object</returns>
            <remarks>
            Does not search for deleted objects (those with an EntityState of Detached).
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.FindEntity(IdeaBlade.EntityModel.EntityKey,System.Boolean)">
            <summary>
            Finds the object in cache using the <see cref="T:IdeaBlade.EntityModel.EntityKey"/> provided.
            </summary>
            <param name="entityKey"></param>
            <param name="includeDeleted"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.FindEntityAspect(IdeaBlade.EntityModel.EntityKey,System.Boolean)">
            <summary>
            Find an entity in cache based on its key, optionally including Deleted entities in the lookup.
            </summary>
            <param name="entityKey"></param>
            <param name="includeDeleted">Look at entities with the Deleted EntityState also</param>
            <returns>The requested Entity, or null if not found</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.FindEntities(IdeaBlade.EntityModel.EntityState)">
            <summary>
            Find all entities in cache having the specified entity state(s). (Except EntityState.Detached)
            </summary>
            <param name="entityState">EntityState(s) of entities to return</param>
            <returns></returns>
            <remarks>
            As the <see cref="T:IdeaBlade.EntityModel.EntityState"/> is a flags enumeration, you can supply multiple 
            OR'ed values to search for multiple entity states.
            Detached Entities are not associated with an <see cref="T:IdeaBlade.EntityModel.EntityManager"/> and won't be returned.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.FindEntities``1(IdeaBlade.EntityModel.EntityState)">
            <summary>
            Retrieves all entities of a specified type with the specified entity state(s) from cache. (Except EntityState.Detached)
            </summary>
            <typeparam name="T">The type of Entity to retrieve</typeparam>
            <param name="entityState">EntityState(s) of entities to return</param>
            <returns>A collection of Entities</returns>
            <remarks>
            As the <see cref="T:IdeaBlade.EntityModel.EntityState"/> is a flags enumeration, you can supply multiple 
            OR'ed values to search for multiple entity states.
            Detached Entities are not associated with an <see cref="T:IdeaBlade.EntityModel.EntityManager"/> and won't be returned.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.FindEntities(System.Type,IdeaBlade.EntityModel.EntityState)">
            <summary>
            Retrieves all entities of a specified type with the specified entity state(s) from cache. (Except EntityState.Detached)
            </summary>
            <param name="type">The type of Entity to retrieve</param>
            <param name="entityState">EntityState(s) of entities to return</param>
            <returns>A collection of Entities</returns>
            <remarks>
            As the <see cref="T:IdeaBlade.EntityModel.EntityState"/> is a flags enumeration, you can supply multiple 
            OR'ed values to search for multiple entity states.
            Detached Entities are not associated with an <see cref="T:IdeaBlade.EntityModel.EntityManager"/> and won't be returned.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.ExecuteFetch(IdeaBlade.EntityModel.IEntityFinder)">
            <summary>
            For internal use only.
            </summary>
            <param name="finder"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.ExecuteServerQuery(IdeaBlade.EntityModel.IEntityQuerySurrogate)">
            <summary>
            Returns the results of the query as a DataSet or null if 
            cancelled or errors
            </summary>
            <param name="entityQuery"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.AsyncFetchWorker(IdeaBlade.EntityModel.AsyncEventArgs)">
            <summary>
            This is always executed on a thread pool thread.
            As a background thread, it can be blocked until completion.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.AsyncFetchCompleted``1(``0)">
            <summary>
            Always executed on main thread (thread upon which original call was made) 
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.InitializeWorkStateTempIds(IdeaBlade.EntityModel.SaveWorkState)">
            <summary>
            Retrieve temp ids by data source key.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.ForceIdFixup">
            <summary>
            Force an immediate update of all auto-generated IDs.
            </summary>
            <remarks>
            Auto-generated temporary IDs are automatically "fixed up" during save processing.  You
            can force that fixup to be done prior to a save by calling this method.
            An exception will be thrown if any entity properties whose schema definition
            has a <b>StoreGeneratedPattern="identity"</b> attribute are pending fixup,
            since these IDs can only be assigned during a save operation.
            </remarks>
            <exception cref="T:IdeaBlade.Core.IdeaBladeException"/>
            <exception cref="T:IdeaBlade.EntityModel.EntityServerException">Login, connection, ID fixup failures</exception>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.GetTempIdsInSaveList(IdeaBlade.EntityModel.UniqueIdCollection,System.Collections.Generic.IEnumerable{System.Linq.IGrouping{System.Type,IdeaBlade.EntityModel.EntityAspect}})">
            <summary>
            For the given set of TempIds, return those corresponding to the entities in the save list.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.CheckLogin">
            <summary>
            Perform implicit (non-credential) sync login.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManager.InternalFullReset">
            <summary>
            For internal useOnly; 
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityManager.EntityManagerCreated">
            <summary>
            Event fired whenever a new EntityManager is created.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityManager.Querying">
            <summary>
            Occurs before the EntityManager executes a query.
            </summary>
            <remarks>
            The event handler can modify the <see cref="P:IdeaBlade.EntityModel.EntityQueryingEventArgs.Query"/> if needed, and set
            <b>EntityQueryingEventArgs.Cancel</b> to cancel execution of the query.  If a query is cancelled, a 
            NullEntity or null entity list will be returned.
            </remarks>
            <example><code lang="C#">
    <![CDATA[
       public void EntityManager_EventSample() {

      var mgr = new DomainModelEntityManager();
      // Setup some handlers.
      mgr.Querying += QueryingHandler;
      mgr.Fetching += FetchingHandler;
      mgr.Queried += QueriedHandler;
      mgr.Saving += SavingHandler;
      mgr.Saved += SavedHandler;

      // Now try some fetches and saves.

      var orders = mgr.OrderSummaries
        .Where(o => o.Customer.Id == 1)
        .Include("Customer")
        .Include("OrderDetails").ToList();
      DebugFns.WriteLine("Order count = " + orders.Count.ToString());

      // Change the first order and its details.
      OrderSummary anOrder = orders[0];
      anOrder.Freight = 200;
      foreach (OrderDetail dtl in anOrder.OrderDetails) {
        dtl.Discount = .05F;
      }
      SaveResult sr = mgr.SaveChanges();
    }

    void QueryingHandler(object sender, EntityQueryingEventArgs e) {
      DebugFns.WriteLine("Querying " + e.Query.ToString());
    }

    void FetchingHandler(object sender, EntityFetchingEventArgs e) {
      DebugFns.WriteLine("Fetching " + e.Query.ToString());
    }

    void QueriedHandler(object sender, EntityQueriedEventArgs e) {
      DebugFns.WriteLine("Queried " + e.Query.ToString());
      foreach (Entity anEntity in e.Results) {
        DebugFns.WriteLine("Queried - " + anEntity.EntityKey.ToString());
      }
    }

    void SavingHandler(object sender, EntitySavingEventArgs e) {
      foreach (Entity anEntity in e.Entities) {
        DebugFns.WriteLine("Saving - " + anEntity.EntityKey.ToString() + " - " + anEntity.EntityState.ToString());
      }
    }
    void SavedHandler(object sender, EntitySavedEventArgs e) {
      foreach (Entity anEntity in e.Entities) {
        DebugFns.WriteLine("Saved - " + anEntity.EntityKey.ToString());
      }
    }
    ]]>
	</code></example>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityManager.Fetching">
            <summary>
            Occurs before the EntityManager fetches data from an EntityServer. This event will only occur
            if the query will not be satisfied out of the local cache.
            </summary>
            <remarks>
            The event handler can set
            <b>EntityFetchingEventArgs.Cancel</b> to cancel the fetch.  If a fetch is cancelled, a 
            NullEntity or null entity list will be returned.
            </remarks>
            <example><code lang="C#">
    <![CDATA[
       public void EntityManager_EventSample() {

      var mgr = new DomainModelEntityManager();
      // Setup some handlers.
      mgr.Querying += QueryingHandler;
      mgr.Fetching += FetchingHandler;
      mgr.Queried += QueriedHandler;
      mgr.Saving += SavingHandler;
      mgr.Saved += SavedHandler;

      // Now try some fetches and saves.

      var orders = mgr.OrderSummaries
        .Where(o => o.Customer.Id == 1)
        .Include("Customer")
        .Include("OrderDetails").ToList();
      DebugFns.WriteLine("Order count = " + orders.Count.ToString());

      // Change the first order and its details.
      OrderSummary anOrder = orders[0];
      anOrder.Freight = 200;
      foreach (OrderDetail dtl in anOrder.OrderDetails) {
        dtl.Discount = .05F;
      }
      SaveResult sr = mgr.SaveChanges();
    }

    void QueryingHandler(object sender, EntityQueryingEventArgs e) {
      DebugFns.WriteLine("Querying " + e.Query.ToString());
    }

    void FetchingHandler(object sender, EntityFetchingEventArgs e) {
      DebugFns.WriteLine("Fetching " + e.Query.ToString());
    }

    void QueriedHandler(object sender, EntityQueriedEventArgs e) {
      DebugFns.WriteLine("Queried " + e.Query.ToString());
      foreach (Entity anEntity in e.Results) {
        DebugFns.WriteLine("Queried - " + anEntity.EntityKey.ToString());
      }
    }

    void SavingHandler(object sender, EntitySavingEventArgs e) {
      foreach (Entity anEntity in e.Entities) {
        DebugFns.WriteLine("Saving - " + anEntity.EntityKey.ToString() + " - " + anEntity.EntityState.ToString());
      }
    }
    void SavedHandler(object sender, EntitySavedEventArgs e) {
      foreach (Entity anEntity in e.Entities) {
        DebugFns.WriteLine("Saved - " + anEntity.EntityKey.ToString());
      }
    }
    ]]>
	</code></example>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityManager.Queried">
            <summary>
            Occurs after the EntityManager has completed processing of a query.
            </summary>
            <remarks>
            The <see cref="P:IdeaBlade.EntityModel.EntityQueriedEventArgs.Results"/> list might be empty if the query was satisfied from cache only.
            If a span query was used, multiple entity types may be found in the list.
            </remarks>
            <example><code lang="C#">
    <![CDATA[
       public void EntityManager_EventSample() {

      var mgr = new DomainModelEntityManager();
      // Setup some handlers.
      mgr.Querying += QueryingHandler;
      mgr.Fetching += FetchingHandler;
      mgr.Queried += QueriedHandler;
      mgr.Saving += SavingHandler;
      mgr.Saved += SavedHandler;

      // Now try some fetches and saves.

      var orders = mgr.OrderSummaries
        .Where(o => o.Customer.Id == 1)
        .Include("Customer")
        .Include("OrderDetails").ToList();
      DebugFns.WriteLine("Order count = " + orders.Count.ToString());

      // Change the first order and its details.
      OrderSummary anOrder = orders[0];
      anOrder.Freight = 200;
      foreach (OrderDetail dtl in anOrder.OrderDetails) {
        dtl.Discount = .05F;
      }
      SaveResult sr = mgr.SaveChanges();
    }

    void QueryingHandler(object sender, EntityQueryingEventArgs e) {
      DebugFns.WriteLine("Querying " + e.Query.ToString());
    }

    void FetchingHandler(object sender, EntityFetchingEventArgs e) {
      DebugFns.WriteLine("Fetching " + e.Query.ToString());
    }

    void QueriedHandler(object sender, EntityQueriedEventArgs e) {
      DebugFns.WriteLine("Queried " + e.Query.ToString());
      foreach (Entity anEntity in e.Results) {
        DebugFns.WriteLine("Queried - " + anEntity.EntityKey.ToString());
      }
    }

    void SavingHandler(object sender, EntitySavingEventArgs e) {
      foreach (Entity anEntity in e.Entities) {
        DebugFns.WriteLine("Saving - " + anEntity.EntityKey.ToString() + " - " + anEntity.EntityState.ToString());
      }
    }
    void SavedHandler(object sender, EntitySavedEventArgs e) {
      foreach (Entity anEntity in e.Entities) {
        DebugFns.WriteLine("Saved - " + anEntity.EntityKey.ToString());
      }
    }
    ]]>
	</code></example>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityManager.Saving">
            <summary>
            Occurs when the EntityManager is preparing to save changes.
            </summary>
            <remarks>
            The event handler can use the <see cref="P:IdeaBlade.EntityModel.EntitySavingEventArgs.Entities"/> list to validate, modify, delete or add
            entities as needed.  Use <b>EntitySavingEventArgs.Cancel</b> to cancel the save operation.
            See the <b>DevForce Developer's Guide</b> for more information on the life cycle of a save.
            </remarks>
            <example><code lang="C#">
    <![CDATA[
       public void EntityManager_EventSample() {

      var mgr = new DomainModelEntityManager();
      // Setup some handlers.
      mgr.Querying += QueryingHandler;
      mgr.Fetching += FetchingHandler;
      mgr.Queried += QueriedHandler;
      mgr.Saving += SavingHandler;
      mgr.Saved += SavedHandler;

      // Now try some fetches and saves.

      var orders = mgr.OrderSummaries
        .Where(o => o.Customer.Id == 1)
        .Include("Customer")
        .Include("OrderDetails").ToList();
      DebugFns.WriteLine("Order count = " + orders.Count.ToString());

      // Change the first order and its details.
      OrderSummary anOrder = orders[0];
      anOrder.Freight = 200;
      foreach (OrderDetail dtl in anOrder.OrderDetails) {
        dtl.Discount = .05F;
      }
      SaveResult sr = mgr.SaveChanges();
    }

    void QueryingHandler(object sender, EntityQueryingEventArgs e) {
      DebugFns.WriteLine("Querying " + e.Query.ToString());
    }

    void FetchingHandler(object sender, EntityFetchingEventArgs e) {
      DebugFns.WriteLine("Fetching " + e.Query.ToString());
    }

    void QueriedHandler(object sender, EntityQueriedEventArgs e) {
      DebugFns.WriteLine("Queried " + e.Query.ToString());
      foreach (Entity anEntity in e.Results) {
        DebugFns.WriteLine("Queried - " + anEntity.EntityKey.ToString());
      }
    }

    void SavingHandler(object sender, EntitySavingEventArgs e) {
      foreach (Entity anEntity in e.Entities) {
        DebugFns.WriteLine("Saving - " + anEntity.EntityKey.ToString() + " - " + anEntity.EntityState.ToString());
      }
    }
    void SavedHandler(object sender, EntitySavedEventArgs e) {
      foreach (Entity anEntity in e.Entities) {
        DebugFns.WriteLine("Saved - " + anEntity.EntityKey.ToString());
      }
    }
    ]]>
	</code></example>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityManager.Saved">
            <summary>
            Occurs after the EntityManager has persisted changed entities.
            </summary>
            <remarks>
            The <see cref="P:IdeaBlade.EntityModel.EntitySavedEventArgs.Entities"/> list contains the entities saved to the data source.
            See the <b>DevForce Developer's Guide</b> for more information on the life cycle of a save.
            </remarks>
            <example><code lang="C#">
    <![CDATA[
       public void EntityManager_EventSample() {

      var mgr = new DomainModelEntityManager();
      // Setup some handlers.
      mgr.Querying += QueryingHandler;
      mgr.Fetching += FetchingHandler;
      mgr.Queried += QueriedHandler;
      mgr.Saving += SavingHandler;
      mgr.Saved += SavedHandler;

      // Now try some fetches and saves.

      var orders = mgr.OrderSummaries
        .Where(o => o.Customer.Id == 1)
        .Include("Customer")
        .Include("OrderDetails").ToList();
      DebugFns.WriteLine("Order count = " + orders.Count.ToString());

      // Change the first order and its details.
      OrderSummary anOrder = orders[0];
      anOrder.Freight = 200;
      foreach (OrderDetail dtl in anOrder.OrderDetails) {
        dtl.Discount = .05F;
      }
      SaveResult sr = mgr.SaveChanges();
    }

    void QueryingHandler(object sender, EntityQueryingEventArgs e) {
      DebugFns.WriteLine("Querying " + e.Query.ToString());
    }

    void FetchingHandler(object sender, EntityFetchingEventArgs e) {
      DebugFns.WriteLine("Fetching " + e.Query.ToString());
    }

    void QueriedHandler(object sender, EntityQueriedEventArgs e) {
      DebugFns.WriteLine("Queried " + e.Query.ToString());
      foreach (Entity anEntity in e.Results) {
        DebugFns.WriteLine("Queried - " + anEntity.EntityKey.ToString());
      }
    }

    void SavingHandler(object sender, EntitySavingEventArgs e) {
      foreach (Entity anEntity in e.Entities) {
        DebugFns.WriteLine("Saving - " + anEntity.EntityKey.ToString() + " - " + anEntity.EntityState.ToString());
      }
    }
    void SavedHandler(object sender, EntitySavedEventArgs e) {
      foreach (Entity anEntity in e.Entities) {
        DebugFns.WriteLine("Saved - " + anEntity.EntityKey.ToString());
      }
    }
    ]]>
	</code></example>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityManager.EntityChanging">
            <summary>
            Fired whenever an entity's state is changing in any significant manner.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityManager.EntityChanged">
            <summary>
            Fired whenever an entity's state has changed in any significant manner.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityManager.Cleared">
            <summary>
            Fired whenever this entityManager is cleared.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityManager.ConnectionStateChanged">
            <summary>
            Fired when the connection state of the EntityManager changes.
            </summary>
            <remarks>
            This event will fire when the EntityManager connects or disconnects from the Entity Server.  A connect 
            can occur implicitly, based on arguments to the constructor; or via a call to <see cref="M:IdeaBlade.EntityModel.EntityManager.Connect"/> or <see cref="M:IdeaBlade.EntityModel.EntityManager.ConnectAsync"/>.
            A disconnect can occur via a call to <see cref="M:IdeaBlade.EntityModel.EntityManager.Disconnect"/> or happen as the result of a communication failure during a request to the
            EntityServer.
            <para>
            Note that this event will not fire for a lost network connection, as the <b>EntityManager</b> does not monitor network availability.
            See the <see cref="T:System.Net.NetworkInformation.NetworkChange"/> class for more information on monitoring network events.
            </para>
            </remarks>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityManager.EntityServerError">
            <summary>
            Raised when an error occurs while accessing the EntityServer or backend data source.
            <seealso cref="T:IdeaBlade.EntityModel.EntityServerException"/>
            </summary>
            <remarks>
            The <see cref="T:IdeaBlade.EntityModel.EntityServerException"/> contained within the EntityServerErrorEventArgs will
            indicate the <see cref="P:IdeaBlade.EntityModel.EntityServerException.OperationType"/> which was requested when the error occurred,
            and the <see cref="P:IdeaBlade.EntityModel.EntityServerException.FailureType"/> of the error.  Set <see cref="P:IdeaBlade.EntityModel.EntityServerErrorEventArgs.Handled"/>
            to true to indicate that the exception should not be re-thrown.  
            <para>
            The <b>EntityServerError</b> event is raised for any type of exception condition which occurs while accessing the
            EntityServer, including during <see cref="M:IdeaBlade.EntityModel.EntityManager.Connect"/> and <see cref="M:IdeaBlade.EntityModel.EntityManager.Login(IdeaBlade.EntityModel.ILoginCredential)">Login</see> processing, fetching data, 
            or saving data via <b>SaveChanges</b>.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.DefaultManager">
            <summary>
            A <c>static</c> (<c>Shared</c> in Visual Basic) property that gets or sets a default EntityManager.
            </summary>
            <remarks>
            <b>DefaultManager</b> provides an easy way of referencing your "default" EntityManager.  
            If you have not explicitly constructed an EntityManager <b>DefaultManager</b> will
            implicitly call the default constructor upon first use.  If you have constructed an EntityManager
            <b>DefaultManager</b> will return your first constructed instance.
            <para>
            You can also set the EntityManager to be referenced as your <b>DefaultManager</b>.  Once set, the
            EntityManager you've indicated will be returned as the "default".
            </para>
            <para>
            When using <b>DefaultManager</b> without having first constructed an instance with the connection
            and data source extension of your choice, you lose the ability to catch and diagnose any connection problems
            to your EntityServer, since <see cref="M:IdeaBlade.EntityModel.EntityManager.Connect"/> is called implicitly.
            </para>
            <para>
            <b>Note:</b> If you are using multiple EntityManagers in your application you may want to explicitly set
            this property.  If an implicitly assigned EntityManager is no longer in use its memory
            will not be released as long as it is still referenced by this property.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Will be raised if this property is accessed on the EntityServer or if access has been explicitly disallowed by setting this value to null</exception>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.Options">
            <summary>
            Misc. set of options available to control various aspects of an EntityManager's behavior.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.DefaultQueryStrategy">
            <summary>
            Gets or sets the default QueryStrategy to use for all queries where the QueryStrategy is not set either
            by parameter or as part of the Query itself.
            <seealso cref="T:IdeaBlade.EntityModel.EntityQuery"/>
            </summary>
            <remarks>
            You can set the <b>QueryStrategy</b> used by an individual query using its <see cref="P:IdeaBlade.EntityModel.EntityQuery.QueryStrategy"/>
            property.  
            The <b>DefaultQueryStrategy</b> is used when a query is executed and the strategy was not provided.
            <para>
            If not set, the default is a <b>QueryStrategy</b> of <see cref="F:IdeaBlade.EntityModel.QueryStrategy.Normal"/>.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.DefaultEntityReferenceStrategy">
            <summary>
            Sets the default EntityReferenceStrategy for all references within this EntityManager;
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.CompositionContext">
            <summary>
            Returns the <see cref="P:IdeaBlade.EntityModel.EntityManager.CompositionContext"/> used by this EntityManager.
            </summary>
            <remarks>
            You determine the composition context in use when you construct the <b>EntityManager</b> by optionally passing the name of the context wanted. 
            If a name was not provided then the <see cref="F:CompositionContext.Default">Default</see> composition context is used.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.VerifierEngine">
            <summary>
            Gets or sets the <see cref="T:IdeaBlade.Validation.VerifierEngine"/>
            shared by all entities within this EntityManager.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.DataSourceExtension">
            <summary>
            Gets the DataSourceExtension used with this EntityManager.
            </summary>
            <remarks>
            The <b>DataSourceExtension</b> determines the <b>EntityServer</b> used,
            as well as the final resolved data source keys.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.EntityServiceOption">
            <summary>
            Gets the EntityServiceOption used to determine 
            whether to connect to a local or distributed Entity Service.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.UsesDistributedEntityService">
            <summary>
            Gets whether this EntityManager uses a distributed Entity Service.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.ServiceKey">
            <summary>
            Gets the name of the serviceKey which defines the EntityServer address.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.AuthenticationContext">
            <summary>
            Gets or sets the <see cref="T:IdeaBlade.EntityModel.Security.IAuthenticationContext"/> used by this EntityManager.
            </summary>
            <remarks>
            The <b>AuthenticationContext</b> represents the current authentication state and credentials, of either an individual EntityManager or the
            application.  By default, all EntityManagers use the "default" authentication context, <see cref="P:IdeaBlade.EntityModel.Security.Authenticator.DefaultAuthenticationContext"/>.
            The <see cref="P:IdeaBlade.EntityModel.EntityManagerOptions.UseDefaultAuthenticationContext"/> setting controls this, and is true by default.
            <para>
            When using the default context, a single login - on either the EntityManager or the <b>Authenticator</b> - will set the <b>AuthenticationContext</b>
            used throughout the application.
            </para>
            <para>
            An EntityManager can use its own <b>AuthenticationContext</b> if it requires credentials separate from other EntityManagers within the application.
            Set the <see cref="P:IdeaBlade.EntityModel.EntityManagerOptions.UseDefaultAuthenticationContext"/> to false, and call <b>Login</b>.  If you call <see cref="M:IdeaBlade.EntityModel.Security.Authenticator.Login(IdeaBlade.EntityModel.ILoginCredential,IdeaBlade.EntityModel.Security.LoginOptions)">Authenticator.Login</see> directly, be
            sure to set the <b>AuthenticationContext</b> to the returned value. 
            </para>
            <para>
            The <b>AuthenticationContext</b> will be null if a <b>Login</b> has not been done.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if try to set the AuthenticationContext to a null value.</exception>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.IsLoggedIn">
            <summary>
            Returns whether this EntityManager is logged in to the EntityServer.
            </summary>
            <remarks>
            If <see cref="P:IdeaBlade.EntityModel.EntityManagerOptions.UseDefaultAuthenticationContext"/> is on, then this EntityManager
            will use the <see cref="P:IdeaBlade.EntityModel.Security.Authenticator.DefaultAuthenticationContext"/>.  
            <para>
            A login can occur explicitly with a call to the <see cref="M:IdeaBlade.EntityModel.EntityManager.Login(IdeaBlade.EntityModel.ILoginCredential)"/> 
            or <see cref="M:IdeaBlade.EntityModel.Security.Authenticator.Login(IdeaBlade.EntityModel.ILoginCredential,IdeaBlade.EntityModel.Security.LoginOptions)"/> method; 
            credentials from another logged in EntityManager can be used if the EntityManager was created via
            one of the copy constructors or the <see cref="M:IdeaBlade.EntityModel.EntityManager.LinkForAuthentication(IdeaBlade.EntityModel.EntityManager)"/> method was called; or
            a login can be performed implicitly by the EntityManager if credentials have not been supplied
            and guest user access is allowed.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.DefaultSaveOptions">
            <summary>
            Gets or sets the default options that will be used if no SaveOptions are passed to a <b>SaveChanges</b> method.
            </summary>
            <remarks>
            If not set, the default is a new <see cref="T:IdeaBlade.EntityModel.SaveOptions"/> instance whose
            <see cref="T:IdeaBlade.EntityModel.TransactionSettings"/> specify that the default transaction settings
            are used, and <see cref="T:IdeaBlade.EntityModel.FixupTempIds"/> is set to All.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.IsConnected">
            <summary>
            Returns whether the EntityManager is currently connected to an EntityServer. 
            </summary>
            <remarks>
            If an asynchronous connection is pending this will return false.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.Tag">
            <summary>
            Gets or sets a user-defined value for this EntityManager.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.AuthorizedThreadId">
            <summary>
            The thread id that this EntityManager is authorized to execute on. An EntityManager can only execute on a single thread at one time.  
            </summary>
            <remarks>
            This property can be set to another thread id to allow that thread to take over use of the EntityManager.  This is an advanced
            technique and should only be used if you have extensive familiarity with threading.  
            <para>
            This property can also be set to null to remove all cross threading checks from the EntityManager. There are a few common cases
            where this is useful. 1) when executing async tests from within the Visual Studio Test environment (because VS does not use a synchronization context 
            that guarantees that asynchronous calls will be returned to the same thread that created them) or 2) when executing an asynchronous
            operation from within one of the server side interception methods provided by the EntityServer, or 
            3) when executing an asynchronous operation from within an ASP.NET worker process. 
            </para>
            <para>
            Unless your case is one of these three or you are very familiar with threading models, we strongly suggest that you do not
            set this property to null.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.DataSourceResolver">
            <summary>
            Gets the DataSourceResolver used to map entity types to data sources and IdGenerators. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.MetadataStore">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityMetadataStore"/> for this manager.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.IsExecutingCacheQuery">
            <summary>
            Internal use only.  Returns true while a cache query is executing.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.IsLoadingEntity">
            <summary>
            Internal use only.  Returns true while an Entity is loading.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.IsClient">
            <summary>
            Returns whether the EntityManager is running on the client or the server.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.Principal">
            <summary>
            Returns the <see cref="T:System.Security.Principal.IPrincipal"/> representing the current user.
            </summary>
            <remarks>
            The <b>Principal</b> is set once the <see cref="M:IdeaBlade.EntityModel.EntityManager.Login(IdeaBlade.EntityModel.ILoginCredential)">Login</see>
            completes to identify the current user.  You can use the <b>Principal</b>
            to perform role-based authorization.
            <para>
            In a Silverlight application, this will return a <b>UserBase</b>.
            </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.SessionKey">
            <summary>
            Returns a key identifying the current user session.
            </summary>
            <remarks>
            Applications can retrieve the <b>SessionKey</b> after a login with credentials is made and 
            use it to call <see cref="M:IdeaBlade.EntityModel.EntityManager.Login(System.Guid)"/> later.  This is most useful in ASP.NET applications
            where an EntityManager is constructed only for the lifetime of a request.  The <b>SessionKey</b>
            allows for passing or saving to session state a lightweight token which allows the user session
            to be recreated without requiring that credentials be reentered.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.UseAsyncNavigation">
            <summary>
            Gets or sets whether asynchronous queries are used when navigating relational properties.
            </summary>
            <remarks>
            In Silverlight applications this is a read-only property returning true, since all queries
            which can go to the data source must be executed asynchronously.
            <para>
            This flag defaults to false in non-Silverlight applications.
            </para>
            <para>
            When <b>UseAsyncNavigation</b> is true, you will receive a "pending" entity or list if the navigation can't
            be satisfied from cache.  These pending results are identified by the <see cref="P:IdeaBlade.EntityModel.EntityAspect.IsPendingEntity"/>
            and <see cref="P:IdeaBlade.EntityModel.RelatedEntityList`1.IsPendingEntityList"/> properties.  When a pending result is resolved a
            <see cref="E:IdeaBlade.EntityModel.EntityAspect.PendingEntityResolved"/> or <see cref="E:IdeaBlade.EntityModel.RelatedEntityList`1.PendingEntityListResolved"/>
            event is fired.
            </para>
            </remarks>
            <example>
      <code lang="C#">
        
    private Customer _aCustomer;

    public void GetCustOrdersAsync() {

      DomainModelEntityManager mgr = = new DomainModelEntityManager();

      // Turn on async navigation.  This is a readonly property in Silverlight.
      mgr.UseAsyncNavigation = true;

      // Assume we already have a Customer instance. 
      // Navigate to customer orders.  
      // If UseAsyncNavigation is true and the orders aren't already in cache
      // the IsPendingEntityList flag will be on.

      var orders = _aCustomer.OrderSummaries;
      Assert.IsTrue(orders.IsPendingEntityList);

      // Setup a handler to be called when data is returned.
     orders.PendingEntityListResolved += PendingOrdersResolvedHandler;
    }

    private void PendingOrdersResolvedHandler(object sender, PendingEntityListResolvedEventArgs&lt;OrderSummary&gt; args) {
      // The original RelatedEntityList will now contain the returned entities, as will the 
      // args.ResolvedEntities list.

      Assert.IsFalse(_customer.OrderSummaries.IsPendingEntityList);
      Assert.IsTrue(_customer.OrderSummaries.Count &gt; 0);
    }
      </code>
    </example>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.QueryCache">
            <summary>
            Gets the cache of previously executed queries.
            </summary>
            <value>The query cache.</value>
            <remarks>
            The <see cref="T:QueryCache"/> is used to determine when an <see cref="T:IdeaBlade.EntityModel.EntityQuery"/>
            can be satisfied from cache.  If a query is in the query cache and the <see cref="T:IdeaBlade.EntityModel.QueryStrategy"/>
            allows it the entity cache is used as the data source to fulfill the request.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.CacheStateManager">
            <summary>
            The <see cref="P:IdeaBlade.EntityModel.EntityManager.CacheStateManager"/> that controls saving and restoring the state
            of this EntityManager's internal cache.
            </summary>
            <remarks>This feature is only available in certain editions of DevForce.</remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManager.EntityCache">
            <summary>
            Provides access to the internal <see cref="P:IdeaBlade.EntityModel.EntityManager.EntityCache"/> used to cache business objects.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQueryResult">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryResult.#ctor(IdeaBlade.EntityModel.DataQueryResult,IdeaBlade.EntityModel.EntityManager,IdeaBlade.EntityModel.MergeStrategy,System.Guid,IdeaBlade.EntityModel.QueryInfo)">
            <summary>
            
            </summary>
            <param name="dataQueryResult"></param>
            <param name="entityManager"></param>
            <param name="mergeStrategy"></param>
            <param name="queryId"></param>
            <param name="queryInfo"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryResult.ShapeResult(System.Type)">
            <summary>
            
            </summary>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryResult.MergeResults(System.Object)">
            <summary>
            For internal use only.
            </summary>
            <param name="results"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryResult.Result">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryResult.ChangedEntities">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityServerFault">
            <summary>
            Defines a FaultContract for EntityServer operations.
            </summary>
            <remarks>
            Internal use only.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerFault.Type">
            <summary/>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerFault.Message">
            <summary />
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerFault.RemoteExceptionName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerFault.RemoteExceptionDetails">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerFault.RemoteStackTrace">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerFault.RemoteSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerFault.Cancelled">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerFault.OperationType">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerFault.FailureType">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerFault.UserData">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IdFixupHelper.MapTempIdsToRealIds(IdeaBlade.EntityModel.SaveWorkState,IdeaBlade.EntityModel.DataSourceResolver)">
            <summary>
            Server only!!! Gets real id map and does fixup on passed cache.  This is not performed on "real" entity cache.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IdFixupHelper.BuildRealIdMap(IdeaBlade.EntityModel.UniqueIdCollection,IdeaBlade.EntityModel.DataSourceResolver)">
            <summary>
            Server only!! Build map of temp to real IDs.  Idmap is changed in place.  
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityQueryExecutor">
            <summary>
            Interface that must be implemented by any class wishing to be provide server execution of an IEntityQuery.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityQueryExecutor.Initialize(IdeaBlade.Core.Composition.CompositionContext)">
            <summary>
            Called to provide the <see cref="T:IdeaBlade.Core.Composition.CompositionContext"/> to the executor.
            </summary>
            <param name="compositionContext"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityQueryExecutor.Execute(IdeaBlade.EntityModel.IEntityQuery,IdeaBlade.EntityModel.IDataSourceKey)">
            <summary>
            Execute the query.
            </summary>
            <param name="query"></param>
            <param name="dsKey"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityQueryExecutor.IsApplicable">
            <summary>
            Determines whether this implementation is applicable to the query passed in.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.INotificationManager">
            <summary>
            Interface describing the public methods available to a <see cref="T:IdeaBlade.EntityModel.ServerNotifyDelegate"/> implementation to
            communicate with a notification manager.
            </summary>
            <remarks>
            An implementation of a <see cref="T:IdeaBlade.EntityModel.ServerNotifyDelegate"/> will use these methods to retrieve information about
            its subscribers and to communicate data back to its subscribers.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.INotificationManager.Send(System.Guid,System.Object[])">
            <summary>
            Called by a <see cref="T:IdeaBlade.EntityModel.ServerNotifyDelegate"/> implementation to send information to all current subscribers.
            </summary>
            <param name="serviceKey">The service key passed to your method</param>
            <param name="args">Data to be sent to subscribers</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.INotificationManager.Send(System.Guid,IdeaBlade.EntityModel.NotificationSubscriber,System.Object[])">
            <summary>
            Called by a <see cref="T:IdeaBlade.EntityModel.ServerNotifyDelegate"/> implementation to send information to a specific subscriber.
            </summary>
            <param name="serviceKey">The service key passed to your method</param>
            <param name="subscriber">The subscriber to be notified</param>
            <param name="args">Data to be sent to the subscriber</param>
            <remarks>
            Use the <see cref="M:IdeaBlade.EntityModel.INotificationManager.GetSubscribers(System.Guid)"/> method to retrieve a list of subscribers.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.INotificationManager.GetSubscribers(System.Guid)">
            <summary>
            Called by a <see cref="T:IdeaBlade.EntityModel.ServerNotifyDelegate"/> implementation to retrieve a list of current subscribers.
            </summary>
            <param name="serviceKey">The service key passed to your method</param>
            <returns>List of subscribers</returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.INotificationService">
            <summary>
            Service contract supporting client subscriptions to server events.  Internal use only.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.INotificationService.Subscribe(IdeaBlade.EntityModel.SessionBundle,IdeaBlade.EntityModel.SubscribeWorkState)">
            <summary>
            Internal use only - Subscribe to a notification server.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.INotificationService.Unsubscribe(IdeaBlade.EntityModel.UnsubscribeWorkState)">
            <summary>
            Internal use only - Unsubscribe from a notification server.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.NotificationSubscriber">
            <summary>
            Subscriber information returned from a <see cref="M:IdeaBlade.EntityModel.INotificationManager.GetSubscribers(System.Guid)"/> call 
            made by a <see cref="T:IdeaBlade.EntityModel.ServerNotifyDelegate">ServerNotifyDelegate</see> implementation.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NotificationSubscriber.Principal">
            <summary>
            Gets the IPrincipal identifying the subscriber.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NotificationSubscriber.UserToken">
            <summary>
            Gets the token identifying the client request.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NotificationSubscriber.ClientArguments">
            <summary>
            Gets the arguments passed with the client request.
            </summary>
            <remarks>
            The number and type of arguments is user-defined.  No arguments
            are required.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.NotificationSubscriberCollection">
            <summary>
            List of <see cref="T:IdeaBlade.EntityModel.NotificationSubscriber"/> objects returned from a <see cref="M:IdeaBlade.EntityModel.INotificationManager.GetSubscribers(System.Guid)"/> call.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.NotificationSubscriberCollection.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.NotificationSubscriberCollection.#ctor(System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.NotificationSubscriber})">
            <summary>
            Initializes a new instance of the class from an existing collection of objects.
            </summary>
            <param name="pSubscribers"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.ParameterizedEsql">
            <summary>
            Represents an Entity SQL statement with parameters.
            <seealso cref="T:IdeaBlade.EntityModel.PassthruEsqlQuery"/>
            </summary>
            <remarks>
            A <b>ParameterizedEsql</b> holds an Entity SQL (eSQL) statement with parameter placeholders and an
            associated <see cref="P:IdeaBlade.EntityModel.ParameterizedEsql.Parameters"/> collection.  
            This collection cannot be modified after creating the ParameterizedEsql object, but
            the values of the parameters in the collection can be changed.
            <para>
            A <b>ParameterizedEsql</b> object is used when creating a <see cref="T:IdeaBlade.EntityModel.PassthruEsqlQuery"/>.
            </para>
            </remarks>
        </member>
        <member name="F:IdeaBlade.EntityModel.ParameterizedEsql.Empty">
            <summary>Get the Empty ParameterizedEsql instance.</summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.ParameterizedEsql.#ctor(IdeaBlade.EntityModel.ParameterizedEsql)">
            <summary>
            Copy constructor.
            </summary>
            <param name="paramEsql"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ParameterizedEsql.#ctor(System.String)">
            <summary>Construct a ParameterizedEsql instance with no parameters.</summary>
            <param name="esql">An eSQL string with no parameter placeholders.</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ParameterizedEsql.#ctor(System.String,IdeaBlade.EntityModel.QueryParameter)">
            <summary>Construct a ParameterizedEsql instance with one parameter.</summary>
            <param name="esql">An eSQL string, possibly with one parameter placeholder.</param>
            <param name="parameter">The parameter to substitute into the  parameter placeholder when executed.</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ParameterizedEsql.#ctor(System.String,System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.QueryParameter})">
            <summary>Construct a ParameterizedEsql instance with parameters.</summary>
            <param name="esql">An eSQL string with parameter placeholders.</param>
            <param name="parameters">The parameters for each of the parameter placeholders.</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ParameterizedEsql.#ctor(System.String,IdeaBlade.EntityModel.QueryParameter[])">
            <summary>Construct a ParameterizedEsql instance with parameters.</summary>
            <param name="esql">An ESQL string with parameter placeholders.</param>
            <param name="parameters">The parameters for each of the parameter placeholders.</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.ParameterizedEsql.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.ParameterizedEsql.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.ParameterizedEsql.ToString">
            <summary>Returns the string representation of the query.</summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ParameterizedEsql.Esql">
            <summary>Get the Entity SQL expression.</summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ParameterizedEsql.Parameters">
            <summary>Get the parameters.</summary>
            <remarks>You cannot add or remove parameters although you can change values 
            of the individual parameters in the list.</remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.PassthruEsqlQuery">
            <summary>
            Used to execute an Entity SQL statement within the DevForce framework.
            <seealso cref="P:IdeaBlade.EntityModel.PassthruEsqlQuery.EntityManager"/>
            <seealso cref="T:IdeaBlade.EntityModel.IEntity"/>
            </summary>
            <remarks>A <b>PassthruEsqlQuery</b> can be used to retrieve <see cref="T:IdeaBlade.EntityModel.IEntity"/> objects from an 
            <see cref="P:IdeaBlade.EntityModel.PassthruEsqlQuery.EntityManager"/>.  You might want to build an Entity SQL (eSQL) query instead of a standard
            <see cref="T:IdeaBlade.EntityModel.EntityQuery"/> for performance reasons or for complex eSQL statements.
            Queries are submitted using
            <see cref="M:IdeaBlade.EntityModel.EntityManager.ExecuteQuery(IdeaBlade.EntityModel.IEntityQuery)"/> or one of 
            the available overloads.
            <para>A <b>PassthruEsqlQuery</b> must always use a <see cref="T:IdeaBlade.EntityModel.FetchStrategy"/>
            of <b>DataSourceOnly</b>, and cannot be used when disconnected from the EntityServer.
            </para>
            </remarks>
            <example><code lang="C#">

// Sample 1 - A sample PassthruEsqlQuery returning a SalesPerson entity.
private void Sample1() {
  AW2000Model.Manager mgr = new AW2000Model.Manager();

  // Create a parameter and the parameterized sql 
  QueryParameter param = new QueryParameter("bonus", 2000);
  ParameterizedEsql paramEsql = new ParameterizedEsql("SELECT VALUE sp FROM SalesPersons AS sp Where sp.Bonus &gt; @bonus", param);

  // Create and execute the query
  var query = new PassthruEsqlQuery(typeof(SalesPerson), paramEsql);
  var results = mgr.ExecuteQuery(query);
}

// Sample 2 - a sample PassthruEsqlQuery returning a scalar value.
private void Sample2() {      
  AW2000Model.Manager mgr = new AW2000Model.Manager();
  
  // Create the query - note you must provide both the returnType and queryableType arguments here.
  var query = new PassthruEsqlQuery(typeof(Int32), typeof(Customer), 
      "SELECT VALUE Count(c.CustomerType) FROM Customers AS c Where c.CustomerID &lt; 10");
      
  int result = mgr.ExecuteQuery(query).Cast&lt;Int32&gt;().First();
}

		</code></example>
        </member>
        <member name="T:IdeaBlade.EntityModel.IUntypedEntityQuery">
            <summary>
            Interface implemented by any <see cref="T:IdeaBlade.EntityModel.IEntityQuery"/> that is not generic.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.PassthruEsqlQuery.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the PassthruEsqlQuery class. 
            </summary>
            <param name="returnType">The entity type that this query will return</param>
            <remarks>
            Note: Use one of the constructor overloads that takes a queryableType parameter whenever the returnType does not inherit from Entity.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.PassthruEsqlQuery.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the PassthruEsqlQuery class with an Entity SQL statement.
            </summary>
            <param name="returnType">The entity type that this query will return</param>
            <param name="esql">The Entity SQL string to execute</param>
            <remarks>
            Note: Use one of the constructor overloads that takes a queryableType parameter whenever the returnType does not inherit from Entity. 
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.PassthruEsqlQuery.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the PassthruEsqlQuery class with an Entity SQL statement.
            </summary>
            <param name="returnType">The type that this query will return</param>
            <param name="queryableType">The entity type to be queried</param>
            <param name="esql">The Entity SQL string to execute</param>
            <remarks>
            Use this constructor when the <paramref name="returnType"/> is not an Entity.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.PassthruEsqlQuery.#ctor(System.Type,IdeaBlade.EntityModel.ParameterizedEsql)">
            <summary>
            Initializes a new instance of the PassthruEsqlQuery class with an Entity SQL statement.
            </summary>
            <param name="returnType">The entity type that this query will return</param>
            <param name="parameterizedEsql">A parameterized Entity SQL statement</param>
            <remarks>
            Note: Use one of the constructor overloads that takes a queryableType parameter whenever the returnType does not inherit from Entity. 
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.PassthruEsqlQuery.#ctor(System.Type,System.Type,IdeaBlade.EntityModel.ParameterizedEsql)">
            <summary>
            Initializes a new instance of the PassthruEsqlQuery class with an Entity SQL statement.
            </summary>
            <param name="returnType">The type that this query will return</param>
            <param name="queryableType">The entity type to be queried</param>
            <param name="parameterizedEsql">A parameterized Entity SQL statement</param>
            <remarks>
            Use this constructor when the <paramref name="returnType"/> is not an Entity.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.PassthruEsqlQuery.Clone">
            <summary>
            Creates a deep copy of this PassthruEsqlQuery. 
            </summary>
            <returns>A deep copy of this instance</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.PassthruEsqlQuery.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.PassthruEsqlQuery.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.PassthruEsqlQuery.ToString">
            <summary>
            Returns a human readable representation of the current query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.PassthruEsqlQuery.CreateFinder(IdeaBlade.EntityModel.EntityManager)">
            <summary>
            Internal use only.
            </summary>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.PassthruEsqlQuery.QueryableType">
            <summary>
            Gets the Entity type to be queried.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PassthruEsqlQuery.ElementType">
            <summary>
            Gets the data type returned by this query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PassthruEsqlQuery.Tag">
            <summary>
            Gets or sets user-defined information regarding this query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PassthruEsqlQuery.ParameterizedEsql">
            <summary>
            Gets or sets the parameterized Entity SQL statement to be executed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PassthruEsqlQuery.QueryStrategy">
            <summary>
            Gets or sets the query strategy used by this query.
            </summary>
            <remarks>
            A PassthruEsqlQuery may only operate against the backend database.  
            The default <see cref="T:IdeaBlade.EntityModel.MergeStrategy"/> is <b>OverwriteChanges</b>, but may be changed as
            long as a <see cref="T:IdeaBlade.EntityModel.FetchStrategy"/> of <b>DataSourceOnly</b> is used.
            </remarks>
            <exception cref="T:IdeaBlade.Core.IdeaBladeException">If FetchStrategy is not DataSourceOnly</exception>
        </member>
        <member name="P:IdeaBlade.EntityModel.PassthruEsqlQuery.EntityManager">
            <summary>
            Gets or sets the EntityManager for this query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PassthruEsqlQuery.CommandTimeout">
            <summary>
            Gets or sets the wait time in seconds before terminating the attempt to execute a command and generating an error.
            </summary>
            <remarks>
            A value of 0 indicates that the default timeout value for the data provider should be used - this is usually 30 seconds.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.PassthruEsqlQuerySurrogate">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PassthruEsqlQuerySurrogate.ReturnTypeWrapper">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PassthruEsqlQuerySurrogate.QueryableTypeWrapper">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PassthruEsqlQuerySurrogate.ParameterizedEsql">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PassthruEsqlQuerySurrogate.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PassthruEsqlQuerySurrogate.QueryStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.PassthruEsqlQuerySurrogate.CommandTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryableTransformVisitor.VisitCall(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Translates any EntityQueryExtension methods to be Queryable extension method calls
            on Queryable extension 
            </summary>
            <param name="mce"></param>
            <param name="objectExpr"></param>
            <param name="argExpressions"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryableTransformVisitor.TranslateMethod(System.Reflection.MethodInfo)">
            <summary>
            For internal use only.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQueryProxy">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryProxy.EntityType">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryProxy.EntitySetName">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryProxy.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQueryProxy`1">
            <summary>
            For internal use only.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryProxy`1.#ctor(IdeaBlade.EntityModel.EntityQuery)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryProxy`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryProxy`1.Equals(System.Object)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryProxy`1.GetHashCode">
            <summary>
            For internal use only.
            </summary> 
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryProxy`1.EntityType">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryProxy`1.EntitySetName">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryProxy`1.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryProxy`1.System#Linq#IQueryable#Provider">
            <summary>
            See <see cref="P:System.Linq.IQueryable.Provider"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryProxy`1.System#Linq#IQueryable#Expression">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQueryProxy`1.System#Linq#IQueryable#ElementType">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.QueryParameter">
            <summary>
            Represents a parameter to a <see cref="T:IdeaBlade.EntityModel.PassthruEsqlQuery"/> or <see cref="T:IdeaBlade.EntityModel.StoredProcQuery"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryParameter.#ctor(System.String,System.Object)">
            <summary>
            Create an instance of this class.
            </summary>
            <param name="name">Parameter name</param>
            <param name="val">Parameter value</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryParameter.#ctor(System.String,System.Type,System.Object)">
            <summary>
            Create an instance of this class.
            </summary>
            <param name="name"></param>
            <param name="parameterType"></param>
            <param name="val"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryParameter.#ctor(System.String,System.Type)">
            <summary>
            Create an instance of this class.
            </summary>
            <param name="name">Parameter name</param>
            <param name="parameterType">Parameter type</param>
        </member>
        <member name="P:IdeaBlade.EntityModel.QueryParameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.QueryParameter.Value">
            <summary>
            Gets or sets the parameter value.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.QueryParameter.ParameterType">
            <summary>
            Gets or sets the parameter type.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.QueryParameter.ParameterTypeWrapper">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.RemoteServiceFns">
            <summary>
            Helper functions used with WCF communication services and proxies.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.RemoteServiceFns.GetServiceMoniker(System.String)">
            <summary>
            Returns the service name from what may be an absolute path.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.RemoteServiceFns.AddMexEndpoint(System.ServiceModel.ServiceHost)">
            <summary>
            Add a MEX endpoint to the service.
            </summary>
            <param name="host"></param>
            <returns></returns>
            DevForce by default does not add a MEX endpoint for its services, but you can
            call this method from a custom <b>ServiceHostEvents</b> implementation if wanted.
            An endpoint for the IMetadataExchange contract is added, along with
            the ServiceMetadataBehavior.
        </member>
        <member name="M:IdeaBlade.EntityModel.RemoteServiceFns.AddThrottlingBehavior(System.ServiceModel.ServiceHost)">
            <summary>
            Adds a ServiceThrottligBehavior to the service.
            </summary>
            <param name="host"></param>
            <remarks>
            The EntityServer service has this default throttle applied.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.RemoteServiceFns.AddSerializationBehavior(System.ServiceModel.Description.ContractDescription)">
            <summary>
            Sets the serializer for all contract operations to either the DataContractSerializer
            or the NetDataContractSerializer, based on the <see cref="P:IdeaBlade.Core.Configuration.ObjectServerElement.UseDCS"/> flag.
            </summary>
            <param name="contract"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.RemoteServiceFns.GetDefaultStandardBinding(System.String)">
            <summary>
            Return the standard CustomBinding for a non-SL endpoint.
            </summary>
            <param name="scheme"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.RemoteServiceFns.SetReaderQuotas(System.Xml.XmlDictionaryReaderQuotas)">
            <summary>
            Set reader quotas to maximum values.
            </summary>
            <param name="quotas"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.RemoteServiceFns.GetDefaultPushBinding(System.String,System.Boolean)">
            <summary>
            Returns the default non-SL binding used with the Notification service.
            </summary>
            <param name="scheme"></param>
            <param name="isServer"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.RemoteServiceFns.GetDefaultSilverlightPushBinding(System.String)">
            <summary>
            Returns the default binding for the NotificationService based on the protocol scheme.
            </summary>
            <param name="scheme"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.RemoteServiceFns.GetDefaultSilverlightBinding(System.String)">
            <summary>
            Return the standard CustomBinding for a Silverlight endpoint.
            </summary>
            <param name="scheme"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.ServerNotifyDelegate">
            <summary>
            Defines a delegate for a method that performs "push" processing on the BOS.
            <seealso cref="T:IdeaBlade.EntityModel.AllowRpcAttribute"/>
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.RegisterCallback(System.String,System.String,System.Action{IdeaBlade.EntityModel.SubscriptionOperation},System.Object,System.Object[])"/>
            </summary>
            <param name="serviceKey">Server-assigned key used for communicating with the NotificationManager</param>
            <param name="notificationManager">The NotificationManager used for communication with the BOS</param>
            <param name="serverEntityManager">A server-side EntityManager</param>
            <remarks>
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.ServerQueryExpressionVisitor">
            <summary>
            Called before sending a query to the server.  Localizes expressions, and 
            replaces the EntityQuery{T} with a proxy.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityScalarAsyncExtensions">
            <summary>
            Provides a set of static methods providing for asynchronous execution of scalar queries.
            <seealso cref="N:System.Linq"/>
            <seealso cref="T:IdeaBlade.EntityModel.IEntityScalarQuery`1"/> 
            </summary>
            <remarks>
            To use these extensions, first convert your <see cref="T:IdeaBlade.EntityModel.IEntityQuery`1"/> to 
            an <see cref="T:IdeaBlade.EntityModel.IEntityScalarQuery`1"/> using <see cref="M:IdeaBlade.EntityModel.EntityQueryExtensions.AsScalarAsync``1(IdeaBlade.EntityModel.IEntityQuery{``0})"/>.
            <para>
            Queries returning a scalar value are called "immediate execution" queries within LINQ.  These queries
            don't actually exist as a query object, but execute immediately to return the desired value.  For example,
            <code>_entityManager.Employees.First()</code> does not return a query, it instead executes immediately,
            and synchronously, to return the first employee object.  When only asynchronous queries are supported,
            for example in Silverlight applications, converting the query to the IEntityScalarQuery allows you
            to then use the scalar methods in an asynchronous query.
            </para>
            <para>
            For more information on extension methods, see <b>Extension Methods (C# Programming Guide)</b>
            or <b>Extension Methods (Visual Basic)</b> in the Visual Studio 2008 documentation.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.First(IdeaBlade.EntityModel.IEntityScalarQuery,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},System.Object)">
            <summary>
            Returns the first element in the sequence.
            </summary>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.First``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``0}},System.Object)">
            <summary>
            Returns the first element in the sequence.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
    public void AsyncFirst() {
      var op = _entityManager.Employees.AsScalarAsync().First();
      op.Completed += (o, e) => {
        var emp = e.Result;
      };
    }
       ]]>
</code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.First(IdeaBlade.EntityModel.IEntityScalarQuery,IdeaBlade.Core.IPredicateDescription,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},System.Object)">
            <summary>
            Returns the first element in the sequence that satisfies the specified condition.
            </summary>
            <param name="source"></param>
            <param name="predicateDescription"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example><code lang="C#">
        <![CDATA[   
   public void AsyncFirstWithPredicate() {
     var op = _entityManager.Employees.AsScalarAsync().First(e => e.LastName.StartsWith("D"));
     op.Completed += (o, e) => {
       var emp = e.Result;
     };
    }
      
      ]]></code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.First``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``0}},System.Object)">
            <summary>
            Returns the first element in the sequence that satisfies the specified condition.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example><code lang="C#">
        <![CDATA[   
   public void AsyncFirstWithPredicate() {
     var op = _entityManager.Employees.AsScalarAsync().First(e => e.LastName.StartsWith("D"));
     op.Completed += (o, e) => {
       var emp = e.Result;
     };
    }
      
      ]]></code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.FirstOrDefault(IdeaBlade.EntityModel.IEntityScalarQuery,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},System.Object)">
            <summary>
            Returns the first element in the sequence or a default value if the sequence contains no elements.
            </summary>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncFirstOrDefault() {
      var op = _entityManager.Employees.AsScalarAsync().FirstOrDefault();
      op.Completed += (o, e) => {
        var emp = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.FirstOrDefault``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``0}},System.Object)">
            <summary>
            Returns the first element in the sequence or a default value if the sequence contains no elements.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncFirstOrDefault() {
      var op = _entityManager.Employees.AsScalarAsync().FirstOrDefault();
      op.Completed += (o, e) => {
        var emp = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.FirstOrDefault(IdeaBlade.EntityModel.IEntityScalarQuery,IdeaBlade.Core.IPredicateDescription,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},System.Object)">
            <summary>
            Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.
            </summary>
            <param name="source"></param>
            <param name="predicateDescription"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncFirstOrDefaultWithPredicate() {
      var op = _entityManager.Employees.AsScalarAsync().FirstOrDefault(e => e.LastName.StartsWith("D"));
      op.Completed += (o, e) => {
        var emp = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.FirstOrDefault``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``0}},System.Object)">
            <summary>
            Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncFirstOrDefaultWithPredicate() {
      var op = _entityManager.Employees.AsScalarAsync().FirstOrDefault(e => e.LastName.StartsWith("D"));
      op.Completed += (o, e) => {
        var emp = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.FirstOrNullEntity(IdeaBlade.EntityModel.IEntityScalarQuery,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},System.Object)">
            <summary>
            Returns the first element in the sequence, or the appropriate NullEntity if the sequence contains no elements.
            </summary>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncFirstOrNullEntity() {
      var op = _entityManager.Employees.AsScalarAsync().FirstOrNullEntity();
      op.Completed += (o, e) => {
        var emp = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.FirstOrNullEntity``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``0}},System.Object)">
            <summary>
            Returns the first element in the sequence, or the appropriate NullEntity if the sequence contains no elements.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncFirstOrNullEntity() {
      var op = _entityManager.Employees.AsScalarAsync().FirstOrNullEntity();
      op.Completed += (o, e) => {
        var emp = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.FirstOrNullEntity(IdeaBlade.EntityModel.IEntityScalarQuery,IdeaBlade.Core.IPredicateDescription,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},System.Object)">
            <summary>
            Returns the first element of a sequence that satisfies a specified condition, or the appropriate NullEntity if no such element is found.
            </summary>
            <param name="source"></param>
            <param name="predicateDescription"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncFirstOrNullEntityWithPredicate() {
      var op = _entityManager.Employees.AsScalarAsync().FirstOrNullEntity(e => e.LastName.StartsWith("D"));
      op.Completed += (o, e) => {
        var emp = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.FirstOrNullEntity``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``0}},System.Object)">
            <summary>
            Returns the first element of a sequence that satisfies a specified condition, or the appropriate NullEntity if no such element is found.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncFirstOrNullEntityWithPredicate() {
      var op = _entityManager.Employees.AsScalarAsync().FirstOrNullEntity(e => e.LastName.StartsWith("D"));
      op.Completed += (o, e) => {
        var emp = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Single(IdeaBlade.EntityModel.IEntityScalarQuery,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},System.Object)">
            <summary>
            Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
            </summary>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncSingle() {
      var op = _entityManager.Employees.Where(e => e.Id == 1).AsScalarAsync().Single();
      op.Completed += (o, e) => {
        var emp = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Single``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``0}},System.Object)">
            <summary>
            Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncSingle() {
      var op = _entityManager.Employees.Where(e => e.Id == 1).AsScalarAsync().Single();
      op.Completed += (o, e) => {
        var emp = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Single(IdeaBlade.EntityModel.IEntityScalarQuery,IdeaBlade.Core.IPredicateDescription,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},System.Object)">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.
            </summary>
            <param name="source"></param>
            <param name="predicateDescription"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncSingleWithPredicate() {
      var op = _entityManager.Employees.AsScalarAsync().Single(e => e.Id == 1);
      op.Completed += (o, e) => {
        var emp = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Single``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``0}},System.Object)">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncSingleWithPredicate() {
      var op = _entityManager.Employees.AsScalarAsync().Single(e => e.Id == 1);
      op.Completed += (o, e) => {
        var emp = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.SingleOrDefault(IdeaBlade.EntityModel.IEntityScalarQuery,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},System.Object)">
            <summary>
            Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.
            </summary>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncSingleOrDefault() {
      var op = _entityManager.Employees.Where(e => e.Id == 1).AsScalarAsync().SingleOrDefault();
      op.Completed += (o, e) => {
        var emp = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.SingleOrDefault``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``0}},System.Object)">
            <summary>
            Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncSingleOrDefault() {
      var op = _entityManager.Employees.Where(e => e.Id == 1).AsScalarAsync().SingleOrDefault();
      op.Completed += (o, e) => {
        var emp = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.SingleOrDefault(IdeaBlade.EntityModel.IEntityScalarQuery,IdeaBlade.Core.IPredicateDescription,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},System.Object)">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.
            </summary>
            <param name="source"></param>
            <param name="predicateDescription"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
   public void AsyncSingleOrDefaultWithPredicate() {
      var op = _entityManager.Employees.AsScalarAsync().SingleOrDefault(e => e.Id == 1);
      op.Completed += (o, e) => {
        var emp = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.SingleOrDefault``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``0}},System.Object)">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
   public void AsyncSingleOrDefaultWithPredicate() {
      var op = _entityManager.Employees.AsScalarAsync().SingleOrDefault(e => e.Id == 1);
      op.Completed += (o, e) => {
        var emp = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.SingleOrNullEntity``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``0}},System.Object)">
            <summary>
            Returns the only element of a sequence, or the appropriate NullEntity if the sequence is empty; this method throws an exception if there is more than one element in the sequence.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncSingleOrNullEntity() {
      var op = _entityManager.Employees.Where(e => e.Id == 1).AsScalarAsync().SingleOrNullEntity();
      op.Completed += (o, e) => {
        var emp = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.SingleOrNullEntity``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``0}},System.Object)">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition, or the appropriate NullEntity if no such element exists; this method throws an exception if more than one element satisfies the condition.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
   public void AsyncSingleOrNullEntityWithPredicate() {
      var op = _entityManager.Employees.AsScalarAsync().SingleOrNullEntity(e => e.Id == 1);
      op.Completed += (o, e) => {
        var emp = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Count(IdeaBlade.EntityModel.IEntityScalarQuery,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{System.Int32}},System.Object)">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncCount() {
      var op = _entityManager.Employees.AsScalarAsync().Count();
      op.Completed += (o, e) => {
        var ct = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Count``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{System.Int32}},System.Object)">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncCount() {
      var op = _entityManager.Employees.AsScalarAsync().Count();
      op.Completed += (o, e) => {
        var ct = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Count(IdeaBlade.EntityModel.IEntityScalarQuery,IdeaBlade.Core.IPredicateDescription,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{System.Int32}},System.Object)">
            <summary>
            Returns the number of elements in the specified sequence that satisfies a condition.
            </summary>
            <param name="source"></param>
            <param name="predicateDescription"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncCountWithPredicate() {
      var op = _entityManager.Employees.AsScalarAsync().Count(e => e.BirthDate > DateTime.Parse("1/1/1955"));
      op.Completed += (o, e) => {
        var ct = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Count``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{System.Int32}},System.Object)">
            <summary>
            Returns the number of elements in the specified sequence that satisfies a condition.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncCountWithPredicate() {
      var op = _entityManager.Employees.AsScalarAsync().Count(e => e.BirthDate > DateTime.Parse("1/1/1955"));
      op.Completed += (o, e) => {
        var ct = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.LongCount``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{System.Int64}},System.Object)">
            <summary>
            Returns an Int64 that represents the total number of elements in a sequence.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncLongCount() {
      var op = _entityManager.OrderSummaries.AsScalarAsync().LongCount();
      op.Completed += (o, e) => {
        var ct = e.Result;
      };
    }
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.LongCount``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{System.Int64}},System.Object)">
            <summary>
            Returns an Int64 that represents the number of elements in a sequence that satisfy a condition.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncLongCountWithPredicate() {
      var op = _entityManager.OrderSummaries.AsScalarAsync().LongCount(o=> o.Freight > 25);
      op.Completed += (o, e) => {
        var ct = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Min(IdeaBlade.EntityModel.IEntityScalarQuery,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},System.Object)">
            <summary>
            Returns the minimum value of items in the sequence.
            </summary>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncMin() {
      var op = _entityManager.OrderSummaries.Select(o => o.Freight).AsScalarAsync().Min();
      op.Completed += (o, e) => {
        var ct = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Min``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``0}},System.Object)">
            <summary>
            Returns the minimum value of items in the sequence.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncMin() {
      var op = _entityManager.OrderSummaries.Select(o => o.Freight).AsScalarAsync().Min();
      op.Completed += (o, e) => {
        var ct = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Min(IdeaBlade.EntityModel.IEntityScalarQuery,IdeaBlade.Core.IProjectionSelector,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},System.Object)">
            <summary>
            Invokes a projection function on each element of the sequence and returns the minimum resulting value.
            </summary>
            <param name="source"></param>
            <param name="projectionSelector"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncMinWithPredicate() {
      var op = _entityManager.OrderSummaries.AsScalarAsync().Min(o => o.Freight);
      op.Completed += (o, e) => {
        var ct = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Min``2(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``1}},System.Object)">
            <summary>
            Invokes a projection function on each element of the sequence and returns the minimum resulting value.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="projection"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncMinWithPredicate() {
      var op = _entityManager.OrderSummaries.AsScalarAsync().Min(o => o.Freight);
      op.Completed += (o, e) => {
        var ct = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Max(IdeaBlade.EntityModel.IEntityScalarQuery,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},System.Object)">
            <summary>
            Returns the maximum value of items in the sequence.
            </summary>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncMax() {
      var op = _entityManager.OrderSummaries.Select(o => o.Freight).AsScalarAsync().Max();
      op.Completed += (o,e) => {
        var ct = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Max``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``0}},System.Object)">
            <summary>
            Returns the maximum value of items in the sequence.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncMax() {
      var op = _entityManager.OrderSummaries.Select(o => o.Freight).AsScalarAsync().Max();
      op.Completed += (o,e) => {
        var ct = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Max(IdeaBlade.EntityModel.IEntityScalarQuery,IdeaBlade.Core.IProjectionSelector,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},System.Object)">
            <summary>
            Invokes a projection function on each element of the sequence and returns the maximum resulting value.
            </summary>
            <param name="source"></param>
            <param name="projectionSelector"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncMaxWithPredicate() {
      var op = _entityManager.OrderSummaries.AsScalarAsync().Max(o => o.Freight, (args) => {
        var ct = args.Result;
      });
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Max``2(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``1}},System.Object)">
            <summary>
            Invokes a projection function on each element of the sequence and returns the maximum resulting value.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="projection"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncMaxWithPredicate() {
      var op = _entityManager.OrderSummaries.AsScalarAsync().Max(o => o.Freight, (args) => {
        var ct = args.Result;
      });
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Sum(IdeaBlade.EntityModel.IEntityScalarQuery,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},System.Object)">
            <summary>
            Computes the sum of a sequence of numeric values.
            </summary>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
   public void AsyncSum() {
      var op = _entityManager.OrderSummaries.Select(o => o.Freight).AsScalarAsync().Sum();
      op.Completed += (o, e) => {
        var ct = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Sum``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``0}},System.Object)">
            <summary>
            Computes the sum of a sequence of numeric values.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
   public void AsyncSum() {
      var op = _entityManager.OrderSummaries.Select(o => o.Freight).AsScalarAsync().Sum();
      op.Completed += (o, e) => {
        var ct = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Sum(IdeaBlade.EntityModel.IEntityScalarQuery,IdeaBlade.Core.IProjectionSelector,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},System.Object)">
            <summary>
            Computes the sum of the sequence of numeric values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <param name="source"></param>
            <param name="projectionSelector"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncSumWithPredicate() {
      var op = _entityManager.OrderSummaries.AsScalarAsync().Sum<OrderSummary, Nullable<Decimal>>(o => o.Freight);
      op.Completed += (o, e) => {
        var ct = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Sum``2(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``1}},System.Object)">
            <summary>
            Computes the sum of the sequence of numeric values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="projection"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncSumWithPredicate() {
      var op = _entityManager.OrderSummaries.AsScalarAsync().Sum<OrderSummary, Nullable<Decimal>>(o => o.Freight);
      op.Completed += (o, e) => {
        var ct = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Average(IdeaBlade.EntityModel.IEntityScalarQuery,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},System.Object)">
            <summary>
            Computes the average of a sequence of numeric values.
            </summary>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncAverage() {
      var op = _entityManager.OrderSummaries.Select(o => o.Freight).AsScalarAsync().Average();
      op.Completed += (o, e) => {
        var ct = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Average``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``0}},System.Object)">
            <summary>
            Computes the average of a sequence of numeric values.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
    public void AsyncAverage() {
      var op = _entityManager.OrderSummaries.Select(o => o.Freight).AsScalarAsync().Average();
      op.Completed += (o, e) => {
        var ct = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Average(IdeaBlade.EntityModel.IEntityScalarQuery,IdeaBlade.Core.IProjectionSelector,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation},System.Object)">
            <summary>
            Computes the average of a sequence of numeric values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <param name="source"></param>
            <param name="projectionSelector"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
   public void AsyncAverageWithPredicate() {
      var op = _entityManager.OrderSummaries.AsScalarAsync().Average<OrderSummary, Nullable<Decimal>>(o => o.Freight);
      op.Completed += (o, e) => {
        var ct = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Average``2(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{``1}},System.Object)">
            <summary>
            Computes the average of a sequence of numeric values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="projection"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[   
   public void AsyncAverageWithPredicate() {
      var op = _entityManager.OrderSummaries.AsScalarAsync().Average<OrderSummary, Nullable<Decimal>>(o => o.Freight);
      op.Completed += (o, e) => {
        var ct = e.Result;
      };
    }          
      ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Any(IdeaBlade.EntityModel.IEntityScalarQuery,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{System.Boolean}},System.Object)">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
    public void AsyncAny() {
      var op = _entityManager.Employees.AsScalarAsync().Any();
      op.Completed += (o, e) => {
        bool result = e.Result;
      }
    }
       ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Any``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{System.Boolean}},System.Object)">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
    public void AsyncAny() {
      var op = _entityManager.Employees.AsScalarAsync().Any();
      op.Completed += (o, e) => {
        bool result = e.Result;
      }
    }
       ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Any(IdeaBlade.EntityModel.IEntityScalarQuery,IdeaBlade.Core.IPredicateDescription,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{System.Boolean}},System.Object)">
            <summary>
            Determines whether any element of a sequence satisfies a condition.
            </summary>
            <param name="source"></param>
            <param name="predicateDescription"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
    public void AsyncAnyWithPredicate() {
      var op = _entityManager.Employees.AsScalarAsync().Any(e=> e.Country == "UK");
      op.Completed += (o, e) => {
        bool result = e.Result;
      };
    }
       ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Any``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{System.Boolean}},System.Object)">
            <summary>
            Determines whether any element of a sequence satisfies a condition.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
    public void AsyncAnyWithPredicate() {
      var op = _entityManager.Employees.AsScalarAsync().Any(e=> e.Country == "UK");
      op.Completed += (o, e) => {
        bool result = e.Result;
      };
    }
       ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.All(IdeaBlade.EntityModel.IEntityScalarQuery,IdeaBlade.Core.IPredicateDescription,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{System.Boolean}},System.Object)">
            <summary>
            Determines whether all the elements of a sequence satisfy a condition.
            </summary>
            <param name="source"></param>
            <param name="predicateDescription"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
    public void AsyncAllWithPredicate() {
      var op = _entityManager.Employees.AsScalarAsync().All(e => e.Country == "Brazil");
      op.Completed += (o, e) => {
        bool result = e.Result;
      };
    }       
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.All``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{System.Boolean}},System.Object)">
            <summary>
            Determines whether all the elements of a sequence satisfy a condition.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
    public void AsyncAllWithPredicate() {
      var op = _entityManager.Employees.AsScalarAsync().All(e => e.Country == "Brazil");
      op.Completed += (o, e) => {
        bool result = e.Result;
      };
    }       
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Contains(IdeaBlade.EntityModel.IEntityScalarQuery,System.Object,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{System.Boolean}},System.Object)">
            <summary>
            Determines whether a sequence contains any elements that match the specified element.
            </summary>
            <param name="source"></param>
            <param name="item"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
    public void AsyncAny() {
      var op = _entityManager.Employees.AsScalarAsync().Any();
      op.Completed += (o, e) => {
        bool result = e.Result;
      }
    }
       ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityScalarAsyncExtensions.Contains``1(IdeaBlade.EntityModel.IEntityScalarQuery{``0},``0,System.Action{IdeaBlade.EntityModel.EntityScalarQueryOperation{System.Boolean}},System.Object)">
            <summary>
            Determines whether a sequence contains any elements that match the specified element.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="item"></param>
            <param name="userCallback"></param>
            <param name="userState"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
    public void AsyncAny() {
      var op = _entityManager.Employees.AsScalarAsync().Any();
      op.Completed += (o, e) => {
        bool result = e.Result;
      }
    }
       ]]>
        </code>
      </example>
        </member>
        <member name="T:IdeaBlade.EntityModel.CacheQueryExpressionVisitor">
            <summary>
            For internal use only. Called to convert a query to a cache only in memory query
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheQueryExpressionVisitor.#ctor(IdeaBlade.EntityModel.CacheQueryOptions,System.Linq.Expressions.ParameterExpression)">
            <summary>
            For internal use only.
            </summary>
            <param name="cacheQueryOptions"></param>
            <param name="entityManagerParameterExpr"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.CacheQueryExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQuery`1">
            <summary>
            Represents a Language-Integrated Query (LINQ) against either the backend data source
            or the <see cref="T:IdeaBlade.EntityModel.EntityManager"/> cache.
            <seealso cref="T:IdeaBlade.EntityModel.EntityManager"/>
            <seealso cref="T:IdeaBlade.EntityModel.EntityQueryExtensions"/>
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            The DevForce Object Mapping tool auto-generates an appropriately typed <b>EntityQuery&lt;T&gt;</b>
            property on your sub-typed EntityManager for every entity set defined in your domain model.  You can
            execute these queries as is, or add additional clauses using either "method" or "query" LINQ syntax.
            You can also construct new queries.
            <para>
            An <b>EntityQuery&lt;T&gt;</b> can be executed in several ways.  First, you can use LINQ deferred execution:
            that is the query is automatically executed as you begin iterating over the query variable using a <b>foreach</b>
            statement.  The query's <see cref="P:IdeaBlade.EntityModel.EntityQuery.EntityManager"/>  
            and <see cref="P:IdeaBlade.EntityModel.EntityQuery.QueryStrategy"/> determine
            how the query results are obtained.  
            </para>
            <para>
            You can force immediate execution of the <b>EntityQuery&lt;T&gt;</b> by calling either <b>ToList()</b>
            or <b>ToArray()</b> on the query.  This again will use the query's <see cref="P:IdeaBlade.EntityModel.EntityQuery.EntityManager"/> 
            and <see cref="P:IdeaBlade.EntityModel.EntityQuery.QueryStrategy"/> 
            to determine how the query results are obtained.  
            </para>
            <para>
            You can also use one of the many <see cref="M:IdeaBlade.EntityModel.EntityManager.ExecuteQuery``1(IdeaBlade.EntityModel.IEntityQuery{``0})">ExecuteQuery</see> methods
            defined on the <see cref="T:IdeaBlade.EntityModel.EntityManager"/>.  These methods give you additonal control over how the
            query is executed, but are functionally equivalent to using either the standard deferred and immediate
            methods of LINQ.
            </para>
            <para>
            DevForce supports all the LINQ standard query operators supported by the Microsoft Entity Framework (EF),
            as well as some operators not yet supported in EF.  Check the DevForce Developer's Guide for more information.
            </para>
            <para>
            An <b>EntityQuery&lt;T&gt;</b> can be used in either 2-tier or n-tier DevForce deployments without
            modification.  In n-tier implementations DevForce will serialize the query to the BOS for execution
            and return appropriate results to the client.  Note that queries returning anonymous types can also be
            used in either 2-tier or n-tier.
            </para>
            </remarks>
            <example>
      <code lang="C#">
        
   // Simple queries in LINQ query and method syntax.        
   public void SimpleQueries() {

      AW2000Model.Manager mgr = new AW2000Model.Manager();

      // 1 - retrieve all customers using LINQ query syntax. 
      // (Careful, this may be alot of data ...) 
      EntityQuery&lt;Customer&gt; q1 = from c in mgr.Customers
                                 select c;
      List&lt;Customer&gt; results1 = q1.ToList();

      // 2- retrieve all customers using LINQ method syntax. 
      EntityQuery&lt;Customer&gt; q2 = mgr.Customers;
      List&lt;Customer&gt; results2 = q2.ToList();

      // 3 - retrieve customers with criteria 
      EntityQuery&lt;Customer&gt; q3 = from c in mgr.Customers
                                 where c.CustomerID &lt; 20
                                 select c;
      List&lt;Customer&gt; results3 = q3.ToList();

      EntityQuery&lt;Customer&gt; q4 = mgr.Customers.Where(c =&gt; c.CustomerID &lt; 20);
      List&lt;Customer&gt; results4 = q4.ToList();
    } 
    
    // Query projection returning an anonymous type.
    public void QueryAnonymousTypes() {

      AW2000Model.Manager mgr = new AW2000Model.Manager();

      // Return an anonymous type of {custid, salesorders}
      var q1 = from c in mgr.Customers
               where (c.CustomerID == 1 || c.CustomerID == 2)
               select new { c.CustomerID, c.SalesOrderHeaders };
      var results1 = q1.ToList();

      // Same as above, using method syntax.
      var q2 = mgr.Customers.Where(c =&gt; c.CustomerID == 1 || c.CustomerID == 2)
        .Select(c =&gt; new { c.CustomerID, c.SalesOrderHeaders });
      var results2 = q2.ToList();
    }
    
    public void QueryWithOrderBy() {

      AW2000Model.Manager mgr = new AW2000Model.Manager();

      EntityQuery&lt;Customer&gt; q1 = from c in mgr.Customers
                                 where c.CustomerID &lt; 10
                                 orderby c.CustomerID descending
                                 select c;

      // Let's call ExecuteQuery directly. 
      IEnumerable&lt;Customer&gt; results1 = mgr.ExecuteQuery&lt;Customer&gt;(q1);

      // Same as above 
      EntityQuery&lt;Customer&gt; q2 = mgr.Customers
                            .Where(c =&gt; c.CustomerID &lt; 10)
                            .OrderByDescending(c =&gt; c.CustomerID);
      IEnumerable&lt;Customer&gt; results2 = mgr.ExecuteQuery&lt;Customer&gt;(q2);
    } 
    
    // More complex queries - nested criteria and use of .Include.
    public void QueryNestedWithInclude() {

      AW2000Model.Manager mgr = new AW2000Model.Manager();

      // Return customers based on nested criteria.
      var q1 = from c in mgr.Customers
               where c.SalesPerson.SalesLastYear &gt; 2000000
               select c;
      q1 = q1.Include("SalesPerson");
      var results1 = q1.ToList();

      // Equivalent query in method syntax.
      var q2 = mgr.Customers.Where(c =&gt; c.SalesPerson.SalesLastYear &gt; 2000000)
        .Include("SalesPerson");
      var results2 = q2.ToList();
   }

      </code>
    </example>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityQuery`1">
            <summary>
            Interface implemented by <see cref="T:IdeaBlade.EntityModel.EntityQuery`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery`1.#ctor">
            <summary>
            Construct a new query.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery`1.#ctor(System.String)">
            <summary>
            Construct a new query with the specified entity set name.
            </summary>
            <param name="entitySetName"></param>
            <remarks>
            See the <see cref="P:IdeaBlade.EntityModel.EntityQuery.EntitySetName"/> property for further information.
            The <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultQueryStrategy"/>
            of the <see cref="T:IdeaBlade.EntityModel.EntityManager"/> is used.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery`1.#ctor(System.String,IdeaBlade.EntityModel.EntityManager)">
            <summary>
            Construct a new query with specified entity set name and EntityManager.
            </summary>
            <param name="entitySetName"></param>
            <param name="manager"></param>
            <remarks>
            See the <see cref="P:IdeaBlade.EntityModel.EntityQuery.EntitySetName"/> and <see cref="P:IdeaBlade.EntityModel.EntityQuery.EntityManager"/>
            properties for more information.  The <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultQueryStrategy"/>
            of the <see cref="T:IdeaBlade.EntityModel.EntityManager"/> is used.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery`1.#ctor(IdeaBlade.EntityModel.EntityQuery)">
            <summary>
            Casts an EntityQuery to an <b>EntityQuery{T}</b>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery`1.#ctor(IdeaBlade.EntityModel.EntityQuery{`0})">
            <summary>
            Copy constructor.
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery`1.#ctor(System.Linq.Expressions.Expression,System.Linq.IQueryable)">
            <summary>
            Constructs a new query from the Expression and an IQueryable ( either another EntityQuery or an EntityGroup);
            </summary>
            <param name="expression"></param>
            <param name="queryable"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery`1.#ctor(System.Linq.Expressions.Expression,IdeaBlade.EntityModel.EntityQueryProxy)">
            <summary>
            Needed in order for runtime compiler to be able to construct 
            intermediate query expressions
            </summary>
            <param name="expression"></param>
            <param name="proxy"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery`1.AddIncludePaths(System.String[])">
            <summary>
            
            </summary>
            <param name="propertyPaths"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery`1.Clone">
            <summary>
            Creates a copy of this query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery`1.GetServerQuery">
            <summary>
            Returns an EntityQuery which can be executed on the server.
            </summary>
            <returns></returns>
            <remarks>
            Localizes (resolves) all parameter expressions so that
            the query can be converted to an EDM query.  Used internally
            be the DevForce framework.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Internal use only - part of <see cref="T:System.Linq.IQueryProvider"/> implementation.
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Internal use only - part of <see cref="T:System.Linq.IQueryProvider"/> implementation.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Internal use only - part of <see cref="T:System.Linq.IQueryProvider"/> implementation.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <summary>
            Internal use only - part of <see cref="T:System.Linq.IQueryProvider"/> implementation.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery`1.GetEnumerator">
            <summary>
            Internal use only - part of <see cref="T:System.Collections.Generic.IEnumerable`1"/> implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery`1.OfType``1">
            <summary>
            Filters the elements of an IEntityQuery based on a specified type.
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery`1.Cast``1">
            <summary>
            Converts the elements of an EntityQuery{T} to the specified type.
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQuery`1.ExecuteCacheQuery">
            <summary>
            Used internally by the DevForce framework to execute the query against
            the <see cref="T:EntityManager"/> cache.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery`1.ElementType">
            <summary>
            The type returned by this query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityQuery`1.System#Linq#IQueryable#Provider">
            <summary>
            Internal use only - part of <see cref="T:System.Linq.IQueryable"/> implementation.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityScalarQuery`1">
            <summary>
            Represents a scalar query.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityScalarQuery`1">
            <summary>
            Interface representing a typed scalar query which can be executed asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:IdeaBlade.EntityModel.EntityScalarAsyncExtensions"/>
            <seealso cref="M:IdeaBlade.EntityModel.EntityQueryExtensions.AsScalarAsync``1(IdeaBlade.EntityModel.IEntityQuery{``0})"/>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityScalarQuery">
            <summary>
            Base interface representing an untyped scalar query which can be executed asynchronously.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.IEntityScalarQuery.ReturnNullEntity">
            <summary>
            Whether a null entity can be returned.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityScalarQuery`1.ReturnNullEntity">
            <summary>
            True if the scalar result should be a NullEntity if nothing is returned.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityRelationQuery">
            <summary>
            An implementation of <see cref="T:IdeaBlade.EntityModel.IEntityQuery"/> that may be used to query any entities
            via their <see cref="T:IdeaBlade.EntityModel.EntityRelation"/>s with other entities.
            </summary>
            <remarks>
            In your application code it is generally easier to use the navigation property
            getters auto-generated by the DevForce Object Mapper in the entities of your domain model
            to query for related entities.  The framework will automatically build an
            <b>EntityRelationQuery</b> when necessary.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationQuery.#ctor(IdeaBlade.EntityModel.EntityRelationQuery)">
            <summary>
            Copy constructor
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationQuery.#ctor(System.Object,IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            Construct a query for all entities related to the specified entity 
            via the specified <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/>.
            </summary>
            <param name="entity"></param>
            <param name="relationLink"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationQuery.#ctor(System.Collections.IEnumerable,IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            Construct a query for all entities related to a collection of specified entities 
            via the specified <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/>.
            </summary>
            <param name="entities"></param>
            <param name="relationLink"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationQuery.Clone">
            <summary>
            See <see cref="M:System.ICloneable.Clone"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationQuery.CreateFinder(IdeaBlade.EntityModel.EntityManager)">
            <summary>
            For internal use only.
            </summary>
            <param name="entityManager"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationQuery.InQueryCache(IdeaBlade.EntityModel.QueryCache)">
            <summary>
            Is this query in the QueryCache.
            </summary>
            <param name="queryCache"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationQuery.AddToQueryCache(IdeaBlade.EntityModel.QueryCache)">
            <summary>
            Add this query to the QueryCache.
            </summary>
            <param name="queryCache"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationQuery.EntityManager">
            <summary>
            Gets the EntityManager for the query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationQuery.Entities">
            <summary>
            A list of entities from which to navigate the <see cref="P:IdeaBlade.EntityModel.EntityRelationQuery.RelationLink"/> to retrieve results.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationQuery.RelationLink">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/> on which to navigate from the <see cref="P:IdeaBlade.EntityModel.EntityRelationQuery.Entities"/> collection to retrieve results.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationQuery.QueryableType">
            <summary>
            The type of entities being queried.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationQuery.ElementType">
            <summary>
            The type of entities being returned.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationQuery.QueryStrategy">
            <summary>
            The <see cref="P:IdeaBlade.EntityModel.EntityRelationQuery.QueryStrategy"/> for this query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationQuery.CommandTimeout">
            <summary>
            Gets or sets the wait time in seconds before terminating the attempt to execute a command and generating an error.
            </summary>
            <remarks>
            A value of 0 indicates that the default timeout value for the data provider should be used - this is usually 30 seconds.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationQuery.Tag">
            <summary>
            Custom information regarding this query
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityRelationFinder">
            <summary>
            For internal use only. 
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationFinder.#ctor(IdeaBlade.EntityModel.EntityManager,IdeaBlade.EntityModel.EntityRelationQuery)">
            <summary>
            For internal use only. 
            </summary>
            <param name="manager"></param>
            <param name="query"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationFinder.Execute">
            <summary>
            For internal use only. 
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationFinder.BuildServerQuery(IdeaBlade.EntityModel.IEntityQuery)">
            <summary>
            
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityRelationFinder.ExecuteFind(System.Guid)">
            <summary>
            For internal use only. 
            </summary>
            <param name="queryGuid"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationFinder.ServerQuery">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityRelationFinder.ServerQuerySurrogate">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityKeyFinder">
            <summary>
            For internal use only. 
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyFinder.#ctor(IdeaBlade.EntityModel.EntityManager,IdeaBlade.EntityModel.EntityKeyQuery)">
            <summary>
            For internal use only. 
            </summary>
            <param name="manager"></param>
            <param name="query"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyFinder.Execute">
            <summary>
            For internal use only. 
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyFinder.ExecuteFind(System.Guid)">
            <summary>
            For internal use only. 
            </summary>
            <param name="queryId"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyFinder.RemoveGhosts(System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.EntityAspect},System.Guid)">
            <summary>
            For internal use only. 
            </summary>
            <param name="entityAspects"></param>
            <param name="queryQuid"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityKeyFinder.ServerQuerySurrogate">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityKeyFinder.ServerQuery">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQueryFinder">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityKeyQuery">
            <summary>
            An implementation of <see cref="T:IdeaBlade.EntityModel.IEntityQuery"/> that is used to 
            retrieve entities based on their <see cref="T:IdeaBlade.EntityModel.EntityKey"/>'s.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyQuery.#ctor(IdeaBlade.EntityModel.EntityKey)">
            <summary>
            Construct a new query for a single entity given its <see cref="T:IdeaBlade.EntityModel.EntityKey"/>
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyQuery.#ctor(IdeaBlade.EntityModel.EntityKeyList)">
            <summary>
            Construct a new query for multiple entities given their <see cref="T:IdeaBlade.EntityModel.EntityKey"/>'s.
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyQuery.#ctor(System.Type,System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.EntityKey})">
            <summary>
            Construct a new query for multiple entities given their <see cref="T:IdeaBlade.EntityModel.EntityKey"/>'s.
            </summary>
            <param name="entityType"></param>
            <param name="keys"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyQuery.Clone">
            <summary>
            See <see cref="M:System.ICloneable.Clone"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyQuery.Execute">
            <summary>
            Executes this query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyQuery.CreateFinder(IdeaBlade.EntityModel.EntityManager)">
            <summary>
            For internal use only.
            </summary>
            <param name="entityManager"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyQuery.InQueryCache(IdeaBlade.EntityModel.QueryCache)">
            <summary>
            Is this query in the <see cref="T:IdeaBlade.EntityModel.QueryCache"/>.
            </summary>
            <param name="queryCache"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyQuery.AddToQueryCache(IdeaBlade.EntityModel.QueryCache)">
            <summary>
            Add this query to the <see cref="T:IdeaBlade.EntityModel.QueryCache"/>.
            </summary>
            <param name="queryCache"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityKeyQuery.Keys">
            <summary>
            The keys for which entities will be retrieved.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityKeyQuery.QueryableType">
            <summary>
            The entity type being queried.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityKeyQuery.ElementType">
            <summary>
            The entity type returned from this query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityKeyQuery.QueryStrategy">
            <summary>
            Gets or sets the <see cref="P:IdeaBlade.EntityModel.EntityKeyQuery.QueryStrategy"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityKeyQuery.EntityManager">
            <summary>
            The EntityManager for this query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityKeyQuery.CommandTimeout">
            <summary>
            The timeout period ( in milliseconds) for this query if executed on the server.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityKeyQuery.Tag">
            <summary>
            Custom information regarding this query.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityQueryBuilder">
            <summary>
            Used internally by the framework to build an <see cref="T:IdeaBlade.EntityModel.EntityQuery"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryBuilder.BuildQuery(IdeaBlade.EntityModel.EntityKey[])">
            <summary>
            Builds an <see cref="T:IdeaBlade.EntityModel.EntityQuery"/> based on a collection of <see cref="T:IdeaBlade.EntityModel.EntityKey"/>s.
            The EntityQuery returned is actually an EntityQuery{T} but T is unknown at compile time.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryBuilder.BuildQuery(System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.EntityKey})">
            <summary>
            Builds an <see cref="T:IdeaBlade.EntityModel.EntityQuery"/> based on a collection of <see cref="T:IdeaBlade.EntityModel.EntityKey"/>s.
            The EntityQuery returned is actually an EntityQuery{T} but T is unknown at compile time.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryBuilder.BuildQuery(System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.EntityKey},IdeaBlade.EntityModel.EntityQuery)">
            <summary>
            Builds an <see cref="T:IdeaBlade.EntityModel.EntityQuery"/> tied to a specific <see cref="T:IdeaBlade.EntityModel.EntityGroup"/> based on a collection of <see cref="T:IdeaBlade.EntityModel.EntityKey"/>s
            </summary>
            <param name="keys"></param>
            <param name="entityQuery"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryBuilder.BuildQuery(System.Collections.IEnumerable,IdeaBlade.EntityModel.EntityRelationLink)">
            <summary>
            Builds an <see cref="T:IdeaBlade.EntityModel.EntityQuery"/> given a specified collection of entities and a <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/>.
            The EntityQuery returned is actually an EntityQuery{T} but T is unknown at compile time.
            </summary>
            <param name="entities"></param>
            <param name="relationLink"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryBuilder.BuildEmptyQuery(System.Type)">
            <summary>
            Returns a query that will return an Empty enumeration of specified type when executed.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityQueryBuilder.BuildLambdaKeyQuery(System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.EntityKey})">
            <summary>
            For internal use only. Handles both scalar and multivalued primary keys
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.Compression">
            <summary>
            This class supports the IdeaBlade Framework infrastructure 
            and is not intended to be used directly from your code 
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.Compression.Compress(System.IO.Stream)">
            <summary>
            Compresses the specified data stream.
            </summary>
            <param name="pDataStream">data stream</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.Compression.Decompress(System.IO.Stream)">
            <summary>
            Decompresses the specified compressed data stream.
            </summary>
            <param name="pCompressedDataStream">compressed data stream</param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.EntityModel.DataSourceAccessType">
            <summary>
            The access level defined by the data source for an <see cref="T:IdeaBlade.EntityModel.EntityProperty"/>.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.DataSourceAccessType.ReadWrite">
            <summary>
            Read and write access allowed
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.DataSourceAccessType.ReadOnly">
            <summary>
            Read only access
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.DataSourceAccessType.None">
            <summary>
            No access allowed
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.DataSourceKeyNameAttribute">
            <summary>
              Defines an attribute that associates an Entity subclass with a DataSourceKeyName.
            </summary>
            <remarks>
            This attribute is auto-generated by the Object Mapper on each Entity class using the
            name of the data source key specified for the Entity Model. It is also generated on each 
            EntityManager partial class to indicate which datasource keys are present within the EntityManager.
            Multiple datasource key attributes may be marked on a single EntityManager because an EntityManager may consist of 
            multiple partial classes each representing a different data source.  At run time, the actual
            data source key used is resolved based on the <b>DataSourceKeyName</b> attribute and the
            data source extension used by the Entity Manager.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataSourceKeyNameAttribute.#ctor(System.String)">
            <summary>
              Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataSourceKeyNameAttribute.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.DataSourceKeyNameAttribute.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.DataSourceKeyNameAttribute.Name">
            <summary>
            The key name.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.DataSourceKeyStatus">
            <summary>
            The status of the data source key.  
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.DataSourceKeyStatus.Ok">
            <summary>
            The key was found and the <see cref="M:IdeaBlade.Core.IDataSourceKey.CheckConnection"/> succeeded.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.DataSourceKeyStatus.UnableToLocate">
            <summary>
            The key could not be found by the <see cref="T:IdeaBlade.EntityModel.DataSourceResolver"/>.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.DataSourceKeyStatus.UnableToConnect">
            <summary>
            The key was found but the <see cref="M:IdeaBlade.Core.IDataSourceKey.CheckConnection"/> failed.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.DefaultDataSourceKeyResolver">
            <summary>
            Default implementation of the <see cref="T:IdeaBlade.EntityModel.IDataSourceKeyResolver"/> interface.
            </summary>
            <remarks>
            The <b>DefaultDataSourceKeyResolver</b> is used for all data source key name resolution unless
            a custom implementation of <see cref="T:IdeaBlade.EntityModel.IDataSourceKeyResolver"/> is found.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.IDataSourceKeyResolver">
            <summary>
            Interface used to resolve the data source key which will be used to connect to a data source.
            </summary>
            <remarks>
            The <see cref="T:IdeaBlade.EntityModel.DefaultDataSourceKeyResolver"/> is used by default to determine the key
            and connection information to be used when accessing a data source.  To override this behavior implement
            a custom <b>IDataSourceKeyResolver</b>.
            If a custom IDataSourceKeyResolver is found, a single instance of the class will be 
            created for the <see cref="T:IdeaBlade.EntityModel.EntityManager"/> and called for all data source key resolution.
            <para>
            If using a custom <b>IDataSourceKeyResolver</b> you will not need to place data source key information
            in your IdeaBlade Configuration file.
            </para>
            </remarks>
            <example><code lang="C#">
// Sample custom implementation of IDataSourceKeyResolver.

[Serializable]
public class DynamicDataSourceKeyResolver : IDataSourceKeyResolver {

  // This class will generate a new key when the extension of "Dynamic" is used.  
  // All other keys are handled by the default resolver.
  // Note the edmKey created here is not defined in the IdeaBlade configuration file.

  // Also note that GetKey will be called once on both the client and the server.

  public IDataSourceKey GetKey(String keyName, String keyExtension, bool onServer) {

    // Generally no need for customization on client, so allow default resolution.
    if (!onServer) return null;

    if (keyExtension != "Dynamic") return null;  // Allow default resolution of key.

    // We've already defined &lt;connectionStrings&gt; in our config file, so see what's there.
    var cs = IdeaBladeConfig.Instance.Configuration.ConnectionStrings.ConnectionStrings[keyName];

    // Switch database server based on time of day.
    string connection = cs.ConnectionString;
    if (DateTime.UtcNow.Hour &gt; 12) {
      connection = connection.Replace("Data Source=SF-Server", "Data Source=NY-Server");
    } 

    ClientEdmKey newKey = new ClientEdmKey("mynewkey", connection);
    return newKey;
  }
}
</code></example><example><code lang="VB">
	</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.IDataSourceKeyResolver.GetKey(System.String,System.String,System.Boolean)">
            <summary>
            Returns the <see cref="T:IdeaBlade.Core.IDataSourceKey"/> for a given key name and extension.
            </summary>
            <param name="keyName">Data source key name</param>
            <param name="keyExtension">Extension or empty string</param>
            <param name="onServer">True if called from the EntityServer</param>
            <returns>A data source key or null if default key resolution is desired </returns>
            <remarks>
            If a <c>null</c> key is returned the <see cref="T:IdeaBlade.EntityModel.DefaultDataSourceKeyResolver"/> will attempt
            to resolve the key.
            <para>
            <b>GetKey</b> will be called once per keyName and keyExtension on both the client and server.  If you
            need to secure your client connection information you may want to implement separate versions of 
            this class on the client and server tiers.
            </para>
            <para>
            The <see cref="T:IdeaBlade.EntityModel.IDataSourceKey"/> returned is stored in a map, and the same key is reused
            whenever the same key name and extension are encountered.  Note that on the server this means
            that the same key will be used by any users of your application: user-specific keys are not
            supported.
            </para>
            <para>
            Any exception thrown in your <b>GetKey</b> implementation will be returned to the calling client.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.DefaultDataSourceKeyResolver.GetKey(System.String,System.String,System.Boolean)">
            <summary>
            Returns the <see cref="T:IdeaBlade.Core.IDataSourceKey"/> for a given key name and extension.
            </summary>
            <param name="keyName">Data source key name</param>
            <param name="keyExtension">Extension or empty string</param>
            <param name="onServer">True if called from the Entity Server</param>
            <returns>Concrete data source key</returns>
            <remarks>
            <b>GetKey</b> searches the keys specified in the IdeaBlade configuration file
            for the first key matching the name and extension provided.  
            If an extension is provided, key name matching is first done for the "keyName_ext" pattern; if not found 
            then the "keyName_ext_*" pattern is used; and finally if still not found the search is for the keyName only.  
            <para>
            If an extension is not provided (either null or empty string) then only the keyName lookup is done.
            </para>
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntitySavingEventArgs">
            <summary>
            Arguments to the <see cref="E:IdeaBlade.EntityModel.EntityManager.Saving"/> event.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntitySavingEventArgs.Entities">
            <summary>
            List of entities to be saved.  This collection may be modified.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntitySavedEventArgs">
            <summary>
            Arguments to both the completion handler specified for an <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChangesAsync"/> call
            and to an <see cref="E:IdeaBlade.EntityModel.EntityManager.Saved"/> event handler.
            </summary>
            <remarks>
            If you have subscribed to the <see cref="E:IdeaBlade.EntityModel.EntityManager.Saved"/> event, your handler will
            receive an instance of <b>EntitySavedEventArgs</b> for both synchronous and asynchronous
            save operations.  
            <para>
            If you have called EntityManager.SaveChangesAsync, the <see cref="E:IdeaBlade.EntityModel.BaseOperation.Completed">EntitySaveOperation.Completed"&gt;</see> event handler
            will be called with an instance of <b>EntitySavedEventArgs</b> representing the status of the
            save operation.  
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntitySavedEventArgs.ToSyncEventArgs(IdeaBlade.EntityModel.SaveWorkState)">
            <summary>
            Create args for Saved event for a synchronous save. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntitySavedEventArgs.Entities">
            <summary>
            List of entities saved.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntitySavedEventArgs.SaveResult">
            <summary>
            The SaveResult for the operation.
            </summary>
            <remarks>
            Note the the <b>SaveResult</b> will be returned even if an exception has occurred or the
            operation was cancelled.  You can use <see cref="P:IdeaBlade.EntityModel.SaveResult.SaveStatus"/> to determine processing results.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntitySavedEventArgs.Exception">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityCacheState">
            <summary>
            A serializable collection of Entities that can be retrieved from an EntityManager.
            <seealso cref="T:IdeaBlade.EntityModel.EntityManager"/>
            <seealso cref="T:IdeaBlade.EntityModel.EntityCache"/>
            <seealso cref="T:IdeaBlade.EntityModel.CacheStateManager"/>
            </summary>
            <remarks>
            An <b>EntityCacheState</b> is retrieved from an <see cref="T:IdeaBlade.EntityModel.EntityManager"/> via the
            <see cref="M:IdeaBlade.EntityModel.CacheStateManager.GetCacheState()"/> method; it can then be serialized and stored.
            The <b>EntityCacheState</b> can be restored by deserializing the contents and calling either the
            <see cref="M:IdeaBlade.EntityModel.EntityCacheState.Merge(IdeaBlade.EntityModel.EntityManager,IdeaBlade.EntityModel.RestoreStrategy)"/> or <see cref="M:IdeaBlade.EntityModel.CacheStateManager.RestoreCacheState(EntityCacheState)"/> methods.
            <para>The <see cref="M:IdeaBlade.EntityModel.CacheStateManager.SaveCacheState(System.String,System.Boolean)"/> and <see cref="M:IdeaBlade.EntityModel.CacheStateManager.RestoreCacheState(System.String,System.Boolean)"/>
            methods of the <see cref="T:IdeaBlade.EntityModel.EntityCacheManager"/> class provide additional serialization and deserialization
            capabilities.  You can use <b>EntityCacheState</b> directly if you prefer additional control over this processing.
            You will normally work with the <b>EntityCacheState</b> via the EntityManager's 
            <see cref="P:IdeaBlade.EntityModel.EntityManager.CacheStateManager"/> property.
            </para>
            </remarks>
            <example>
        <code lang="C#">
       private void SampleEntityCacheUsage() {

          DomainModelEntityManager mgr = new DomainModelEntityManager();

          // Cache all employees.
          mgr.ExecuteQuery&lt;Employee&gt;();

          // Save the cache to local storage.
          mgr.CacheStateManager.SaveCacheState(@"c:\temp\entitycache.bin");

          // Ocassionally-connected users will normally connect, cache all data required,
          // then disconnect and work from local cache and/or locally saved cache until they can reconnect.
          // In this example, we'll mimic a disconnected login for this user by clearing all cached data
          // and then re-loading the cache from local storage.
          mgr.Disconnect();
          mgr.Clear();

          mgr.CacheStateManager.RestoreCacheState(@"c:\temp\entitycache.bin");

          // Let's reconnect and get more data now.
          mgr.Connect();
          mgr.ExecuteQuery&lt;Customer&gt;();
       }
        </code>
      </example><example>
        <code lang="VB">
        Private Sub SampleEntityCacheUsage()

          Dim mgr As New DomainModelEntityManager()

          ' Cache all employees.
          mgr.ExecuteQuery(Of Employee)()

          ' Save the cache to local storage.
          mgr.CacheStateManager.SaveCacheState("c:\temp\entitycache.bin")

          ' Ocassionally-connected users will normally connect, cache all data required,
          ' then disconnect and work from local cache and/or locally saved cache until they can reconnect.
          ' In this example, we'll mimic a disconnected login for this user by clearing all cached data
          ' and then re-loading the cache from local storage.
          mgr.Disconnect()
          mgr.Clear()

          mgr.CacheStateManager.RestoreCacheState("c:\temp\entitycache.bin")

          ' Let's reconnect and get more data now.
          mgr.Connect()
          mgr.ExecuteQuery(Of Customer)()
        End Sub
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityCacheState.#ctor(IdeaBlade.EntityModel.EntityManager)">
            <summary>
            Initialize a new instance of the EntityCacheState class.
            </summary>
            <param name="entityManager"></param>
            <remarks>
            Use this constructor to create an <b>EntityCacheState</b> for all items in the 
            <see cref="T:IdeaBlade.EntityModel.EntityManager"/> cache.
            </remarks>
            This ctor should only be called internally because if keeps an internal ref to the entityManager
            and therefor needs to be used immediately before the entityManager changes or should be cloned ( see DeepClone).
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityCacheState.#ctor(IdeaBlade.EntityModel.EntityManager,System.Collections.IEnumerable)">
            <summary>
            Initialize a new instance of the EntityCacheState class using the list of entities specified.
            </summary>
            <param name="entityManager"></param>
            <param name="entities">List of Entities</param>
            <remarks>
            Use this constructor to create an <b>EntityCacheState</b> for only the items passed in
            the <paramref name="entities"/> parameter.  
            <para>
            If any temporary Ids have been assigned to entities in the list provided, all related entities
            which reference the temporary Id must also be included.  For example, if an Order has been assigned 
            a temporary Id of -1, the Order and all its OrderDetails must be included in the list, not only the 
            Order or only the OrderDetails.
            </para>
            </remarks>
            <exception cref="T:IdeaBlade.Core.IdeaBladeException">Thrown if temporary Id references cannot be resolved</exception>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityCacheState.Save(System.String,System.Boolean)">
            <summary>
            Saves the EntityCacheState to a file.
            </summary>
            <param name="fileName">Fully-qualified name of file</param>
            <param name="useBinaryFormat">True to save the file in binary format, false to save in text format.</param>
            <remarks>
            The EntityCacheState is serialized to the file in binary format by default; set parameter <paramref name="useBinaryFormat"/> to false
            to save the file in text format.  The user must have write permissions to the directory, and if the file exists it will be overwritten.
            </remarks>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityCacheState.Restore(System.String,System.Boolean)">
            <summary>
            Static (Shared in Visual Basic) method which creates and loads an EntityCacheState from the file specified.
            </summary>
            <param name="fileName">File containing a serialized EntityCacheState</param>
            <param name="useBinaryFormat">True to restore a file in binary format, false if the file is in text format.</param>
            <returns>An EntityCacheState</returns>
            <remarks>
            Use <b>Restore</b> to deserialize an EntityCacheState which was previously saved to a file.
            <para>
            Note that this method does not merge the EntityCacheState into an <see cref="T:IdeaBlade.EntityModel.EntityManager"/>.  Call 
            <see cref="M:IdeaBlade.EntityModel.EntityCacheState.Merge(IdeaBlade.EntityModel.EntityManager,IdeaBlade.EntityModel.RestoreStrategy)"/> or <see cref="M:CacheStateManager.RestoreCacheState(EntityCacheState)"/> for this.
            Instead of performing the <b>Restore</b> and merge/restore as separate steps, you can instead
            use <see cref="M:CacheStateManager.RestoreCacheState(string)"/>
            to accomplish the same thing.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityCacheState.Save(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Saves the EntityCacheState to a Stream, optionally closing the stream when done.
            </summary>
            <param name="stream"></param>
            <param name="closeOnExit">True to close the stream when done; false to leave the stream open for additional processing.</param>
            <param name="useBinaryFormat">True to save the file in binary format, false to save in text format.</param>
            <remarks>
            The EntityCacheState can be serialized to the stream in either binary or text format.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityCacheState.Restore(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Static (Shared in Visual Basic) method which creates and loads an EntityCacheState from the stream specified.
            </summary>
            <param name="stream">Stream to be read</param>
            <param name="closeOnExit">Whether or not to close the stream when done.</param>
            <param name="useBinaryFormat">True to restore a file in binary format, false to restore a file in text format.</param>
            <returns>An EntityCacheState</returns>
            <remarks>
            Use <b>Restore</b> to deserialize an EntityCacheState which was previously saved to a stream or file.
            <para>
            Note that this method does not merge the EntityCacheState into an <see cref="T:IdeaBlade.EntityModel.EntityManager"/>.  Call 
            <see cref="M:IdeaBlade.EntityModel.EntityCacheState.Merge(IdeaBlade.EntityModel.EntityManager,IdeaBlade.EntityModel.RestoreStrategy)"/> or <see cref="M:CacheStateManager.RestoreCacheState(EntityCacheState)"/> for this.
            Instead of performing the <b>Restore</b> and merge/restore as separate steps, you can instead
            use <see cref="M:CacheStateManager.RestoreCacheState(Stream, RestoreStrategy, bool)"/>
            to accomplish the same thing.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityCacheState.Merge(IdeaBlade.EntityModel.EntityManager,IdeaBlade.EntityModel.RestoreStrategy)">
            <summary>
            Merges this EntityCacheState into an EntityManager.
            </summary>
            <param name="entityManager">EntityManager to merge data into</param>
            <param name="strategy">The restore strategy to use</param>
            <returns>An collection of original entityKeys and the EntityAspects that they were merged into</returns>
            <remarks>
            <b>Merge</b> is functionally equivalent to the
            <see cref="M:CacheStateManager.RestoreCacheState(EntityCacheState, RestoreStrategy)"/>
            method in <see cref="T:IdeaBlade.EntityModel.CacheStateManager"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityCacheState.FixupTempIds(IdeaBlade.EntityModel.EntityManager,System.Collections.Generic.IEnumerable{System.Linq.IGrouping{System.Type,IdeaBlade.EntityModel.EntityAspect}})">
            <summary>
            Fixup temp ids among entityAspectsGroupedByType.  We assign new temporary ids (using the
            idgenerator from the target). Returns a map of newKeys -> oldKeys
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityCacheState.GetTempIdFixupMap(IdeaBlade.EntityModel.EntityManager)">
            <summary>
            Build a UniqueIdMap of "fixed up" temp ids.  The fixedup IDs are really just 
            a fresh set of tempids from the target EM.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityCacheState.DefaultSaveOptions">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityCacheState.DefaultQueryStrategy">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityCacheState.DataSourceResolver">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityCacheState.SerializationCompletedHandle">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntitySpan">
            <summary>
            A chained collection of <see cref="T:IdeaBlade.EntityModel.EntityRelationLink"/>s used by <see cref="M:IdeaBlade.EntityModel.EntityManager.FindEntityGraph(System.Collections.IEnumerable,System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.EntitySpan},IdeaBlade.EntityModel.EntityState)"/>.
            </summary>
            <remarks>
            A single <b>EntitySpan</b> represents the relations among a graph of entities.  You must
            be able to "walk" the spans without jumping or backtracking.  For example, a single <b>EntitySpan</b>
            might be defined for Customer -&gt; Order -&gt; OrderDetails, because relationships are
            defined between each of these entities and navigation is straightforward.  You cannot, however
            define a single span for Customer -&gt; Order -&gt; OrderDetails -&gt; Employee, because navigation from 
            OrderDetails to Employee is not defined.  In this case two spans would be required, one
            for Customer -&gt; Order -&gt; OrderDetails, and another for Customer -&gt; Order -&gt; Employee.
            <para>
            The <b>EntitySpan</b> is used in retrieving an entity graph with <see cref="M:IdeaBlade.EntityModel.EntityManager.FindEntityGraph(System.Collections.IEnumerable,System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.EntitySpan},IdeaBlade.EntityModel.EntityState)"/>
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntitySpan.#ctor(System.Type,IdeaBlade.EntityModel.EntityRelation[])">
            <summary>
            Initializes a new instance of the EntitySpan class.
            </summary>
            <param name="fromType">Root Entity type</param>
            <param name="entityRelations">One or more entity relations</param>
            <remarks>
            A single <b>EntitySpan</b> represents the relations among a graph of entities.  You must
            be able to "walk" the spans without jumping or backtracking.  
            <para>
            The <b>EntitySpan</b> is used in retrieving an entity graph with <see cref="M:IdeaBlade.EntityModel.EntityManager.FindEntityGraph(System.Collections.IEnumerable,System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.EntitySpan},IdeaBlade.EntityModel.EntityState)"/>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if the relationships are ambiguous or do not connect</exception>
            <example>
        <code lang="C#">
          
    public void FindEntityGraph() {

      DomainModelEntityManager mgr = new DomainModelEntityManager();
      
      // Preload some data into cache for this example.
      var emp = mgr.Employees.Where(e =&gt; e.Id == 1).Include("OrderSummaries.OrderDetails.Product").ToList().First();

      // Get a product for this example.
      Product p = mgr.FindEntities&lt;Product&gt;(EntityState.Unchanged).First();


      // Now retrieve an object graph for the selected product.
      var roots = new List&lt;Entity&gt; { p };

      // Add spans - we want any order details using this product, their orders, and the employees.
      // Note you must be able to "walk" all relations in the single EntitySpan, if you can't then
      // you should use additional EntitySpans.
      EntitySpan span1 = new EntitySpan(typeof(Product), 
        EntityRelations.FK_Order_Details_Products, 
        EntityRelations.FK_Order_Details_Orders, 
        EntityRelations.FK_OrderSummary_Employee);

      var spans = new List&lt;EntitySpan&gt; { span1 };

      // Get the entity graph
      var entityGraph = mgr.FindEntityGraph(roots, spans, EntityState.Unchanged);

    }
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntitySpan.#ctor(IdeaBlade.EntityModel.EntityRelationLink[])">
            <summary>
            Initializes a new instance of the EntitySpan class.
            </summary>
            <param name="entityRelationLinks">One or more entity relation links</param>
            <remarks>
            A single <b>EntitySpan</b> represents the relations among a graph of entities.  You must
            be able to "walk" the spans without jumping or backtracking.  
            <para>
            The <b>EntitySpan</b> is used in retrieving an entity graph with <see cref="M:IdeaBlade.EntityModel.EntityManager.FindEntityGraph(System.Collections.IEnumerable,System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.EntitySpan},IdeaBlade.EntityModel.EntityState)"/>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if the relationships do not connect</exception>
            <example>
        <code lang="C#">
    public void FindEntityGraph() {

      DomainModelEntityManager mgr = new DomainModelEntityManager();
      
      // Preload some data into cache for this example.
      var emp = mgr.Employees.Where(e =&gt; e.Id == 1).Include("OrderSummaries.OrderDetails.Product").ToList().First();

      // Get an order for this example.
      OrderSummary anOrder = mgr.FindEntities&lt;OrderSummary&gt;(EntityState.Unchanged).First();


      // Now retrieve an object graph for the selected order.
      var roots = new List&lt;Entity&gt; { anOrder };

      // Add spans - we want a) employee for the order, and b) order details and their products.
      // This requires 2 spans.
      EntitySpan span1 = new EntitySpan(EntityRelations.FK_OrderSummary_Employee.ToRole1Link);
      EntitySpan span2 = new EntitySpan(EntityRelations.FK_Order_Details_Orders.ToRole2Link,
        EntityRelations.FK_Order_Details_Products.ToRole1Link);
      var spans = new List&lt;EntitySpan&gt; { span1, span2 };

      // Get entity graph.
      var entityGraph = mgr.FindEntityGraph(roots, spans, EntityState.Unchanged);
    }
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntitySpan.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntitySpan.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntitySpan.EntityRelationLinks">
            <summary>
            Gets the entity relation links defined for the span.
            </summary>
            <value>The entity relation links.</value>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntitySpan.FromType">
            <summary>
            Gets the <see cref="T:IdeaBlade.EntityModel.IEntity"/> type that is navigated <b>from</b> using this EntitySpan.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntitySpan.ToType">
            <summary>
            Gets the <see cref="T:IdeaBlade.EntityModel.IEntity"/> type that is navigated <b>to</b> using this EntitySpan.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityGroup">
            <summary>
            Abstract base class for the <see cref="T:IdeaBlade.EntityModel.EntityGroup`1"/> class.
            </summary>
            <remarks>
            An <b>EntityGroup</b> is used within the framework to hold entities of 
            a specific type.  With the exception of some events provided by the
            <b>EntityGroup</b>, you will rarely need to work with this class directly.
            <para>
            The <b>EntityGroup</b> provides several pre- and post- change events at both
            the property and entity levels.  You can subscribe to <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityPropertyChanging"/>
            and <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityPropertyChanged"/> to handle property-level changes to your
            entities.  You can subscribe to <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanging"/> and <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanged"/>
            to listen for any change to your entities.
            </para>
            <para>
            You can obtain an EntityGroup instance from an <see cref="P:IdeaBlade.EntityModel.EntityGroup.EntityManager"/>
            using <see cref="M:IdeaBlade.EntityModel.EntityManager.GetEntityGroup(Type)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityGroup.#ctor(System.Type)">
            <summary>
            For internal use only.
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityGroup.#ctor(IdeaBlade.EntityModel.EntityGroup)">
            <summary>
            For internal use only.
            </summary>
            <param name="entityGroup"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityGroup.Create(System.Type)">
            <summary>
            Creates an instance of an EntityGroup for a specific entity type.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityGroup.GetEntityGroupType(System.Type)">
            <summary>
            Returns the EntityGroup subtype corresponding to any Entity subtype.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityGroup.GetChanges(IdeaBlade.EntityModel.EntityState)">
            <summary>
            Returns all of the entities within this group with the specified state or states.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityGroup.AcceptChanges">
            <summary>
            Calls <see cref="M:IdeaBlade.EntityModel.EntityAspect.AcceptChanges"/> on all entities in this group.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityGroup.RejectChanges">
            <summary>
            Calls <see cref="M:IdeaBlade.EntityModel.EntityAspect.RejectChanges"/> on all entities in this group.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityGroup.HasChanges">
            <summary>
            Determines whether any entity in this group has pending changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityGroup.Clone">
            <summary>
            See <see cref="M:System.ICloneable.Clone"/> - performs a copy of entities in the EntityGroup.
            </summary>
            <returns></returns>
            <remarks>
            Makes a copy of this EntityGroup that contains copies of each entity in the group. 
            Each entity is "cloned" (see <see cref="M:IdeaBlade.EntityModel.EntityAspect.CloneCore"/>).
            Only the entities in the group are copied; entities related to the copied entities are not copied.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityGroup.CloneStructure">
            <summary>
            Clones the structure of this EntityGroup.
            </summary>
            <returns></returns>
            <remarks>
            Entities within the group are not copied.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityGroup.GetEntityGroupName(System.Type)">
            <summary>
            Returns the EntityGroup name corresponding to any <see cref="T:IdeaBlade.EntityModel.IEntity"/> subtype.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityGroup.OnEntityChanged(IdeaBlade.EntityModel.EntityChangedEventArgs)">
            <summary>
            Raises the <see cref="E:IdeaBlade.EntityModel.EntityGroup.EntityChanged"/> event if <see cref="P:IdeaBlade.EntityModel.EntityGroup.ChangeNotificationEnabled"/> is set.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityGroup.IsCurrent(IdeaBlade.EntityModel.EntityAspect,IdeaBlade.EntityModel.EntityAspect)">
            <summary>
            For internal use only.
            </summary>
            <param name="targetAspect"></param>
            <param name="sourceAspect"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityGroup.CreateEntityMetadata">
            <summary>
            Returns the <see cref="P:IdeaBlade.EntityModel.EntityGroup.EntityMetadata"/> for this Entity type. Should
            only be called by the Create factory method on EntityMetadata
            </summary>
            <returns></returns>
            <remarks>Overridden by final subtypes.</remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.IsNullGroup">
            <summary>
            Whether or not this is the 'null group.  The 'null' group contains no entities and is automatically provided to detached entities.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityGroup.EntityPropertyChanging">
            <summary>
            Fired whenever a property value on an entity is changing.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityGroup.EntityPropertyChanged">
            <summary>
            Fired whenever a property value on an entity has changed.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityGroup.EntityChanging">
            <summary>
            Fired whenever an entity's state is changing in any significant manner.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.EntityGroup.EntityChanged">
            <summary>
            Fired whenever an entity's state has changed in any significant manner.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.EntityType">
            <summary>
            The type of Entity contained within this group.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.QueryableType">
            <summary>
            The type being queried. (same as EntityType for an EntityGroup)
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.Name">
            <summary>
            The name of this group.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.EntityManager">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.EntityManager"/> which manages this EntityGroup.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.DataSourceKeyName">
            <summary>
            Returns the name of the <b>edmKey</b> or <b>wsKey</b> defined in the IdeaBlade configuration file
            for entities in this group.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.DefaultEntitySetName">
             <summary>
             The default name of the entity set to use when creating new entities when a name is not provided.
             </summary>
             <remarks>
             See Microsoft Entity Framework documentation for information on the EntitySet class.  The default
             name is auto-generated by the DevForce Object Mapping tool during code generation.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.Properties">
            <summary>
            The collection of EntityProperties for entities of the type held by this group.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.DataProperties">
            <summary>
            The collection of DataEntityProperties for entities of the type held by this group.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.NavigationProperties">
            <summary>
            The collection of NavigationEntityProperties for entities of the type held by this group.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.KeyProperties">
            <summary>
            The collection of 'Key' EntityProperties for entities of the type held by this group.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.ForeignKeyProperties">
            <summary>
            The collection of 'Foreign' EntityProperties for entities of the type held by this group.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.ConcurrencyProperties">
            <summary>
            The collection of 'Concurrency' EntityProperties for entities of the type held by this group.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.ComplexTypeProperties">
            <summary>
            The collection of 'ComplexType' EntityProperties for entities of the type held by this group.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.ChangeNotificationEnabled">
            <summary>
            Used to suppress change events during the modification of entities within this group.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.ChangeTrackingEnabled">
            <summary>
            Used to enable or disable change tracking.  Change tracking is required for both Saving entities as well as to support the IEditableObject interface.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.PropertyInterceptionEnabled">
            <summary>
            Used to enable or disable property interception for entities within this group;
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.VerificationEnabled">
            <summary>
            Enable or disable verification for entities in this group.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.SelfAndSubtypeGroups">
            <summary>
            Returns a list of groups for this entity type and all sub-types.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup.LocalEntityAspects">
            <summary>
            Returns a collection of entities of given entity type and sub-types.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityGroup`1">
            <summary>
            Base class for all entity containers holding cached entities.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <remarks>
            Classes derived from <b>EntityGroup{T}</b> are automatically created by the framework 
            to hold entities of each type.  The <see cref="T:IdeaBlade.EntityModel.EntityManager"/> 
            manages all EntityGroups in its cache. 
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityGroup`1.#ctor">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityGroup`1.#ctor(IdeaBlade.EntityModel.EntityGroup{`0})">
            <summary>
            For internal use only.
            </summary>
            <param name="entityGroup"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup`1.Entities">
            <summary>
            Returns a collection of entities of given entity type and sub-types.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityGroup`1.CurrentEntities">
            <summary>
            Returns the currently live (i.e not deleted or detached) entities for the given entity type and its subtypes.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.SharedEntityGroup`1">
            <summary>
            Internal use only.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityMetadata">
            <summary>
            Metadata regarding an <see cref="T:IdeaBlade.EntityModel.IEntity"/>, a <see cref="T:IdeaBlade.EntityModel.ComplexObject"/> or a
            <see cref="T:IdeaBlade.EntityModel.PocoEntityAspect">POCO</see> type.
            </summary>
            <remarks>
            DevForce creates an <b>EntityMetadata</b> object for every <see cref="T:IdeaBlade.EntityModel.IEntity"/> and <see cref="T:IdeaBlade.EntityModel.IComplexObject"/>
            in your domain model.  You can obtain the metadata for a type by using 
            <see cref="M:IdeaBlade.EntityModel.EntityMetadataStore.GetEntityMetadata(System.Type,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadata.IsEntityType(System.Type)">
            <summary>
            Returns true if the specified type is an entity type or has a <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute">KeyAttribute</see> defined.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadata.IsConcreteEntityType(System.Type)">
            <summary>
            Obsolete - see IsMappedEntityType
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadata.IsMappedEntityType(System.Type)">
            <summary>
            Returns whether the specified type is mapped to the backend database via EF.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadata.IsComplexType(System.Type)">
            <summary>
            Returns true if the type represents a ComplexObject.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadata.HasAnyConcreteEntityBaseTypes(System.Type)">
            <summary>
            Does this entity type have any base types that are concrete.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadata.GetDefaultValue(System.Type)">
            <summary>
            Returns the default value for a simple type.
            </summary>
            <param name="pType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadata.DevForceDefaultValueFunction(System.Type)">
            <summary>
            Returns the default value of a type: usually '0' or null for any data type.
            Note that this is subtly different from the TypeFns.GetDefaultValue method
            in that it returns Today for a default date time.
            </summary>
            <param name="pType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadata.#ctor(IdeaBlade.EntityModel.EntityMetadataContext)">
            <summary>
            Called by EntityMetadataBuilder during codefirst construction.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadata.#ctor(System.Type)">
            <summary>
            Called by CreateEntityMetadata on EntityGroup
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadata.Create(System.Type)">
            <summary>
            No longer used. - remove after 9/1/2011
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadata.GetClientQueryPermissions(System.Security.Principal.IPrincipal)">
            <summary>
            Returns client query permissions for this type for this principal or null if no permissions specified.
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadata.AuthorizeQuery(System.Security.Principal.IPrincipal,System.Boolean)">
            <summary>
            Called by the IdeaBlade.EntityModel.Server.EntityServerQueryInterceptor
            to authorize the query.
            </summary>
            <param name="principal"></param>
            <param name="defaultValue">The default authorization value if no authorization attributes are found for the entity</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadata.AuthorizeSave(System.Security.Principal.IPrincipal,System.Boolean)">
            <summary>
            Called by the IdeaBlade.EntityModel.Server.EntityServerSaveInterceptor
            to authorize the save operation.
            </summary>
            <param name="principal"></param>
            <param name="defaultValue">The default authorization value if no authorization attributes are found for the entity</param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadata.CreateEntity">
            <summary>
            Creates a new entity of the type describe by this metadata item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadata.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadata.GetDataSourceKeyName(System.Type)">
            <summary>
            DataSourceKey comes from attribute on Entity subtype
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadata.GetDefaultEntitySetNameFromAttr(System.Type)">
            <summary>
            Returns any DefaultEntitySetName from any <see cref="T:IdeaBlade.EntityModel.DefaultEntitySetNameAttribute"/> on the Entity subtype.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadata.DefaultValueFunction">
            <summary>
            Use to override how DevForce sets the default value for a data entity property.
            </summary>
            <remarks>
            Use the <b>DefaultValueFunction</b> to override how DevForce determines the default value for a <see cref="T:IdeaBlade.EntityModel.DataEntityProperty"/>.  If you do not specify an override, the value returned
            by <see cref="M:IdeaBlade.EntityModel.EntityMetadata.DevForceDefaultValueFunction(System.Type)"/> is used.  Note that the override is not on an Entity basis - the override will apply to all Entity types.  For example,
            you may want to override the default DateTime value with your own code - this override would apply to DateTime data entity properties in all Entity types.
            <para>
            You must set your override for the DefaultValueFunction as early as possible in your processing.  The DataEntityProperties
            of your entities are static fields of these entities, and will be initialized as the entity types are referenced.
            </para>
            </remarks>
            <example>
        <code lang="C#">
// To override the default value used for some property types.
// Here, DateTime properties default to Today with an Unspecified Kind, and
// longs to -1; all other types will use the DevForce-provided default value.

EntityMetadata.DefaultValueFunction = (t) =&gt; {
  if (t == typeof(DateTime)) { return DateTime.SpecifyKind(DateTime.Today, DateTimeKind.Unspecified); }
  if (t == typeof(long)) { return -1L; }
  return EntityMetadata.DevForceDefaultValueFunction(t);
};
        </code>
      </example>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadata.IsCodeFirst">
            <summary>
            Whether this metadata was created via CodeFirst.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadata.EntityType">
            <summary>
            Gets the Type of the entity.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadata.IsComplexObjectType">
            <summary>
            Returns whether this metadata describes a <see cref="T:IdeaBlade.EntityModel.IComplexObject"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadata.DataSourceKeyName">
            <summary>
            Gets the data source key name.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadata.HasStoreGeneratedId">
            <summary>
            Returns whether this entity type has a store generated id.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadata.DefaultEntitySetName">
            <summary>
            The default EntitySetName for entities of this type.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadata.DefaultEntityContainerName">
            <summary>
            The default EntityContainerName for entities of this type. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadata.EntityProperties">
            <summary>
            Returns a collection of EntityProperties that belong to entities of this type.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadata.DataProperties">
            <summary>
            Returns a collection of DataEntityProperties for entities of this type in Ordinal order.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadata.NavigationProperties">
            <summary>
            Returns a collection of NavigationEntityProperties for entities of this type.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadata.ListNavigationProperties">
            <summary>
            Returns a collection of ListNavigationEntityProperties for entities of this type.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadata.ScalarNavigationProperties">
            <summary>
            Returns a collection of ListNavigationEntityProperties for entities of this type.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadata.KeyProperties">
            <summary>
            Returns a collection of EntityProperties that are keys for entities of this type.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadata.ForeignKeyProperties">
            <summary>
            Returns a collection of ForegnKey EntityProperties 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadata.ConcurrencyProperties">
            <summary>
            Returns a collection of EntityProperties that are concurrency properties for entities of this type.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadata.ComplexTypeProperties">
            <summary>
            Returns a collection of EntityProperties that describe complex object properties for entities of this type.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadata.CanQueryByEntityKey">
            <summary>
            Gets whether primary key queries are allowed.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityMetadata.NullEntityGroup">
            <summary>
            Gets a Null EntityGroup.
            </summary>
            <remarks>
            The EntityGroup returned can be modified to change the behavior of detached entities. 
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityMetadataSurrogate">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityMetadataSurrogate.#ctor(IdeaBlade.EntityModel.EntityMetadata)">
            <summary>
            
            </summary>
            <param name="entityMetadata"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityEnum">
            <summary>
            Marker interface for "enum class" type Entities.  Internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.ILoginCredential">
            <summary>
            Provides a credential interface for password-based authentication schemes.
            <seealso cref="T:IdeaBlade.EntityModel.LoginCredential"/>
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.Login(IdeaBlade.EntityModel.ILoginCredential)"/>
            </summary>
            <remarks><see cref="T:IdeaBlade.EntityModel.LoginCredential"/> is the base implementation of this interface.</remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.ILoginCredential.UserName">
            <summary>
            Gets or sets the user name associated with the credentials.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ILoginCredential.Password">
            <summary>
            Gets or sets the password associated with the credentials.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.ILoginCredential.Domain">
            <summary>
            Gets or sets the domain associated with the credentials.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityLoginManager">
            <summary>
            Interface for server-side user authentication.
            <seealso cref="M:IdeaBlade.EntityModel.EntityManager.Login(IdeaBlade.EntityModel.ILoginCredential)"/>
            <seealso cref="T:IdeaBlade.EntityModel.LoginCredential"/>
            </summary>
            <remarks>Implement the <b>IEntityLoginManager</b> interface in order to use 
            <see cref="M:IdeaBlade.EntityModel.EntityManager.Login(IdeaBlade.EntityModel.ILoginCredential)">EntityManager.Login</see> to
            validate user credentials and supply user identity and role information.
            <para>
            If <b>IEntityLoginManager</b> has been implemented, a <see cref="M:IdeaBlade.EntityModel.EntityManager.Login(IdeaBlade.EntityModel.ILoginCredential)">Login</see>
            call must be made to validate the user before any other EntityManager actions may be performed.
            You may use the <see cref="P:IdeaBlade.Core.IdeaBladeConfig.LoginManagerRequired">LoginManagerRequired</see> setting in the IdeaBlade Configuration
            file to ensure that an exception is raised if an <b>IEntityLoginManager</b> is not found.
            </para>
            <para>
            If your application supports guest access, by setting the <see cref="P:IdeaBlade.Core.IdeaBladeConfig.AllowAnonymousLogin">AllowAnonymousLogin</see> flag
            to true, then null credentials may be passed from the client.  In this case, be sure that your custom implementation supports this.
            </para>
            </remarks>
            <example><code lang="C#">
// Sample showing Login, and implementation of IEntityLoginManager

// Create an EntityManager - this will also do an implicit Connect().
EntityManager mgr = new DomainModelEntityManager();

// create a LoginCredential
string userName = "demo";
string password = "demo";
string domain = "Earth";
LoginCredential credential = new LoginCredential(userName, password, domain);

MessageBox.Show("Current user: " + System.Threading.Thread.CurrentPrincipal.Identity.Name);

try {
   // "Login" to EntityServer 
   mgr.Login(credential);

   // note change in current principal
   MessageBox.Show("Current user: " + System.Threading.Thread.CurrentPrincipal.Identity.Name);
} catch (LoginException le) {
   MessageBox.Show(le.Message);
} catch (EntityServerException ese) {
   MessageBox.Show("Login failed: " + ese.Message);
} catch (Exception ex) {
   MessageBox.Show(ex.Message);
}

//..... Retrieve data, etc.

// Now logout
mgr.Logout();


// Sample LoginManager class
public class LoginManager : IEntityLoginManager {
   public LoginManager() {}

   public IPrincipal Login(ILoginCredential pCredential, EntityManager pManager) {
      // note that Login runs on server-side -- this will return false
      bool isClient = pManager.IsClient;

      // You would normally validate the credentials, eg against a database, AD, etc, and then
      // build and return an object implementing IPrincipal.
      if (pCredential.Domain != "Earth") {
        throw new LoginException(LoginExceptionType.InvalidUserName, pCredential.Domain, pCredential.UserName);
      }

      // We'll just return a GenericPrincipal
      GenericIdentity identity  = new GenericIdentity(pCredential.UserName);
      return new GenericPrincipal(identity, new String[] { "user" });
   }
   
   public void Logout(IPrincipal principal, EntityManager entityManager) {
      // Use if logout processing is needed - eg, release resources, audit user logout
   }
}
</code></example><example><code lang="VB">
' Sample showing Login, and implementation of IEntityLoginManager

' Create an EntityManager - this will also do an implicit Connect().
Dim mgr As EntityManager = new DomainModelEntityManager();

' create a LoginCredential
Dim userName As String = "demo"
Dim password As String = "demo"
Dim domain As String = "Earth"
Dim credential As New LoginCredential(userName, password, domain)

MessageBox.Show(("Current user: " + System.Threading.Thread.CurrentPrincipal.Identity.Name))

Try
   ' "Login" to EntityServer 
   mgr.Login(credential)
   
   ' note change in current principal
   MessageBox.Show(("Current user: " + System.Threading.Thread.CurrentPrincipal.Identity.Name))
Catch le As LoginException
   MessageBox.Show(le.Message)
Catch pse As EntityServerException
   MessageBox.Show("Login failed: " + pse.Message)
Catch ex As Exception 
   MessageBox.Show(ex.Message)
End Try

'..... Retrieve data, etc.

' Now logout
mgr.Logout()

Public Class LoginManager : Implements IEntityLoginManager 

    Public Sub New()
    End Sub 

    Public Function Login(ByVal pCredential As ILoginCredential, ByVal pManager As EntityManager) As IPrincipal _
    Implements IEntityLoginManager.Login
        ' note that Login runs on server-side -- this will return false
        Dim isClient As Boolean = pManager.IsClient

        ' You would normally validate the credentials, eg against a database, and then
        ' build and return an object implementing IPrincipal.
        If pCredential.Domain &lt;&gt; "Earth" Then
            Throw New LoginException(LoginExceptionType.InvalidUserName, pCredential.Domain, pCredential.UserName)
        End If

        ' We'll just return a GenericPrincipal
        Dim identity As New GenericIdentity(pCredential.UserName)
        Return New GenericPrincipal(identity, New [String]() {"user"})
    End Function 
    
    Public Sub Logout(ByVal principal As IPrincipal, ByVal entityManager As EntityManager) 
      '' Use if logout processing is needed - eg, release resources, audit user logout
    End Sub

End Class 
	</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityLoginManager.Login(IdeaBlade.EntityModel.ILoginCredential,IdeaBlade.EntityModel.EntityManager)">
            <summary>
            Validate user credentials and return an IPrinicipal.
            </summary>
            <param name="credential">Credentials to validate</param>
            <param name="entityManager">A server-side EntityManager</param>
            <remarks>
            <para>The <see cref="T:System.Security.Principal.IPrincipal"/> returned here is wrapped into a <see cref="T:IdeaBlade.EntityModel.SessionBundle"/>
            before returning to the client-side code which called <see cref="M:IdeaBlade.EntityModel.EntityManager.Login(IdeaBlade.EntityModel.ILoginCredential)">EntityManager.Login</see>.
            The <see cref="T:IdeaBlade.EntityModel.EntityManager"/> uses the SessionBundle in all further communications with the Entity Server.
            The <b>IPrincipal</b> returned is also used to set the <see cref="P:System.Threading.Thread.CurrentPrincipal"/>
            on the client and on the Entity Server during query and save processing.
            </para>
            <para>
            <see cref="T:System.Security.Principal.GenericPrincipal"/> and <see cref="T:System.Security.Principal.WindowsPrincipal"/>
            are two standard implementations of the <b>IPrincipal</b> interface, but you may also use custom implementations.
            The <b>UserBase</b> type is also provided for Silverlight and ASP.NET applications.
            </para>
            <para>The <paramref name="entityManager"/> passed to this method is a special server-side EntityManager which is
            "connected" to the EntityServer and which does not require login credentials.  You can use this EntityManager to query
            your domain model; if necessary, you can create a domain-specific EntityManager from this EntityManager using
            the <see cref="M:IdeaBlade.EntityModel.EntityManager.#ctor(IdeaBlade.EntityModel.EntityManager)"/>
            constructor overload of your domain manager.
            </para>
            <para>Implementors should throw a <see cref="T:IdeaBlade.EntityModel.LoginException"/> if the credentials passed fail validation.</para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.IEntityLoginManager.Logout(System.Security.Principal.IPrincipal,IdeaBlade.EntityModel.EntityManager)">
            <summary>
            Called when a user logs out.
            </summary>
            <param name="principal">IPrincipal identifying the user</param>
            <param name="entityManager">A server-side EntityManager</param>
            <remarks>
            Use <b>Logout</b> to perform any processing you require when a user logs out, such
            as resource cleanup or auditing.
            Note that you must implement this interface method even if you have no special logout
            processing.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.IEntityService">
            <summary>
            Interface implemented by the Entity Service.  For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.LoginCredential">
            <summary>
            A credential for password-based authentication schemes.
            <seealso cref="T:IdeaBlade.EntityModel.EntityManager"/> 
            <seealso cref="T:IdeaBlade.EntityModel.Server.EntityServer"/>
            <seealso cref="T:IdeaBlade.EntityModel.IEntityLoginManager"/>
            </summary>
            <remarks>An <b>ILoginCredential</b> is passed to the <see cref="M:IdeaBlade.EntityModel.EntityManager.Login(IdeaBlade.EntityModel.ILoginCredential)">Login</see>
            method to validate a user.
            <para>
            In Silverlight and ASP.NET applications, the <b>FormsAuthenticationLoginCredential</b> can
            be used to control persistence of the authentication ticket.
            </para>
            <para>
            Create a custom <see cref="T:IdeaBlade.EntityModel.ILoginCredential"/> if you have specific requirements
            for the credentials provided to your <see cref="T:IdeaBlade.EntityModel.IEntityLoginManager"/>.
            </para>
            <para>
            Note that the credential is passed in clear text to the Entity Server.  You should
            secure Entity Server communications using message or transport security.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.LoginCredential.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a LoginCredential from user name, password and domain information.
            </summary>
            <param name="userName">User name</param>
            <param name="password">Password</param>
            <param name="domain">Domain</param>
            <remarks>
            Your implementation of <see cref="T:IdeaBlade.EntityModel.IEntityLoginManager"/> will determine the
            credential data to be supplied, and whether any field is optional.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.LoginCredential.UserName">
            <summary>
            Gets or sets the user name associated with the credentials.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.LoginCredential.Password">
            <summary>
            Gets or sets the password associated with the credentials.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.LoginCredential.Domain">
            <summary>
            Gets or sets the domain associated with the credentials.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.LoginExceptionType">
            <summary>
            Enumeration of standard <see cref="M:IdeaBlade.EntityModel.EntityManager.Login(IdeaBlade.EntityModel.ILoginCredential)">Login</see> failures.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.LoginExceptionType.None">
            <summary>
            Not a standard login exception.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.LoginExceptionType.InvalidUserName">
            <summary>
            Invalid User Name
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.LoginExceptionType.InvalidPassword">
            <summary>
            Invalid Password
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.LoginExceptionType.InvalidPasswordLength">
            <summary>
            Invalid Password Length
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.LoginExceptionType.DuplicateUser">
            <summary>
            Duplicate User
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.LoginExceptionType.NoCredentials">
            <summary>
            No credentials were presented
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.LoginExceptionType.NoLoginManager">
            <summary>
            No LoginManager found
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.LoginExceptionType.Other">
            <summary>
            User defined
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.LoginException">
            <summary>
            Exception that should be thrown within the implementation of an <see cref="T:IdeaBlade.EntityModel.IEntityLoginManager"/> whenever a login attempt fails.
            </summary>
            <remarks>
            The <see cref="P:IdeaBlade.EntityModel.LoginException.ExceptionType"/> indicates the cause of the login failure.
            <para>
            If you subclass the <b>LoginException</b> and you have an n-tier application, your type 
            should have a constructor accepting the message string.  If your type has custom properties
            they will also be sent from the server as part of the <see cref="P:System.Exception.Data">Data</see> property; you should include a 
            constructor accepting the message string and a Dictionary&lt;string, object&gt; in order
            to reconstruct your custom LoginException successfully for the client.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.LoginException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.LoginException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo with information about the exception.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.LoginException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the LoginException class.
            </summary>
            <param name="message"></param>
            <remarks>
            The <see cref="P:IdeaBlade.EntityModel.LoginException.ExceptionType"/> defaults to <see cref="F:IdeaBlade.EntityModel.LoginExceptionType.Other"/> when
            this constructor is used.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.LoginException.#ctor(IdeaBlade.EntityModel.LoginExceptionType,System.String)">
            <summary>
            Initializes a new instance of the LoginException class.
            </summary>
            <param name="exceptionType"></param>
            <param name="message"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.LoginException.#ctor(IdeaBlade.EntityModel.LoginExceptionType,System.String,System.String)">
            <summary>
            Initializes a new instance of the LoginException class.
            </summary>
            <param name="exceptionType">Type of login exception.</param>
            <param name="domain">Domain (aka, Namespace), typically from the login credential.</param>
            <param name="userName">Username, typically from the login credential.</param>
            <remarks>The parameters are used to determine the exception message and its type.</remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.LoginException.#ctor(IdeaBlade.EntityModel.LoginExceptionType,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the LoginException class.
            </summary>
            <param name="exceptionType">Type of login exception.</param>
            <param name="domain">Domain (aka, Namespace), typically from the login credential.</param>
            <param name="userName">Username, typically from the login credential.</param>
            <param name="minPasswordLength">The minimum password length that this attempt perhaps failed to satisfy.</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.LoginException.GetMessage(IdeaBlade.EntityModel.LoginExceptionType,System.String,System.String,System.Int32)">
            <summary>
            Retrieve the formatted error message.
            </summary>
            <param name="exceptionType"></param>
            <param name="domain"></param>
            <param name="userName"></param>
            <param name="minPasswordLength"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.LoginException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.LoginException.ExceptionType">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.LoginExceptionType"/> of this exception.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.NamespaceDoc">
            <summary>
              Contains the classes and interfaces that provide object relational mapping
              functionality, as well as the mechanisms to distribute and synchronize
              business objects between application server and client tiers.
              Essential classes in this namespace are <see cref="T:IdeaBlade.EntityModel.EntityManager"/>, 
              <see cref="T:IdeaBlade.EntityModel.EntityQuery"/>, and <see cref="T:IdeaBlade.EntityModel.IEntity"/>.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.NullIdGenerator">
             <summary>
             The default, "null" implementation of the IIdGenerator interface.  Internal use only.
             </summary>
            <remarks>
             Used internally
             when an application has not implemented the <see cref="T:IdeaBlade.EntityModel.IIdGenerator"/> interface.
             This class supports the DevForce Framework infrastructure and is not intended 
             to be used directly from your code.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.NullIdGenerator.#ctor">
            <summary>
            Initializes a new instance of the NullIdGenerator class.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.NullIdGenerator.IsApplicable(IdeaBlade.EntityModel.IDataSourceKey)">
            <summary>
            See <see cref="M:IdeaBlade.EntityModel.IIdGenerator.IsApplicable(IdeaBlade.EntityModel.IDataSourceKey)"/>.
            </summary>
            <param name="pDsKey"></param>
            <returns>Always returns false</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.NullIdGenerator.GetNextTempId(IdeaBlade.EntityModel.DataEntityProperty)">
            <summary>
            See <see cref="M:IdeaBlade.EntityModel.IIdGenerator.GetNextTempId(IdeaBlade.EntityModel.DataEntityProperty)"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.NullIdGenerator.IsTempId(IdeaBlade.EntityModel.UniqueId)">
            <summary>
            See <see cref="M:IdeaBlade.EntityModel.IIdGenerator.IsTempId(IdeaBlade.EntityModel.UniqueId)"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.NullIdGenerator.Reset">
            <summary>
            See <see cref="M:IdeaBlade.EntityModel.IIdGenerator.Reset"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.NullIdGenerator.GetRealIdMap(IdeaBlade.EntityModel.UniqueIdCollection,IdeaBlade.EntityModel.IDataSourceKey)">
            <summary>
            See <see cref="M:IdeaBlade.EntityModel.IIdGenerator.GetRealIdMap(IdeaBlade.EntityModel.UniqueIdCollection,IdeaBlade.EntityModel.IDataSourceKey)"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.NullIdGenerator.TempIds">
            <summary>
            See <see cref="P:IdeaBlade.EntityModel.IIdGenerator.TempIds"/>.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityManagerCreatedEventArgs">
            <summary>
            Arguments to the <see cref="E:IdeaBlade.EntityModel.EntityManager.EntityManagerCreated"/> event.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManagerCreatedEventArgs.#ctor(IdeaBlade.EntityModel.EntityManager)">
            <summary>
            Initialize a new instance of this class.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManagerCreatedEventArgs.EntityManager">
            <summary>
            The EntityManager involved in this event.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityManagerSaveException">
            <summary>
            Exception thrown for failures during <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges"/> processing.
            </summary>
            <remarks>
            The <see cref="T:IdeaBlade.EntityModel.SaveResult"/> will contain additional information about save processing.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManagerSaveException.#ctor">
            <summary>
            Initializes a new instance of the EntityManagerSaveException class.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManagerSaveException.#ctor(System.String)">
            <summary>
            For internal use only.
            </summary>
            <param name="pMessage"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManagerSaveException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="pMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManagerSaveException.#ctor(System.String,System.Exception,System.Collections.Generic.IList{System.Object})">
            <summary>
            Initializes a new instance of the EntityManagerSaveException class.
            </summary>
            <param name="pMessage">A message added to describe the exception</param>
            <param name="innerException">Wrapped Exception</param>
            <param name="entitiesWithErrors"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManagerSaveException.#ctor(System.String,IdeaBlade.EntityModel.PersistenceOperation,IdeaBlade.EntityModel.PersistenceFailure)">
            <summary>
            Initializes a new instance of the EntityManagerSaveException class.
            </summary>
            <param name="pMessage"></param>
            <param name="operationType"></param>
            <param name="failureType"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManagerSaveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the EntityManagerSaveException class.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityManagerSaveException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Internal use only.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityManagerSaveException.EntitiesWithErrors">
            <summary>
            A list of any <see cref="T:IdeaBlade.EntityModel.IEntity"/> objects that failed during the save process.   
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.PersistenceSecurityException">
            <summary>
            Exception indicating a security failure during a persistence operation.
            </summary>
            <remarks>
            Methods decorated with an <see cref="T:IdeaBlade.Core.DomainServices.AuthorizationAttribute">AuthorizationAttribute</see>
            will throw this exception if the user is not authorized to execute the method.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.PersistenceSecurityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PersistenceSecurityException class.
            </summary>
            <param name="message">A message added to describe the exception</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.PersistenceSecurityException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the PersistenceSecurityException class.
            </summary>
            <param name="message">A message added to describe the exception containing 0 or more format specifications. 
            See <see cref="M:System.String.Format(System.String,System.Object)"/></param>
            <param name="messageArgs">An Object array containing zero or more objects to be formatted.</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.PersistenceSecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityServerErrorEventArgs">
            <summary>
            Arguments to a <see cref="E:IdeaBlade.EntityModel.EntityManager.EntityServerError"/> event.  
            </summary>
            <remarks>
            The <see cref="P:IdeaBlade.EntityModel.EntityServerErrorEventArgs.Exception"/> contains the exception
            for which the event is raised.  Use the <see cref="P:IdeaBlade.EntityModel.EntityServerErrorEventArgs.Handled"/> property
            to indicate if the error has been handled: if set to <c>false</c> 
            the exception is re-thrown to the caller.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServerErrorEventArgs.#ctor(IdeaBlade.EntityModel.EntityServerException)">
            <summary>
            Initialize an instance of this class.  Internal use only.
            </summary>
            <param name="pException"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerErrorEventArgs.Exception">
            <summary>
            The exception for the error condition. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServerErrorEventArgs.Handled">
            <summary>
            Set to true if the exception has been handled, otherwise the exception will be thrown back to the caller.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.ConnectAction">
            <summary>
            Used to facilitate connect activities when using a remote server.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityService">
            <summary>
            Internal use only. 
            This class supports the DevForce Framework infrastructure 
            and is not intended to be used directly from your code.
            </summary>
            <remarks>
            A single instance of this class resides on the Business Object Server and receives and responds to 
            requests from the <see cref="T:IdeaBlade.EntityModel.EntityManager"/>s on each client.
            <para>
            The EntityService is configured using the <see cref="T:IdeaBlade.Core.IdeaBladeConfig.ObjectServer"/>
            information in the <b>IdeaBlade configuration file</b> or using an app.config (web.config in IIS) file.
            </para>
            </remarks>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityService.DefaultServerName">
            <summary>
            Default name of a EntityServer if a data source extension is not supplied.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityService.#ctor">
            <summary>
            Create an instance of this class.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityService.AddServer(System.Object,System.String,System.String)">
            <summary>
            Always track EntityServer instances - 2-tier or n-tier.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityService.GetEntityServer(System.String,System.String)">
            <summary>
            Return an instance of an EntityServer for the given data source extension.  This is used in 2-tier, and non-IIS n-tier.
            </summary>
            <param name="dataSourceExtension"></param>
            <param name="compositionContextName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityService.GetEntityServerName(System.String,System.String)">
            <summary>
            Return the name of the Entity Server.
            </summary>
            <param name="dataSourceExtension"></param>
            <param name="compositionContextName"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityService.Ping">
            <summary>
              Tests connection to this service.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityService.__lock">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityService.LocalInstance">
            <summary>
            Returns the singleton instance for this class.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityService.EntityServiceApplication">
            <summary>
            Returns the EntityServiceApplication instance.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityServiceApplication">
            <summary>
            Provides a means of handling application-level events on the Business Object Server.
            </summary>
            <remarks>
            To perform custom processing for application-level events, sub-class the <b>EntityServiceApplication</b>
            and override its methods.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServiceApplication.OnServiceStartup(System.Object,IdeaBlade.EntityModel.ServiceStartupEventArgs)">
            <summary>
            Called when the EntityService is started.
            </summary>
            <param name="sender">Always null</param>
            <param name="e"></param>
            <remarks>
            You can override this method in your subclass to perform custom startup logic.
            <para>The <see cref="T:IdeaBlade.Core.IdeaBladeConfig"/> provided in the <b>ServiceStartupEventArgs</b>
            may be modified as needed.  These modifications will be available for all following
            EntityServer processing.</para>
            <para>The EntityService starts upon the first client request.</para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityServiceApplication.OnServiceShutdown(System.Object,System.EventArgs)">
            <summary>
            Called when the EntityService is shutting down.
            </summary>
            <param name="sender">Always null</param>
            <param name="e">Always empty</param>
            <remarks>
            You can override this method in your subclass to perform custom shutdown logic.
            <para>Note that all TraceSubscribers (including the DebugLog) may have shutdown
            so any trace messages written here could be lost.</para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityServiceApplication.Instance">
            <summary>
            Returns the singleton instance of the EntityServiceApplication.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.ServiceStartupEventArgs">
            <summary>
            Arguments passed to the OnServiceStartup method in the <see cref="T:IdeaBlade.EntityModel.EntityServiceApplication"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.ServiceStartupEventArgs.#ctor(IdeaBlade.Core.IdeaBladeConfig)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="config"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.ServiceStartupEventArgs.IdeaBladeConfig">
            <summary>
            Gets the loaded IdeaBladeConfig instance.
            </summary>
            <remarks>
            The properties of the IdeaBladeConfig can be retrieved and set as needed.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityServiceOption">
            <summary>
            The EntityServiceOption is used to determine whether an <see cref="T:IdeaBlade.EntityModel.EntityManager"/> should 
            connect to a local or distributed Entity Service.
            </summary>
            <remarks>
            By default an <see cref="T:IdeaBlade.EntityModel.EntityManager"/> will always use the <see cref="P:IdeaBladeConfig.ObjectServer.IsDistributed"/>
            setting from the IdeaBlade Configuration file to determine whether to communicate with a local or distributed 
            Entity Service.  You can override this behavior by using an EntityManager constructor that takes an EntityServiceOption parameter. 
            <para>
            The <b>EntityServiceOption</b> setting can be useful if you need to use both local and distributed data sources 
            within the same application.  You can construct one <see cref="T:IdeaBlade.EntityModel.EntityManager"/> with the <b>UseLocalService</b> option, 
            and then construct a second <see cref="T:IdeaBlade.EntityModel.EntityManager"/> with the default setting. 
            </para>
            <para>
            If you use the <b>UseDistributedService</b> value, then you must ensure that the IdeaBlade Configuration file
            contains sufficient information to locate the Entity Service.
            </para>
            </remarks>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityServiceOption.UseDefaultService">
            <summary>
            Use the <see cref="P:IdeaBlade.Core.IdeaBladeConfig.ObjectServer.IsDistributed"/> setting from the IdeaBlade Configuration file.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityServiceOption.UseLocalService">
            <summary>
            Ignore the IdeaBlade Configuration file setting and always use a local service for the EntityManager.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.EntityServiceOption.UseDistributedService">
            <summary>
            Ignore the IdeaBlade Configuration file setting and always use a distributed service for the EntityManager.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.EntityKeyList">
            <summary>
            A strongly-typed collection of <see cref="T:IdeaBlade.EntityModel.EntityKey"/>s.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyList.#ctor(System.Type)">
            <summary>
            Create an instance of this class for an <see cref="T:IdeaBlade.EntityModel.IEntity"/> type.
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyList.#ctor(System.Type,System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.EntityKey})">
            <summary>
            Create an instance of this class from an array of <see cref="T:IdeaBlade.EntityModel.EntityKey"/>s.
            </summary>
            <param name="entityType"></param>
            <param name="keys"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyList.#ctor(IdeaBlade.EntityModel.EntityKeyList)">
            <summary>
            Copy constructor
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyList.ToQuery">
            <summary>
            Returns an <see cref="T:IdeaBlade.EntityModel.EntityQuery"/> to retrieve the items
            in this key list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyList.ToKeyQuery">
            <summary>
            Returns an <see cref="T:IdeaBlade.EntityModel.EntityKeyQuery"/> for this list of entity keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyList.FromEntity(System.Object)">
            <summary>
            Build a EntityKeyList from a single entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyList.FromEntities``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Construct an EntityKeyList from a collection of entities.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyList.InsertItem(System.Int32,IdeaBlade.EntityModel.EntityKey)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.EntityKeyList.SetItem(System.Int32,IdeaBlade.EntityModel.EntityKey)">
            <summary>
            Update an item at a selected index.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.EntityKeyList.EntityType">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.IEntity"/> type associated with this primary key.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.QueryCache">
            <summary>
            A list of queries that can be satisfied without having to go out to an external data source.
            </summary>
            <remarks>
            The <b>QueryCache</b> is managed by the <see cref="T:IdeaBlade.EntityModel.EntityManager"/> and is used within
            the framework to determine which queries can be executed against cache only.  Developers don't
            usually need to interact with the <b>QueryCache</b>, but you do have several means of controlling
            its contents.  Use <see cref="P:IdeaBlade.EntityModel.EntityManager.QueryCache"/> to access the cache.  You will
            not usually need to directly add and remove queries from the cache, since <b>EntityManager</b>
            will manage it based on queries executed and entities removed.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryCache.Contains(IdeaBlade.EntityModel.EntityKey)">
            <summary>
            Determines whether the query cache contains the specified EntityKey.
            </summary>
            <param name="entityKey">primary key</param>
            <returns>
            	<c>true</c> if contains the specified EntityKey; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryCache.Contains(IdeaBlade.EntityModel.IEntityQuery)">
            <summary>
            Determines whether the query cache contains the specified IEntityQuery
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryCache.ContainsRaw(System.Object)">
            <summary>
            Determines whether the query cache contains the object specified.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryCache.Add(System.Type)">
            <summary>
            Add the specified type to the QueryCache to indicate that all queries for this
            type may be found in cache.
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryCache.Add(IdeaBlade.EntityModel.EntityKey)">
            <summary>
            Adds the specified primary key to the QueryCache.
            </summary>
            <param name="entityKey">primary key</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryCache.Add(System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.EntityKey})">
            <summary>
            Adds the specified primamry key list to the QueryCache.
            </summary>
            <param name="keys">pk list</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryCache.Add(IdeaBlade.EntityModel.IEntityQuery)">
            <summary>
            Adds the specified entity query to the QueryCache.
            </summary>
            <param name="query">entity query</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryCache.AddRaw(System.Object)">
            <summary>
            Adds the specified object to the QueryCache.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryCache.Remove(System.Type)">
            <summary>
            Removes the specified entity type from the QueryCache.
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryCache.Remove(IdeaBlade.EntityModel.EntityKeyList)">
            <summary>
            Removes the specified primary key list from the QueryCache.
            </summary>
            <param name="ekList">pk list</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryCache.Remove(IdeaBlade.EntityModel.EntityKey)">
            <summary>
            Removes the specified primary key from the QueryCache.
            </summary>
            <param name="entityKey">primary key</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.QueryCache.Clear">
            <summary>
            Clears the query cache.   
            </summary>
            <remarks>This does not remove any Entities from the cache. It
            simply clears the record of which queries have already been performed. 
            <para>Clearing the query cache also results in subsequent queries
            retrieving data from the backend data source instead of cache, because the
            queries used for cached data are unknown. </para>
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.QueryCache.Keys">
            <summary>
            Returns all of the Keys in the query cache. This will be a mixed collection of 
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.FetchStrategy">
            <summary>
            An enum used when retrieving entities to determine where to look and in what order.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.FetchStrategy.CacheOnly">
            <summary>
            Retrieve entities from the cache only.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.FetchStrategy.DataSourceOnly">
            <summary>
            Retrieve entities from the back-end data source only.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.FetchStrategy.DataSourceThenCache">
            <summary>
            Retrieve entities from the backend data source, add them to the cache, and then retrieve entites that are in the cache.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.FetchStrategy.Optimized">
            <summary>
            If the query is invertible then retrieve entities from the cache, and if not in cache, the back-end data source.
            If not the retrieve the entities from the back end data source only
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.FetchStrategy.DataSourceAndCache">
            <summary>
            Retrieve entities from both the backend data source and the cache and merge the two result sets.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.RelatedEntityList`1">
            <summary>
            A live collection of entities tied to an EntityReference.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <remarks>
            A <b>RelatedEntityList</b> is returned by all navigation properties on entities
            which return a non-scalar value.  The collection is "live" in that any related entity
            additions, deletions or modifications are automatically reflected in the list.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.IInternalRelatedEntityList">
            <summary>
            Used to expose internal methods of RelatedEntityList{T} in a non-generic fashion
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.RelatedEntityList`1.#ctor">
            <summary>
            "This ctor is for internal use and is only called during Entity materialization and serialization."
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.RelatedEntityList`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            For internal use only. Used during anonymous projections.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.RelatedEntityList`1.#ctor(System.Collections.Generic.IEnumerable{`0},IdeaBlade.EntityModel.ListEntityReference{`0})">
            <summary>
            Creates a new RelatedEntityList ( not a wrapper)
            </summary>
            <param name="collection">List to be contained in the RelatedEntityList</param>
            <param name="listReference"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.RelatedEntityList`1.Reload(IdeaBlade.EntityModel.MergeStrategy)">
            <summary>
            Forces the RelatedEntityList to refresh itself.
            </summary>
            <param name="mergeStrategy">How results will be merged into cache</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.RelatedEntityList`1.IndexOf(`0)">
            <summary>
            See <see cref="M:System.Collections.Generic.IList`1.IndexOf(`0)"/>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.RelatedEntityList`1.Insert(System.Int32,`0)">
            <summary>
            See <see cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)"/>
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.RelatedEntityList`1.RemoveAt(System.Int32)">
            <summary>
            See <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"/>
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.RelatedEntityList`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.RelatedEntityList`1.Clear">
            <summary>
            See <see cref="M:System.Collections.IList.Clear"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.RelatedEntityList`1.Contains(`0)">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/>.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.RelatedEntityList`1.CopyTo(`0[],System.Int32)">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/>.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.RelatedEntityList`1.Remove(`0)">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/>.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.RelatedEntityList`1.GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="E:IdeaBlade.EntityModel.RelatedEntityList`1.PendingEntityListResolved">
            <summary>
            Event fired when an asynchronous navigation completes.
            </summary>
            <example>
      <code lang="C#">
        
    private Customer _aCustomer;

    public void GetCustOrdersAsync() {

      DomainModelEntityManager mgr = = new DomainModelEntityManager();

      // Turn on async navigation.  This is a readonly property in Silverlight.
      mgr.UseAsyncNavigation = true;

      // Assume we already have a Customer instance. 
      // Navigate to customer orders.  
      // If UseAsyncNavigation is true and the orders aren't already in cache
      // the IsPendingEntityList flag will be on.

      var orders = _aCustomer.OrderSummaries;
      Assert.IsTrue(orders.IsPendingEntityList);

      // Setup a handler to be called when data is returned.
     orders.PendingEntityListResolved += PendingOrdersResolvedHandler;
    }

    private void PendingOrdersResolvedHandler(object sender, PendingEntityListResolvedEventArgs&lt;OrderSummary&gt; args) {
      // The original RelatedEntityList will now contain the returned entities, as will the 
      // args.ResolvedEntities list.

      Assert.IsFalse(_customer.OrderSummaries.IsPendingEntityList);
      Assert.IsTrue(_customer.OrderSummaries.Count &gt; 0);
    }
      </code>
    </example>
        </member>
        <member name="P:IdeaBlade.EntityModel.RelatedEntityList`1.ListReference">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.ListEntityReference{T}"/> to which this list is tied.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.RelatedEntityList`1.IsPendingEntityList">
            <summary>
            Returns true if the current list is pending the completion of an asynchronous navigation.
            </summary>
            <example>
      <code lang="C#">
        
    private Customer _aCustomer;

    public void GetCustOrdersAsync() {

      DomainModelEntityManager mgr = = new DomainModelEntityManager();

      // Turn on async navigation.  This is a readonly property in Silverlight.
      mgr.UseAsyncNavigation = true;

      // Assume we already have a Customer instance. 
      // Navigate to customer orders.  
      // If UseAsyncNavigation is true and the orders aren't already in cache
      // the IsPendingEntityList flag will be on.

      var orders = _aCustomer.OrderSummaries;
      Assert.IsTrue(orders.IsPendingEntityList);

      // Setup a handler to be called when data is returned.
     orders.PendingEntityListResolved += PendingOrdersResolvedHandler;
    }

    private void PendingOrdersResolvedHandler(object sender, PendingEntityListResolvedEventArgs&lt;OrderSummary&gt; args) {
      // The original RelatedEntityList will now contain the returned entities, as will the 
      // args.ResolvedEntities list.

      Assert.IsFalse(_customer.OrderSummaries.IsPendingEntityList);
      Assert.IsTrue(_customer.OrderSummaries.Count &gt; 0);
    }
      </code>
    </example>
        </member>
        <member name="P:IdeaBlade.EntityModel.RelatedEntityList`1.Item(System.Int32)">
            <summary>
            See <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/>
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.RelatedEntityList`1.Count">
            <summary>
            See <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.RelatedEntityList`1.IsReadOnly">
            <summary>
            See <see cref="P:System.Collections.IList.IsReadOnly"/>.
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.RelatedEntityList`1.PropertyChanged">
            <summary>
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="E:IdeaBlade.EntityModel.RelatedEntityList`1.CollectionChanged">
            <summary>
            <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.RestoreStrategy">
            <summary>
            Determines the options to use when restoring an <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/>.
            </summary>
            <remarks>
            A <b>RestoreStrategy</b> is used when restoring an EntityCache with
            one of the <see cref="M:CacheStateManager.RestoreCacheState(string)"/> methods
            of the <see cref="P:IdeaBlade.EntityModel.EntityManager.CacheStateManager"/>.
            <para>
            The default <b>RestoreStrategy</b> will restore both the <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultSaveOptions"/>
            and <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultQueryStrategy"/> settings from the EntityManager used when
            <see cref="M:CacheStateManager.SaveCacheState(string)"/> was called.  Use a custom <b>RestoreStrategy</b>
            if you are restoring to another EntityManager with different settings which should not be overwritten.
            </para>
            </remarks>
        </member>
        <member name="F:IdeaBlade.EntityModel.RestoreStrategy.Normal">
            <summary>
            Do not restore the <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultSaveOptions"/> and <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultQueryStrategy"/> 
            from the EntityCache, and use a MergeStrategy of <see cref="F:MergeStrategy.PreserveChanges"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.RestoreStrategy.#ctor(System.Boolean,System.Boolean,IdeaBlade.EntityModel.MergeStrategy)">
            <summary>
            Initialize a new RestoreStrategy.
            </summary>
            <param name="restoreSaveOptions">Whether the <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultSaveOptions"/> should be restored using the value in the EntityCache</param>
            <param name="restoreQueryStrategy">Whether the <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultQueryStrategy"/> should be restored using the value in the EntityCache</param>
            <param name="mergeStrategy">The merge strategy to use when restoring the EntityCache</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.RestoreStrategy.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.RestoreStrategy.op_Equality(IdeaBlade.EntityModel.RestoreStrategy,IdeaBlade.EntityModel.RestoreStrategy)">
            <summary>
            Operator == overload.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.RestoreStrategy.op_Inequality(IdeaBlade.EntityModel.RestoreStrategy,IdeaBlade.EntityModel.RestoreStrategy)">
            <summary>
            Operator != overload.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.RestoreStrategy.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.RestoreStrategy.MergeStrategy">
            <summary>
            Returns the MergeStrategy for this RestoreStrategy.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.RestoreStrategy.RestoreSaveOptions">
            <summary>
            Returns whether the <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultSaveOptions"/> should be restored using the value from
            the <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.RestoreStrategy.RestoreQueryStrategy">
            <summary>
            Returns whether the <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultQueryStrategy"/> should be restored using the value 
            from the <see cref="T:IdeaBlade.EntityModel.EntityCacheState"/>.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.SaveOptions">
            <summary>
            Options that can be used to control <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges"/> processing.
            </summary>
            <remarks>
            Using <b>SaveOptions</b> you can specify the <see cref="P:IdeaBlade.EntityModel.SaveOptions.TransactionSettings"/> used during a save,
            <see cref="P:IdeaBlade.EntityModel.SaveOptions.FixupTempIds"/> to specify whether to fixup 
            all generated temporary Ids or only those Ids corresponding to entities passed into the SaveChanges method, 
            and <see cref="P:IdeaBlade.EntityModel.SaveOptions.EntityTypesExcludedFromPostSaveRefetch"/> to specify the entity types to be excluded from a post-save refetch.
            <para>
            The <see cref="P:IdeaBlade.EntityModel.SaveOptions.Tag"/> property may be used to pass custom information that can be used by a EntityServerSaveInterceptor 
            to mediate the save operation.
            
            The <see cref="P:IdeaBlade.EntityModel.SaveOptions.PersistenceOrder"/> is not currently used.  In a future release this property will allow
            you to set the entity order when saving to non-EDM data sources.
            </para>
            <para>
            By default, <see cref="P:TransactionSettings.Default"/> is used
            and <see cref="P:IdeaBlade.EntityModel.SaveOptions.FixupTempIds"/> is set to All.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.SaveOptions.#ctor">
            <summary>
            Create a new instance of this class.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.SaveOptions.#ctor(IdeaBlade.EntityModel.SaveOptions)">
            <summary>
            A SaveOptions copy constructor.
            </summary>
            <param name="saveOptions"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.SaveOptions.WithTag(System.Object)">
            <summary>
            Used to create a clone of this SaveOptions but with the "Tag" set to the specified value.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.SaveOptions.TransactionSettings">
            <summary>
            Gets or sets the transactional behavior for the save. 
            </summary>
            <remarks>
            Defaults to <see cref="P:TransactionSettings.Default"/>.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.SaveOptions.Tag">
            <summary>
            Used to pass custom user information to the EntityServer regarding the Save operation. 
            </summary>
            <remarks> The 'type' of the value that is set here must either be a primitive type or must be declared with the IKnownType
            interface or via an implementation of the IKnownTypeProvider interface.</remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.SaveOptions.PersistenceOrder">
            <summary>
            For future use. Gets or sets the order in which entities should be processed 
            when persisting to a non-EDM data source.
            </summary>
            <remarks>
            Not currently used.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.SaveOptions.FixupTempIds">
            <summary>
            Gets or sets the option to fixup all generated temporary Ids or 
            only those Ids corresponding to entities passed into the SaveChanges method.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SaveOptions.PocoSaveMode">
            <summary>
            Determines how to discover any custom server side POCO save methods.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SaveOptions.EntityTypesExcludedFromPostSaveRefetch">
            <summary>
            Gets or sets the types of entities to be excluded from 
            the refetch that is performed after a save.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SaveOptions.IgnoreClientValidationErrors">
            <summary>
            Gets or sets a flag whether to ignore client validation errors on save.
            </summary>
            <remarks>
            When false, save operation that contains entities with client validation errors 
            will not proceed to the server. When true, client validation errors are ignored (cleared) 
            and the save op will proceed to the server. Defaults to true.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.FixupTempIds">
            <summary>
            SaveOptions setting determining whether to fixup all generated temporary Ids 
            or only those Ids corresponding to entities passed into the SaveChanges method.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.FixupTempIds.All">
            <summary>
            Default setting. Perform Id fixup on all generated temporary Ids.
            </summary>
        </member>
        <member name="F:IdeaBlade.EntityModel.FixupTempIds.InSaveListOnly">
            <summary>
            Perform Id fixup only on those entities passed into the SaveChanges method.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.SaveResult">
            <summary>
            The result of a <see cref="M:IdeaBlade.EntityModel.EntityManager.SaveChanges"/> call. 
            <seealso cref="T:IdeaBlade.EntityModel.EntityManager"/>
            </summary>
            <remarks><b>SaveResult</b> indicates whether the save succeeded or failed, and if it failed 
            the entities involved and/or any exception encountered.
            <para>
            The <see cref="T:IdeaBlade.EntityModel.SaveOptions"/> used during the <b>SaveChanges</b> call will determine whether
            the <b>SaveResult</b> is returned if an error occurs.  
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.SaveResult.#ctor(IdeaBlade.EntityModel.SaveWorkState)">
            <summary>
            Initializes a new instance of the SaveResult class.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.SaveResult.ToString">
            <summary>
            Human readable representation of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.SaveResult.SaveStatus">
            <summary>
            Returns the kind of operation performed during this save.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SaveResult.SavedEntities">
            <summary>
            List of entities saved.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SaveResult.HandledException">
            <summary>
            Returns the handled exception.
            </summary>
            <remarks>
            If you have subscribed to the <see cref="E:IdeaBlade.EntityModel.EntityManager.EntityServerError"/> event
            you can intercept and handle some exceptions in the handler before the SaveResult
            is returned.  
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.SaveResult.Ok">
            <summary>
            Returns whether or not the save succeeded.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SaveResult.TemporaryIdMap">
            <summary>
            Get copy of <see cref="T:IdeaBlade.EntityModel.UniqueIdMap"/> that was (or would have been) used for fixup.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SaveResult.WasCancelled">
            <summary>
            Gets a value indicating whether the operation was cancelled.
            </summary>
            <value><c>true</c> if was cancelled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IdeaBlade.EntityModel.SaveResult.WasExceptionHandled">
            <summary>
            Returns true if an exception was thrown but handled by
            an EntityServerError handler.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.ServerMethodDelegate">
            <summary>
              Defines a delegate that a client uses to call a method on the server.
              <seealso cref="T:IdeaBlade.EntityModel.AllowRpcAttribute"/>
              <seealso cref="M:IdeaBlade.EntityModel.EntityManager.InvokeServerMethod(IdeaBlade.EntityModel.ServerMethodDelegate,System.Object[])">EntityManager.InvokeServerMethod</seealso>
            </summary>
            <param name="principal">Represents the calling user</param>
            <param name="serverEntityManager">A server-side EntityManager (this is not the EntityManager on which the 
            InvokeServerMethod call was made)</param>
            <param name="args">User-defined arguments</param>
            <returns>Any serializable type</returns>
            <remarks>Any method which will be invoked via the <see cref="M:IdeaBlade.EntityModel.EntityManager.InvokeServerMethod(IdeaBlade.EntityModel.ServerMethodDelegate,System.Object[])">EntityManager.InvokeServerMethod</see>
            call must use this delegate signature.
            </remarks>
            <example><code lang="C#">
// Sample showing invocation of server method
EntityManager mgr = new DomainModelEntityManager();
int orderId = 10250;
bool mailSent = (bool) mgr.InvokeServerMethod(Order.EmailOrderInfo, orderId);

// sample method defined in Order class
public class Order {
//...
  // ServerMethodDelegate method, called from client
  [AllowRpc]
  public static Object EmailOrderInfo(IPrincipal pPrincipal, EntityManager pPm, params Object[] pArgs) {
    int orderId = Convert.ToInt32(pArgs[0]);

    // build and send an email message 
    string from = "sales@mycompany.com";
    string to = "customer@yourcompany.com";
    System.Net.Mail.MailMessage msg = new System.Net.Mail.MailMessage(from, to);
    msg.Subject = "Order Information";
    msg.Body = string.Format("Order id = {0} has been shipped", orderId);

    System.Net.Mail.SmtpClient mailClient = new System.Net.Mail.SmtpClient("localhost");
    try {
      mailClient.Send(msg);
    } catch (Exception e) {
      TraceFns.WriteLine(e.Message);
      return false;
    }
    return true;
 }
}
</code></example><example><code lang="VB">
 ' Sample showing invocation of server method
Dim mgr As EntityManager As New DomainModelEntityManager()
Dim orderId As Integer = 10250
Dim mailSent As Boolean = CBool(mgr.InvokeServerMethod(Order.EmailOrderInfo, orderId))

' sample method defined in Order class
Public Class Order 
'...
  Public Shared&lt;AllowRpc()&gt;  _
  Function EmailOrderInfo(pPrincipal As IPrincipal, pManager As EntityManager, ParamArray pArgs() As [Object]) As [Object]
    Dim orderId As Integer = Convert.ToInt32(pArgs(0))
   
    ' build and send an email message 
    Dim from As String = "sales@mycompany.com"
    Dim [to] As String = "customer@yourcompany.com"
    Dim msg As New System.Net.Mail.MailMessage(from, [to])
   
    msg.Subject = "Order Information"
    msg.Body = String.Format("Order id = {0} has been shipped", orderId)
   
    Dim client As New System.Net.Mail.SmtpClient("localhost")
    Try
      client.Send(msg)
    Catch e As Exception
      TraceFns.WriteLine(e.Message)
      Return False
   End Try
   Return True
 End Function 
End Class
	</code></example>
        </member>
        <member name="T:IdeaBlade.EntityModel.SessionBundle">
            <summary>
            Internal use only.  Used by the framework to uniquely identify a client session and authenticate communications
            with the EntityServer.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.SessionBundle.#ctor(System.Guid,System.String)">
            <summary>
            Create a SessionBundle to transmit with a client request.
            </summary>
            <param name="sessionKey"></param>
            <param name="encryptedCredential"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.SessionBundle.#ctor(System.String)">
            <summary>
            Creates a new bundle for a specified principal.  For internal use only.
            </summary>
            <param name="encryptedCredential"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.SessionBundle.#ctor(System.Guid)">
            <summary>
            Creates a new bundle using a previously generated session key.  For internal use only.
            </summary>
            <param name="sessionKey"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.SessionBundle.NullSessionBundle">
            <summary>
            A null session bundle, for internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SessionBundle.IsServerSessionBundle">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SessionBundle.SessionKey">
            <summary>
            The SessionKey associated with this bundle.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SessionBundle.Principal">
            <summary>
            The Principal associated with this bundle. 
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SessionBundle.EncryptedCredential">
            <summary>
            Encrypted login credentials.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.SessionBundle.CurrentSessionBundle">
            <summary>
            Only available on the server; returns null when called from client side.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.StoredProcQuery">
            <summary>
            Not supported in DevForce 2010 RC1.  
            <seealso cref="P:IdeaBlade.EntityModel.StoredProcQuery.EntityManager"/>
            <seealso cref="T:IdeaBlade.EntityModel.IEntity"/>
            </summary>
            <remarks>
            The DevForce Object Mapper auto-generates two functions on the sub-typed
            <b>EntityManager</b> in your Domain Model for every stored procedure you've imported: the first
            returns a <b>StoredProcQuery</b> for the named procedure, and the second builds
            and executes a <b>StoredProcQuery</b> from the parameters provided and returns the results.
            To execute the <b>StoredProcQuery</b> returned by the first function mentioned, use 
            <see cref="M:IdeaBlade.EntityModel.EntityManager.ExecuteQuery(IdeaBlade.EntityModel.IEntityQuery)"/> or one
            of the available overloads.
            <para>
            These queries always use a <see cref="T:IdeaBlade.EntityModel.FetchStrategy"/>
            of <b>DataSourceOnly</b>, and cannot be used when disconnected from the EntityServer.
            </para>
            <para>
            You must have already defined a <b>FunctionImport</b> in your Entity Domain Model in order to use 
            the <b>StoredProcQuery</b>; you may not execute a stored procedure defined in your database
            but unknown to your model.
            </para>
            <para>
            Note:  Stored procedures returning primitive data types are not currently supported, 
            therefore the <see cref="P:IdeaBlade.EntityModel.StoredProcQuery.ElementType"/> must always be an Entity.
            </para>
            </remarks>
            <example><code lang="C#">

// Sample 1 - Directly calling the generated method on your sub-typed EntityManager.
private void Sample1() {
   IdeaBladeTutorial.Manager mgr = new IdeaBladeTutorial.Manager();

   DateTime dt1 = DateTime.Parse("1/1/1990");
   DateTime dt2 = DateTime.Parse("1/1/2000");
   var results = mgr.GetSalesByYear(dt1, dt2);
}

// Sample 2 - Getting the StoredProcQuery from the generated method.
private void Sample2() {      
   IdeaBladeTutorial.Manager mgr = new IdeaBladeTutorial.Manager();
  
   DateTime dt1 = DateTime.Parse("1/1/1990");
   DateTime dt2 = DateTime.Parse("1/1/2000");
   StoredProcQuery query = mgr.GetSalesByYearQuery(dt1, dt2);
   var results = mgr.ExecuteQuery&lt;SalesByYear&gt;(query);
}

		</code></example>
        </member>
        <member name="M:IdeaBlade.EntityModel.StoredProcQuery.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the StoredProcQuery class. 
            </summary>
            <param name="returnType">The entity type that this query will return</param>
            <remarks>
            You must also set the <see cref="P:IdeaBlade.EntityModel.StoredProcQuery.ProcedureName"/> and <see cref="P:IdeaBlade.EntityModel.StoredProcQuery.Parameters"/> properties 
            in order to use this query.  
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.StoredProcQuery.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the StoredProcQuery class with the name of the stored procedure to be executed.
            </summary>
            <param name="returnType">The entity type that this query will return</param>
            <param name="procedureName">The name of the stored procedure to be called</param>
            <remarks>
            Set the <see cref="P:IdeaBlade.EntityModel.StoredProcQuery.Parameters"/> if necessary before using this query.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.StoredProcQuery.#ctor(System.Type,System.String,IdeaBlade.EntityModel.QueryParameter[])">
            <summary>
            Initializes a new instance of the StoredProcQuery class.
            </summary>
            <param name="returnType">The entity type that this query will return</param>
            <param name="procedureName">The name of the stored procedure to be called</param>
            <param name="inParameters">Stored procedure parameters</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.StoredProcQuery.#ctor(IdeaBlade.EntityModel.EntityManager,System.Type,System.String,IdeaBlade.EntityModel.QueryParameter[])">
            <summary>
            Initializes a new instance of the StoredProcQuery class.
            </summary>
            <param name="manager">EntityManager for the query</param>
            <param name="returnType">The entity type that this query will return</param>
            <param name="procedureName">The name of the stored procedure to be called</param>
            <param name="inParameters">Stored procedure parameters</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.StoredProcQuery.Clone">
            <summary>
            Creates a deep copy of this query. 
            </summary>
            <returns>A deep copy of this instance</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.StoredProcQuery.CreateFinder(IdeaBlade.EntityModel.EntityManager)">
            <summary>
            Internal use only.
            </summary>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.StoredProcQuery.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.StoredProcQuery.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.StoredProcQuery.ToString">
            <summary>
            Returns a human readable representation of the current query.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoredProcQuery.ProcedureName">
            <summary>
            Gets or sets the stored procedure name.
            </summary>
            <remarks>
            You must have already defined a <b>FunctionImport</b> in your model in order to use 
            the <b>StoredProcQuery</b>; you may not execute a stored procedure defined in your database
            but unknown to your model.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoredProcQuery.DataSourceKeyName">
            <summary>
            May be used to specify the DataSourceKeyName for StoredProc queries where it cannot be otherwise inferred.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoredProcQuery.Parameters">
            <summary>
            Gets or sets the parameters to the stored procedure.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoredProcQuery.Tag">
            <summary>
            Gets or sets user-defined information regarding this query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoredProcQuery.QueryableType">
            <summary>
            Gets the entity type that was originally queried.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoredProcQuery.ElementType">
            <summary>
            The <see cref="T:IdeaBlade.EntityModel.IEntity"/> type returned by this query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoredProcQuery.QueryStrategy">
            <summary>
            Gets or sets the query strategy used by this query.
            </summary>
            <remarks>
            A StoredProcQuery may only operate against the backend database.  
            The default <see cref="T:IdeaBlade.EntityModel.MergeStrategy"/> is <b>OverwriteChanges</b>, but may be changed as
            long as a <see cref="T:IdeaBlade.EntityModel.FetchStrategy"/> of <b>DataSourceOnly</b> is used.
            </remarks>
            <exception cref="T:IdeaBlade.Core.IdeaBladeException">If FetchStrategy is not DataSourceOnly</exception>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoredProcQuery.EntityManager">
            <summary>
            Gets or sets the EntityManager for this query.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoredProcQuery.CommandTimeout">
            <summary>
            Gets or sets the wait time in seconds before terminating the attempt to execute a command and generating an error.
            </summary>
            <remarks>
            A value of 0 indicates that the default timeout value for the data provider should be used - this is usually 30 seconds.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.StoredProcQuerySurrogate">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoredProcQuerySurrogate.ReturnTypeWrapper">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoredProcQuerySurrogate.ProcedureName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoredProcQuerySurrogate.DataSourceKeyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoredProcQuerySurrogate.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoredProcQuerySurrogate.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoredProcQuerySurrogate.QueryStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoredProcQuerySurrogate.CommandTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.StoreGeneratedIdGenerator">
            <summary>
            <see cref="T:IdeaBlade.EntityModel.IIdGenerator"/> providing intrinsic framework support for store-generated IDs.
            </summary>
            <remarks>
            This IdGenerator will automatically be used to provide a temporary property value for any new entities whose
            primary key is marked with the <b>StoreGeneratedPattern="Identity"</b> attribute in its entity model.
            You do not need to call <see cref="M:IdeaBlade.EntityModel.EntityManager.GenerateId"/>
            for these properties, as this key generation is done for you.
            <para>
            If you do not wish to use this generator for your Identity properties you will need to provide a stub or custom
            implementation of <see cref="T:IdeaBlade.EntityModel.IIdentityIdGenerator"/>.
            </para>
            <para>
            The Entity Framework uses the <b>StoreGeneratedPattern</b> attribute to indicate properties whose value
            is provided by the data source after the row has been saved.  The <b>StoreGeneratedIdGenerator</b> allows you to 
            assign temporary values to these key fields, and will automatically map these temporary IDs to the 
            real IDs assigned by the data source.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.StoreGeneratedIdGenerator.#ctor">
            <summary>
            Creates a new instance of this class.  Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.StoreGeneratedIdGenerator.IsApplicable(IdeaBlade.EntityModel.IDataSourceKey)">
            <summary>
            Returns whether this generator can be used with the specified data source.
            </summary>
            <param name="dataSourceKey"></param>
            <returns></returns>
            <remarks>
            The <b>StoreGeneratedIdGenerator</b> is used only with client and server
            <b>EdmKeys</b>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.StoreGeneratedIdGenerator.GetNextTempId(IdeaBlade.EntityModel.DataEntityProperty)">
            <summary>
            Returns a temporary ID value for the specified property.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.StoreGeneratedIdGenerator.IsTempId(IdeaBlade.EntityModel.UniqueId)">
            <summary>
            Returns whether the specified ID is a temporary ID.
            </summary>
            <param name="uniqueId"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.StoreGeneratedIdGenerator.Reset">
            <summary>
            Reset temporary ID generation back to its initial state. 
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.StoreGeneratedIdGenerator.GetRealIdMap(IdeaBlade.EntityModel.UniqueIdCollection,IdeaBlade.EntityModel.IDataSourceKey)">
            <summary>
            Returns a dictionary that maps temporary IDs to real IDs.
            </summary>
            <param name="tempIds"></param>
            <param name="dataSourceKey"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoreGeneratedIdGenerator.NextIdGenerator">
            <summary>
            Returns the default IdGenerator used for non-Identity properties.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoreGeneratedIdGenerator.TempIds">
            <summary>
            Returns the collection of temporary IDs.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoreGeneratedIdGenerator.TempIdCache">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.StoreGeneratedIdGenerator.SerializedNextId">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.TransactionSettings">
            <summary>
            Options used to control transactional behavior in query and save processing.
            </summary>
            <seealso cref="T:IdeaBlade.EntityModel.SaveOptions"/>
            <seealso cref="T:IdeaBlade.EntityModel.QueryStrategy"/>
        </member>
        <member name="M:IdeaBlade.EntityModel.TransactionSettings.#ctor">
            <summary>
            Create a TransactionSettings object using default settings.
            </summary>
            <remarks>
            Defaults the <see cref="P:IdeaBlade.EntityModel.TransactionSettings.IsolationLevel"/> to ReadCommitted, the <see cref="P:IdeaBlade.EntityModel.TransactionSettings.Timeout"/> to one minute,
            and <see cref="P:IdeaBlade.EntityModel.TransactionSettings.UseTransactionScope"/> to true.  These settings are not DevForce requirements
            and can be changed using the appropriate constructor.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.TransactionSettings.#ctor(System.Transactions.IsolationLevel,System.TimeSpan,System.Boolean)">
            <summary>
            Create a TransactionSettings object with the specified settings.
            </summary>
            <remarks>
            Note that IsolationLevel and Timeout have no affect if UseTransactionScope is false.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.TransactionSettings.ToTransactionOptions">
            <summary>
            Converts the TransactionSettings to a <see cref="T:System.Transactions.TransactionOptions"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.TransactionSettings.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.TransactionSettings.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.TransactionSettings.Default">
            <summary>
            Default settings for all queries and saves. 
            </summary>
            <remarks>
            The <b>Default</b> provides application-wide default transaction settings.  You
            can supply settings for a particular query with the query's <see cref="T:IdeaBlade.EntityModel.QueryStrategy"/>, 
            and for a particular save with the <see cref="T:IdeaBlade.EntityModel.SaveOptions"/> passed in the SaveChanges call.  Note that you can
            also define defaults for an EntityManager using the <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultQueryStrategy"/>
            and <see cref="P:IdeaBlade.EntityModel.EntityManager.DefaultSaveOptions"/>.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.TransactionSettings.UseTransactionScope">
            <summary>
            Whether to use a .NET TransactionScope to perform transactions. 
            </summary>
            <remarks>
             It is highly recommended that this be set to true (default). Note that if a transaction crosses
             database boundaries that the transaction may escalate to use DTC (the Distributed Transaction Coordinator).
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.TransactionSettings.IsolationLevel">
            <summary>
            Gets the transaction locking behavior.
            </summary>
            <remarks>
            Only applicable if <see cref="P:IdeaBlade.EntityModel.TransactionSettings.UseTransactionScope"/> is true.  The default IsolationLevel is ReadCommitted.
            </remarks>
        </member>
        <member name="P:IdeaBlade.EntityModel.TransactionSettings.Timeout">
            <summary>
            Gets the timeout period for the transaction. 
            </summary>
            <remarks>
            Only applicable if <see cref="P:IdeaBlade.EntityModel.TransactionSettings.UseTransactionScope"/> is true.  The default Timeout is one minute.
            </remarks>
        </member>
        <member name="T:IdeaBlade.EntityModel.UniqueId">
            <summary>
            Represents the combination of a specific <see cref="T:IdeaBlade.EntityModel.EntityProperty"/> and value.
            <seealso cref="T:IdeaBlade.EntityModel.IIdGenerator"/>
            <seealso cref="T:IdeaBlade.EntityModel.UniqueIdCollection"/>
            </summary>
            <remarks><b>UniqueIds</b> are used when implementing the <see cref="T:IdeaBlade.EntityModel.IIdGenerator"/> interface.
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.UniqueId.#ctor(IdeaBlade.EntityModel.DataEntityProperty,System.Object)">
            <summary>
            Creates a new instance of UniqueId.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.UniqueId.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.UniqueId.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.UniqueId.ToString">
            <summary>
            Returns a human readable representation of this UniqueId.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.UniqueId.CompareTo(System.Object)">
            <summary>
            <see cref="M:System.IComparable.CompareTo(System.Object)"/> implementation.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.UniqueId.Property">
            <summary>
            Returns the EntityProperty associated with this UniqueId.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.UniqueId.Value">
            <summary>
            Returns the Value associated with this UniqueId.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.UniqueIdCollection">
            <summary>
            Represents a collection of <see cref="T:IdeaBlade.EntityModel.UniqueId"/> objects.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.UniqueIdCollection.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.UniqueIdCollection.#ctor(System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.UniqueId})">
            <summary>
            Ctor.
            </summary>
            <param name="uniqueIds"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.UniqueIdCollection.AddRange(System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.UniqueId})">
            <summary>
            Adds a collection of UniqueIds to this collection.
            </summary>
            <param name="uniqueIds"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.UniqueIdCollection.ContainsIdentityIds">
            <summary>
            Returns whether the list contains any auto-incrementing (Identity) properties.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.UniqueIdMap">
            <summary>
            A strongly typed dictionary mapping <see cref="T:IdeaBlade.EntityModel.UniqueId"/> keys containing temporary identifiers
            to values for the permanent identifiers.
            <seealso cref="T:IdeaBlade.EntityModel.IIdGenerator"/>
            </summary>
            <remarks>Used in the <see cref="T:IdeaBlade.EntityModel.IIdGenerator"/> method <see cref="M:IdeaBlade.EntityModel.IIdGenerator.GetRealIdMap(IdeaBlade.EntityModel.UniqueIdCollection,IdeaBlade.EntityModel.IDataSourceKey)"/>
            when mapping temporary to real identifiers.</remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.UniqueIdMap.#ctor">
            <summary>
            Initializes a new instance of the UniqueIdMap class.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.UniqueIdMap.#ctor(IdeaBlade.EntityModel.UniqueIdCollection)">
            <summary>
            Initializes a new instance of the UniqueIdMap class.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.UniqueIdMap.#ctor(System.Collections.Generic.IEnumerable{IdeaBlade.EntityModel.UniqueIdMap})">
            <summary>
             Initializes a new instance of the UniqueIdMap class.
            </summary>
            <param name="maps"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.UniqueIdMap.AddMap(IdeaBlade.EntityModel.UniqueIdMap)">
            <summary>
            Adds another UniqueIdMap to this one.
            </summary>
            <param name="map">map</param>
        </member>
        <member name="M:IdeaBlade.EntityModel.UniqueIdMap.AddCollection(IdeaBlade.EntityModel.UniqueIdCollection)">
            <summary>
            Adds a <see cref="T:IdeaBlade.EntityModel.UniqueIdCollection"/> items.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.UniqueIdMap.ToCollection">
            <summary>
            Returns the items in the map as a <see cref="T:IdeaBlade.EntityModel.UniqueIdCollection"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.UniqueIdMap.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the UniqueIdMap class.
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:IdeaBlade.EntityModel.UserBase">
            <summary>
            The default <see cref="T:System.Security.Principal.IPrincipal"/> implementation within DevForce.
            </summary>
            <remarks>
            Represents the current user in DevForce application.  When a custom <see cref="T:IdeaBlade.EntityModel.IEntityLoginManager"/> is used you may return either a <b>UserBase</b>
            or any standard or custom <see cref="T:System.Security.Principal.IPrincipal"/> implementation.
            <para>
            When a <b>UserBase</b> is returned by a Login call, it will be available in the client application through the 
            <see cref="P:IdeaBlade.EntityModel.EntityManager.Principal">Principal</see> property on the <see cref="T:IdeaBlade.EntityModel.EntityManager"/>.
            For methods invoked on the server, the <see cref="P:System.Threading.Thread.CurrentPrincipal">Thread.CurrentPrincipal</see>
            will return a <b>UserBase</b> instance, as will the method's IPrincipal argument if specified.
            </para> 
            <para>
            If you are using ASP.NET security and have enabled the ASP.NET Role Manager 
            you can use <b>UserBase</b> to perform role-based authorization within your application using
            either declarative or imperative security checks.  
            </para>
            <para>
            If you use the ASP.NET Profile feature the profile properties will automatically be
            set in your custom <b>UserBase</b> implementation. Any properties in your custom class
            which match the Profile properties in name and data type will be set by the
            <see cref="T:IdeaBlade.EntityModel.Web.AspAuthenticatingLoginManager">AspAuthenticatingLoginManager</see>.  Be sure that your custom class extends
            <b>UserBase</b>.
            </para>
            <para>
            You can also extend <b>UserBase</b> and <see cref="T:IdeaBlade.EntityModel.Web.AspAuthenticatingLoginManager">AspAuthenticatingLoginManager</see>
            to add additional application-specific properties and logic.  Make sure that you decorate your custom UserBase type with a <see cref="T:System.Runtime.Serialization.DataContractAttribute">DataContract</see>
            attribute.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.UserBase.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="identity"></param>
            <param name="roles"></param>
            <remarks>
            A <b>UserBase</b> is returned by DevForce when you are using the <see cref="T:IdeaBlade.EntityModel.Web.AspAuthenticatingLoginManager">AspAuthenticatingLoginManager</see>,
            and if you allow anonymous logins but have not implemented a custom <see cref="T:IdeaBlade.EntityModel.IEntityLoginManager"/>. 
            <para>
            If you have extended the <b>UserBase</b> base type, you must include a public constructor with the signature below.
            </para>
            </remarks>
        </member>
        <member name="M:IdeaBlade.EntityModel.UserBase.IsInRole(System.String)">
            <summary>
            Determines whether the user has been assigned the specified role.
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.EntityModel.UserBase.System#Security#Principal#IPrincipal#Identity">
            <summary>
            Returns the <see cref="T:System.Security.Principal.IIdentity"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.UserBase.Roles">
            <summary>
            Returns the list of user roles.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.UserBase.AuthenticationType">
            <summary>
            Gets the type of authentication used.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.UserBase.IsAuthenticated">
            <summary>
            Gets whether the user has been authenticated.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.UserBase.Name">
            <summary>
            Gets the name of the user.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.UserIdentity">
            <summary>
            <see cref="T:System.Security.Principal.IIdentity"/> implementation used with <see cref="T:IdeaBlade.EntityModel.UserBase"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.UserIdentity.#ctor(System.String)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:IdeaBlade.EntityModel.UserIdentity.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="isAuthenticated"></param>
        </member>
        <member name="P:IdeaBlade.EntityModel.UserIdentity.AuthenticationType">
            <summary>
            Gets the type of authentication used.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.UserIdentity.IsAuthenticated">
            <summary>
            Gets whether the user has been authenticated.
            </summary>
        </member>
        <member name="P:IdeaBlade.EntityModel.UserIdentity.Name">
            <summary>
            Gets the name of the user.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.WcfProxyFactory">
            <summary>
            Create a WCF proxy to a service.
            </summary>
        </member>
        <member name="T:IdeaBlade.EntityModel.DefaultClientProxy`1">
            <summary>
            Wcf proxy in .NET.  Differs from SL proxy in config file used,
            binding information, and customization.
            </summary>
            <typeparam name="TContract"></typeparam>
        </member>
        <member name="T:IdeaBlade.EntityModel.WcfExtensions.ProxyExtensionFns">
            <summary>
            Extension functions for a WcfProxy.
            </summary>
        </member>
        <member name="M:IdeaBlade.EntityModel.WcfExtensions.ProxyExtensionFns.AbortChannelIfNeeded(System.ServiceModel.ICommunicationObject)">
            <summary>
            Aborts the channel if not in an open or created state.
            </summary>
            <returns>True if the channel was aborted (or is unusable)</returns>
        </member>
        <member name="M:IdeaBlade.EntityModel.WcfExtensions.ProxyExtensionFns.CloseChannel(System.ServiceModel.ICommunicationObject)">
            <summary>
            Close an open channel.
            </summary>
            <param name="co"></param>
        </member>
    </members>
</doc>
