<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IdeaBlade.Linq</name>
    </assembly>
    <members>
        <member name="T:IdeaBlade.Linq.CompositePropertySelector">
            <summary>
            Base class for PropertySortSelector and PropertyProjectionSelector
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.PropertySelector">
            <summary>
            Allows dynamic construction of a LINQ Property expression i.e. Expression{Func{T}}"/>.
            </summary>
            <remarks>This type is immutable.</remarks>
        </member>
        <member name="M:IdeaBlade.Linq.PropertySelector.#ctor(System.Type,System.String)">
            <summary>
            Create a <b>PropertySelector</b> for the specified type and property name.
            </summary>
            <param name="instanceType"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:IdeaBlade.Linq.PropertySelector.#ctor(IdeaBlade.Linq.PropertySelector)">
            <summary>
            Copy constructor.
            </summary>
            <param name="selector"></param>
        </member>
        <member name="M:IdeaBlade.Linq.PropertySelector.ToSortSelector(System.ComponentModel.ListSortDirection)">
            <summary>
            Returns a <see cref="T:IdeaBlade.Linq.PropertySortSelector"/> from a PropertySelector.
            </summary>
            <param name="sortDirection"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.PropertySelector.ToString">
            <summary>
            Returns a string representation of the LambdaExpression for the predicate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.PropertySelector.ToLambdaExpression">
            <summary>
            Return a <see cref="T:System.Linq.Expressions.LambdaExpression"/> representing the property selector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.PropertySelector.ToLambdaExpression(System.Type)">
            <summary>
             Return a <see cref="T:System.Linq.Expressions.LambdaExpression"/> representing the property selector.
            </summary>
            <param name="delegateType">Represents the delegate signature for the lambda.</param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.PropertySelector.InstanceType">
            <summary>
            Type of object on which the property is defined.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.PropertySelector.PropertyName">
            <summary>
            The property name, may be a nested Property name as well.  i.e. "Customer.City" or "Customer.Orders"
            </summary>
            <exception cref="T:System.Exception">Unable to locate property 'x' on type 'y'</exception>
            <exception cref="T:System.InvalidCastException">Unable to convert value to type 'x'</exception>
            <exception cref="T:System.InvalidOperationException">This operator can only operate on properties of type 'string'</exception>
        </member>
        <member name="P:IdeaBlade.Linq.PropertySelector.Members">
            <summary>
            Returns a list of MemberInfo objects for members of the selector.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.PropertySelector.ReturnType">
            <summary>
            Type returned by the selector.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.PropertySelector.Properties">
            <summary>
            Returns a list of PropertyInfo objects representing properties of the selector.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.PropertySelector.PropertyType">
            <summary>
            The <see cref="P:IdeaBlade.Linq.PropertySelector.ReturnType"/>.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.PropertySelector.IsNestedSelector">
            <summary>
            True if multiple members are represented by the selector.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.CompositePropertySelector.Combine``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Combines a collection of PropertySortSelectors. 
            </summary>
            <param name="compositeSelectors"></param>
            <remarks>
            Use the <b>Combine</b> method to chain selectors.
            This operation clones each property selector so there are no side effects on the propertySortSelectors passed in.</remarks>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
    public void SampleCombine() {
      // Sample showing sort by Country and CompanyName properties of Customer.
      var mgr = new DomainModelEntityManager();
      var selector1 = new PropertySortSelector(typeof(Customer), "Country");
      var selector2 = new PropertySortSelector(typeof(Customer), "CompanyName");
      var combinedSelector = PropertySortSelector.Combine(new[] { selector1, selector2 });
      var results = mgr.Customers.OrderBySelector(combinedSelector).ToList();
    }
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.CompositePropertySelector.Add``1(``0)">
            <summary>
            Returns a new PropertySortSelector with the additional sort criteria to this propertySortSelector added.
            </summary>
            <param name="compositeSelector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
    public void ThenBySample2() {
      // Sample showing sort by Country and CompanyName properties of Customer.
      var mgr = new DomainModelEntityManager();
      var selector1 = new PropertySortSelector(typeof(Customer), "Country");
      var selector2 = new PropertySortSelector(typeof(Customer), "CompanyName");
      var combinedSelector = selector1.ThenBy(selector2);
      var results = mgr.Customers.OrderBySelector(combinedSelector).ToList();
    }
]]>
        </code>
      </example>
        </member>
        <member name="T:IdeaBlade.Linq.DynamicQueryExtensions">
            <summary>
            Static class providing extension methods for dynamic query building.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.DynamicQueryExtensions.ToPredicate``1(IdeaBlade.Core.IPredicateDescription)">
            <summary>
            Returns an Expression{Func{T}} representing the predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
public void UsingToPredicate() {
  var expr1 = new PredicateDescription(typeof(Product), "UnitPrice", FilterOperator.IsGreaterThanOrEqualTo, 24);
  var exprFunc = expr1.ToPredicate<Product>();
  var results = manager.Products.Where(exprFunc).ToList();
}          
       ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.DynamicQueryExtensions.And(IdeaBlade.Core.IPredicateDescription,IdeaBlade.Core.IPredicateDescription)">
            <summary>
            Returns <see cref="T:IdeaBlade.Linq.CompositePredicateDescription"/> which represents a conditional AND operation 
            of the current <b>PredicateDescription</b> with another.
            </summary>
            <param name="predicate"></param>
            <param name="other">PrecicateDescription to be ANDed with the current predicate</param>
            <returns>A CompositePredicateDescription representing multiple predicates</returns>
            <exception cref="T:System.Exception">PredicateDescriptions can only be combined if their InstanceTypes are the same</exception>
            <example>
        <code lang="C#">
          <![CDATA[
public void DynamicQueryAnd() {
  var baseQuery = EntityQuery.Create(typeof(Customer));
  var expr1 = new PredicateDescription("Country", FilterOperator.IsEqualTo, "Mexico");
  var expr2 = new PredicateDescription("CompanyName", FilterOperator.StartsWith, "A");
  var list = manager.ExecuteQuery(baseQuery.Where(expr1.And(expr2)));
}          
       ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.DynamicQueryExtensions.Or(IdeaBlade.Core.IPredicateDescription,IdeaBlade.Core.IPredicateDescription)">
            <summary>
            Returns <see cref="T:IdeaBlade.Linq.CompositePredicateDescription"/> which represents a conditional OR operation 
            of the current <b>PredicateDescription</b> with another.
            </summary>
            <param name="predicate"></param>
            <param name="other">PrecicateDescription to be ORed with the current predicate</param>
            <returns>A CompositePredicateDescription representing multiple predicates</returns>
            <exception cref="T:System.Exception">PredicateDescriptions can only be combined if their InstanceTypes are the same</exception>
            <example>
        <code lang="C#">
          <![CDATA[
public void DynamicQueryOr() {
  var baseQuery = EntityQuery.Create(typeof(Customer));
  var expr1 = new PredicateDescription("Country", FilterOperator.IsEqualTo, "Mexico");
  var expr2 = new PredicateDescription("CompanyName", FilterOperator.StartsWith, "A");
  var list = manager.ExecuteQuery(baseQuery.Where(expr1.Or(expr2)));
}          
       ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.DynamicQueryExtensions.Not(IdeaBlade.Core.IPredicateDescription)">
            <summary>
            Returns <see cref="T:IdeaBlade.Linq.CompositePredicateDescription"/> which represents a logical NOT operation 
            of the current <b>PredicateDescription</b>.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
public void DynamicQueryNot() {
  var entityType = typeof(Product);
  var baseQuery = EntityQuery.Create(entityType);
  var pd = new PredicateDescription("Category.Name", FilterOperator.StartsWith, "A");
  var pdNot = pd.Not();
  var list = manager.ExecuteQuery(baseQuery.Where(pdNot));
}          
       ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.DynamicQueryExtensions.Combine(IdeaBlade.Core.IProjectionSelector,IdeaBlade.Core.IProjectionSelector)">
            <summary>
            Returns an <see cref="T:IdeaBlade.Linq.AnonymousProjectionSelector"/> combining the current projection selector with another.
            </summary>
            <param name="selector"></param>
            <param name="other"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
public void DynamicAnonQueryCombine() {
  var ps1 = new ProjectionSelector(typeof(Customer), "Id");
  var ps2 = new ProjectionSelector(typeof(Customer), "CompanyName");
  var query = manager.Customers.Select(ps1.Combine(ps2));
  var anonItems = query.Execute();
}          
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.DynamicQueryExtensions.Combine(IdeaBlade.Core.IProjectionSelector,System.String,System.String)">
            <summary>
            Returns an <see cref="T:IdeaBlade.Linq.AnonymousProjectionSelector"/> combining the current projection selector with another.
            </summary>
            <param name="selector"></param>
            <param name="propertyName"></param>
            <param name="alias"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
public void DynamicAnonQueryCombine() {
  var ps = new ProjectionSelector(typeof(Customer), "Id")
          .Combine("CompanyName")
          .Combine("City");
  var query = manager.Customers.Select(ps);
  var anonItems = query.Execute();
}        
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.DynamicQueryExtensions.ThenBy(IdeaBlade.Core.ISortSelector,IdeaBlade.Core.ISortSelector)">
            <summary>
            Returns a <see cref="T:IdeaBlade.Linq.CompositeSortSelector"/> with a "ThenBy" class added to the current selector.
            </summary>
            <param name="selector"></param>
            <param name="other"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
public void DynamicQueryOrder() {
  var entityType = typeof(Product);
  var baseQuery = EntityQuery.Create(entityType);
  var pd = new PredicateDescription("UnitPrice", FilterOperator.IsGreaterThanOrEqualTo, 24);
  var ps = new SortSelector("Category.Name").ThenBy(new SortSelector("ProductName"));
  var query = baseQuery.Where(pd).OrderBySelector(ps);
  var results = manager.ExecuteQuery(query);
}          
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.DynamicQueryExtensions.ThenBy(IdeaBlade.Core.ISortSelector,System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Returns a <see cref="T:IdeaBlade.Linq.CompositeSortSelector"/> with a "ThenBy" class added to the current selector.
            </summary>
            <param name="selector"></param>
            <param name="propertyPath"></param>
            <param name="sortDirection"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
public void DynamicQueryOrder() {
  var entityType = typeof(Product);
  var baseQuery = EntityQuery.Create(entityType);
  var pd = new PredicateDescription("UnitPrice", FilterOperator.IsGreaterThanOrEqualTo, 24);
  var ps = new SortSelector("Category.Name").ThenBy("PropertyName");
  var query = baseQuery.Where(pd).OrderBySelector(ps);
  var results = manager.ExecuteQuery(query);
}         
]]>
        </code>
      </example>
        </member>
        <member name="T:IdeaBlade.Linq.SortSelector">
            <summary>
            Allows dynamic construction of LINQ OrderBy, OrderByDescending, ThenBy and ThenByDescending expressions.  
            </summary>
            <remarks>
            A <b>SortSelector</b> is a linked list of sort criteria for use in the <see cref="M:IdeaBlade.Linq.QueryableExtensions.OrderBySelector(System.Linq.IQueryable,IdeaBlade.Core.ISortSelector)"/> 
            and <see cref="M:IdeaBlade.Linq.QueryableExtensions.ThenBySelector``1(System.Linq.IOrderedQueryable{``0},IdeaBlade.Core.ISortSelector)"/> extension methods.
            You may combine any number of <b>SortSelectors</b> to order query results.
            </remarks>
        </member>
        <member name="T:IdeaBlade.Linq.MemberSelector">
            <summary>
            Allows dynamic construction of a LINQ Property expression i.e. Expression{Func{T}}"/>.
            </summary>
            <remarks>This type is immutable.</remarks>
        </member>
        <member name="M:IdeaBlade.Linq.MemberSelector.#ctor(System.Type,System.String)">
            <summary>
            Create a <b>MemberSelector</b> for the specified type and property name.
            </summary>
            <param name="instanceType"></param>
            <param name="propertyPath"></param>
        </member>
        <member name="M:IdeaBlade.Linq.MemberSelector.#ctor(System.String)">
            <summary>
            Create a <b>MemberSelector</b> for the specified property name.
            </summary>
            <param name="propertyPath"></param>
        </member>
        <member name="M:IdeaBlade.Linq.MemberSelector.#ctor(System.Type,System.String,IdeaBlade.Core.IPredicateDescription)">
            <summary>
            Create a <b>MemberSelector</b> from the specified type, method name and predicate.
            </summary>
            <param name="instanceType"></param>
            <param name="methodName"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:IdeaBlade.Linq.MemberSelector.#ctor(System.String,IdeaBlade.Core.IPredicateDescription)">
            <summary>
            Create a <b>MemberSelector</b> from the specified method name and predicate.
            </summary>
            <param name="methodName"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:IdeaBlade.Linq.MemberSelector.#ctor(System.Type,System.String,IdeaBlade.Core.IProjectionSelector)">
            <summary>
             Create a <b>MemberSelector</b> from the specified type, method name and projection.
            </summary>
            <param name="instanceType"></param>
            <param name="methodName"></param>
            <param name="projection"></param>
        </member>
        <member name="M:IdeaBlade.Linq.MemberSelector.#ctor(System.String,IdeaBlade.Core.IProjectionSelector)">
            <summary>
            Create a <b>MemberSelector</b> from the specified method name and projection.
            </summary>
            <param name="methodName"></param>
            <param name="projection"></param>
        </member>
        <member name="M:IdeaBlade.Linq.MemberSelector.#ctor(IdeaBlade.Linq.MemberSelector)">
            <summary>
            Copy constructor.
            </summary>
            <param name="selector"></param>
        </member>
        <member name="M:IdeaBlade.Linq.MemberSelector.Clone">
            <summary>
            Not supported.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.MemberSelector.ToString">
            <summary>
            Returns a string representation for this selector;
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.MemberSelector.ToLambdaExpression(System.Type)">
            <summary>
            Return a <see cref="T:System.Linq.Expressions.LambdaExpression"/> representing the property access.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.MemberSelector.BuildMemberExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            For internal use only.
            </summary>
            <param name="parmExpr"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.MemberSelector.InstanceType">
            <summary>
            Type of object on which the property is defined.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.MemberSelector.ReturnType">
            <summary>
            Type returned by the selector.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.MemberSelector.Description">
            <summary>
            The property name, may be a chained Property name as well.  i.e. "Customer.City" or "Customer.Orders"
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.MemberSelector.IsChainedSelector">
            <summary>
            True if multiple selectors have been chained.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.SortSelector.#ctor(System.Type,System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Create a <b>SortSelector</b> for the specified type and property path.
            </summary>
            <param name="instanceType"></param>
            <param name="propertyPath"></param>
            <param name="sortDirection">Sort direction.  Defaults to ascending.</param>
            <example><code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var entityType = typeof(Customer);
var baseQuery = EntityQuery.Create(entityType, mgr);
var ss = new SortSelector(entityType, Customer.EntityPropertyNames.Id, ListSortDirection.Ascending);
var results = baseQuery.OrderBySelector(ss).Execute();
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.SortSelector.#ctor(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Create a <b>SortSelector</b> for the specified property path.
            </summary>
            <param name="propertyPath"></param>
            <param name="sortDirection"></param>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var entityType = typeof(Customer);
var baseQuery = EntityQuery.Create(entityType, mgr);
var ss = new SortSelector(Customer.EntityPropertyNames.Id, ListSortDirection.Ascending);
var results = baseQuery.OrderBySelector(ss).Execute();
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.SortSelector.#ctor(System.Type,System.String,IdeaBlade.Core.IPredicateDescription,System.ComponentModel.ListSortDirection)">
            <summary>
            Create a <b>SortSelector</b> from the specified type, method name and predicate.
            </summary>
            <param name="instanceType"></param>
            <param name="methodName">Any Enumerable method that takes either a predicate or a projection expression.  InstanceType must be an IEnumerable.</param>
            <param name="predicate"></param>
            <param name="sortDirection"></param>
        </member>
        <member name="M:IdeaBlade.Linq.SortSelector.#ctor(System.String,IdeaBlade.Core.IPredicateDescription,System.ComponentModel.ListSortDirection)">
            <summary>
            Create a <b>SortSelector</b> from the method name and predicate.
            </summary>
            <param name="methodName">Any Enumerable method that takes either a predicate or a projection expression.  InstanceType must be an IEnumerable.</param>
            <param name="predicate"></param>
            <param name="sortDirection"></param>
        </member>
        <member name="M:IdeaBlade.Linq.SortSelector.#ctor(System.Type,System.String,IdeaBlade.Core.IProjectionSelector,System.ComponentModel.ListSortDirection)">
            <summary>
            Create a <b>SortSelector</b> from the specified type, method name and projection.
            </summary>
            <param name="instanceType"></param>
            <param name="methodName">Any Enumerable method that takes either a predicate or a projection expression.  InstanceType must be an IEnumerable.</param>
            <param name="projection"></param>
            <param name="sortDirection"></param>
        </member>
        <member name="M:IdeaBlade.Linq.SortSelector.#ctor(System.String,IdeaBlade.Core.IProjectionSelector,System.ComponentModel.ListSortDirection)">
            <summary>
            Create a <b>SortSelector</b> from the specified method name and projection.
            </summary>
            <param name="methodName">Any Enumerable method that takes either a predicate or a projection expression.  InstanceType must be an IEnumerable.</param>
            <param name="projection"></param>
            <param name="sortDirection"></param>
        </member>
        <member name="M:IdeaBlade.Linq.SortSelector.#ctor(IdeaBlade.Linq.MemberSelector,System.ComponentModel.ListSortDirection)">
            <summary>
            Create a <b>SortSelector</b> from the specified <see cref="T:IdeaBlade.Linq.MemberSelector"/>.
            </summary>
            <param name="selector"></param>
            <param name="sortDirection"></param>
        </member>
        <member name="M:IdeaBlade.Linq.SortSelector.Clone">
            <summary>
            Returns a clone of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SortSelector.Combine(System.Collections.Generic.IEnumerable{IdeaBlade.Core.ISortSelector})">
            <summary>
            Returns a <see cref="T:IdeaBlade.Linq.CompositeSortSelector"/> combining the current sort selector with the specified sort selectors.
            </summary>
            <param name="selectors"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SortSelector.ToString">
            <summary>
            Returns a text representation of the selector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.SortSelector.SortDirection">
            <summary>
            Direction is which property values should be sorted.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.CompositeSortSelector">
            <summary>
            A collection of <see cref="T:IdeaBlade.Linq.SortSelector"/>s providing for dynamic construction of OrderBy clauses.
            </summary>
            <remarks>
            A <b>CompositeSortSelector</b> is created when you combine two or more <see cref="T:IdeaBlade.Linq.SortSelector"/> instances; you won't generally
            need to construct one directly.
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();
var entityType = typeof(Customer);
var baseQuery = EntityQuery.Create(entityType, mgr);
var ss1 = new SortSelector(Customer.EntityPropertyNames.Id);
var ss2 = new SortSelector(Customer.EntityPropertyNames.CompanyName);

var combined = ss1.ThenBy(ss2);
var results = baseQuery.OrderBySelector(combined).Execute();
]]>
        </code>
      </example>
        </member>
        <member name="T:IdeaBlade.Linq.SelectorCollection`2">
            <summary>
            Base class for <see cref="T:IdeaBlade.Linq.CompositeSortSelector"/> and <see cref="T:IdeaBlade.Linq.AnonymousProjectionSelector"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.SelectorCollection`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.SelectorCollection`2.#ctor(`1)">
            <summary>
            
            </summary>
            <param name="selectorCollection"></param>
        </member>
        <member name="M:IdeaBlade.Linq.SelectorCollection`2.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SelectorCollection`2.ToString">
            <summary>
            Returns a text representation of the selector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.SelectorCollection`2.InstanceType">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.SelectorCollection`2.Selectors">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.CompositeSortSelector.#ctor">
            <summary>
            Create an instance of this type.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.CompositeSortSelector.#ctor(IdeaBlade.Linq.CompositeSortSelector)">
            <summary>
            Copy constructor.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:IdeaBlade.Linq.CompositeSortSelector.#ctor(System.Collections.Generic.IEnumerable{IdeaBlade.Core.ISortSelector})">
            <summary>
            Create an instance from the collection of <see cref="T:IdeaBlade.Linq.SortSelector"/>s.
            </summary>
            <param name="selectors"></param>
        </member>
        <member name="M:IdeaBlade.Linq.CompositeSortSelector.ToString">
            <summary>
            Returns a text representation of the selector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.CompositeSortSelector.IdeaBlade#Linq#IHasLazyInstanceType#SetInstanceType(System.Type)">
            <summary>
            
            </summary>
            <param name="instanceType"></param>
        </member>
        <member name="T:IdeaBlade.Linq.MemberSelectorExtensions">
            <summary>
            Static extension methods for the <see cref="T:IdeaBlade.Linq.MemberSelector"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.MemberSelectorExtensions.Dot``1(``0,System.String)">
            <summary>
            Provides for construction of "." notation in a dynamic query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memberSelector"></param>
            <param name="propertyPath"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
public void DynamicGroupAndSum() {
  var query = EntityQuery.Create(typeof(Order), manager)
    .GroupBy(new ProjectionSelector("ShipCity"))
    .Select(
          new ProjectionSelector("Key", "ShipCity").Combine(
          new ProjectionSelector("Select", new ProjectionSelector("Freight")).Dot("Sum()").WithAlias("Sum")
    ));
  var list = query.Execute();
}
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.MemberSelectorExtensions.Chain``1(``0,System.String,IdeaBlade.Core.IPredicateDescription)">
            <summary>
            Allows a <see cref="T:IdeaBlade.Linq.MemberSelector"/> to be chained.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memberSelector"></param>
            <param name="methodName"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.MemberSelectorExtensions.Chain``1(``0,System.String,IdeaBlade.Core.IProjectionSelector)">
            <summary>
            Allows a <see cref="T:IdeaBlade.Linq.MemberSelector"/> to be chained.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memberSelector"></param>
            <param name="methodName"></param>
            <param name="projection"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Linq.ProjectionSelector">
            <summary>
            Provides the means to dynamically construct a "Select", 'SelectMany" or "GroupBy" projection.
            </summary>
            <remarks>
            Replaces the <see cref="T:IdeaBlade.Linq.PropertyProjectionSelector"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Linq.ProjectionSelector.#ctor(System.Type,System.String,System.String)">
            <summary>
            Create a <b>ProjectionSelector</b> for the specified type and property path.
            </summary>
            <param name="instanceType"></param>
            <param name="propertyPath"></param>
            <param name="alias"></param>
            <example>
        <code lang="C#">
          <![CDATA[
public void DynamicAnonQuery() {
  var ps1 = new ProjectionSelector(typeof(Customer), "Id");
  var ps2 = new ProjectionSelector(typeof(Customer), "CompanyName");
  var allps = ProjectionSelector.Combine(new[] {ps1, ps2});

  var query = manager.Customers.Select(allps);
  var anonItems = query.Execute();
}          
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.ProjectionSelector.#ctor(System.String,System.String)">
            <summary>
            Create a <b>ProjectionSelector</b> for the specified property path.
            </summary>
            <param name="propertyPath"></param>
            <param name="alias"></param>
            <example>
        <code lang="C#">
          <![CDATA[
public void DynamicAnonQuery() {
  var ps1 = new ProjectionSelector("Id");
  var ps2 = new ProjectionSelector("CompanyName");
  var allps = ProjectionSelector.Combine(new[] {ps1, ps2});

  var query = manager.Customers.Select(allps);
  var anonItems = query.Execute();
}
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.ProjectionSelector.#ctor(System.Type,System.String,IdeaBlade.Core.IPredicateDescription,System.String)">
            <summary>
            Create a <b>ProjectionSelector</b> from the specified type and method name.
            </summary>
            <param name="instanceType"></param>
            <param name="methodName">Any Enumerable method that takes either a predicate or a projection expression.  InstanceType must be an IEnumerable.</param>
            <param name="predicate"></param>
            <param name="alias"></param>
        </member>
        <member name="M:IdeaBlade.Linq.ProjectionSelector.#ctor(System.String,IdeaBlade.Core.IPredicateDescription,System.String)">
            <summary>
            Create a <b>ProjectionSelector</b> from the specified method name.
            </summary>
            <param name="methodName">Any Enumerable method that takes either a predicate or a projection expression.  InstanceType must be an IEnumerable.</param>
            <param name="predicate"></param>
            <param name="alias"></param>
        </member>
        <member name="M:IdeaBlade.Linq.ProjectionSelector.#ctor(System.Type,System.String,IdeaBlade.Core.IProjectionSelector,System.String)">
            <summary>
            Create a <b>ProjectionSelector</b> from the specified type, method name, and projection selector.
            </summary>
            <param name="instanceType"></param>
            <param name="methodName">Any Enumerable method that takes either a predicate or a projection expression.  InstanceType must be an IEnumerable.</param>
            <param name="projection"></param>
            <param name="alias"></param>
            <example>
        <code lang="C#">
          <![CDATA[
public void DynamicGroupAndSum() {
  var q1 = EntityQuery.Create(typeof(Order), manager)
    .GroupBy(new ProjectionSelector("ShipCity"));

  Type groupType = q1.ElementType;

  var q2 = q1.Select(
          new ProjectionSelector(groupType, "Key", "ShipCity").Combine(
          new ProjectionSelector(groupType, "Select", new ProjectionSelector("Freight")).Dot("Sum()").WithAlias("Sum")
    ));
  var list = q2.Execute();
}          
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.ProjectionSelector.#ctor(System.String,IdeaBlade.Core.IProjectionSelector,System.String)">
            <summary>
            Create a <b>ProjectionSelector</b> from the specified method name and projection selector.
            </summary>
            <param name="methodName">Any Enumerable method that takes either a predicate or a projection expression.  InstanceType must be an IEnumerable.</param>
            <param name="projection"></param>
            <param name="alias"></param>
            <example>
        <code lang="C#">
          <![CDATA[
public void DynamicGroupAndSum() {
  var query = EntityQuery.Create(typeof(Order), manager)
    .GroupBy(new ProjectionSelector("ShipCity"))
    .Select(
          new ProjectionSelector("Key", "ShipCity").Combine(
          new ProjectionSelector("Select", new ProjectionSelector("Freight")).Dot("Sum()").WithAlias("Sum")
    ));
  var list = query.Execute();
}
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.ProjectionSelector.#ctor(IdeaBlade.Linq.MemberSelector,System.String)">
            <summary>
            Create a <b>ProjectionSelector</b> from the specified <see cref="T:IdeaBlade.Linq.MemberSelector"/>.
            </summary>
            <param name="selector"></param>
            <param name="alias"></param>
        </member>
        <member name="M:IdeaBlade.Linq.ProjectionSelector.WithAlias(System.String)">
            <summary>
            Returns a new <b>ProjectionSelector</b> with the specified alias.
            </summary>
            <param name="alias"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
public void DynamicGroupAndSum() {
  var query = EntityQuery.Create(typeof(Order), manager)
    .GroupBy(new ProjectionSelector("ShipCity"))
    .Select(
          new ProjectionSelector("Key", "ShipCity").Combine(
          new ProjectionSelector("Select", new ProjectionSelector("Freight")).Dot("Sum()").WithAlias("Sum")
    ));
  var list = query.Execute();
}
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.ProjectionSelector.Clone">
            <summary>
            Returns a clone of the current selector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ProjectionSelector.ToString">
            <summary>
            Returns a text representation of the selector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ProjectionSelector.Combine(System.Collections.Generic.IEnumerable{IdeaBlade.Core.IProjectionSelector})">
            <summary>
            Returns an <see cref="T:IdeaBlade.Linq.AnonymousProjectionSelector"/> combining this selector with the specified projection selectors.
            </summary>
            <param name="selectors"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var entityType = typeof(Customer);
var rootQuery = EntityQuery.Create(entityType, _entityManager);
var pps = ProjectionSelector.Combine(new[] 
  { new ProjectionSelector(entityType, "City", "City"), 
    new ProjectionSelector(entityType, "PostalCode", "PostalCode") 
  });

var results = rootQuery.Select(pps).Execute();          
]]>
        </code>
      </example>
        </member>
        <member name="P:IdeaBlade.Linq.ProjectionSelector.Alias">
            <summary>
            Name that this ProjectionSelector will be projected into.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.ProjectionSelector.ProjectionType">
            <summary>
            Type projected into.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.AnonymousProjectionSelector">
            <summary>
            Provides the means to dynamically construct an anonymous projection.
            </summary>
            <remarks>
            The <b>AnonymousProjectionSelector</b> is used in building a dynamic anonymous projection which contains multiple selectors.
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
 var selector = new AnonymousProjectionSelector()
   .Combine("Category.Name", "CatName")
   .Combine("Category.Description", "CatDesc"); 
 var rootQuery = EntityQuery.Create(typeof(Product), _em1); 
 var query = rootQuery.Select(selector); 
 var results = query.Execute();
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.AnonymousProjectionSelector.#ctor">
            <summary>
            Creates an instance of this type.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.AnonymousProjectionSelector.#ctor(IdeaBlade.Linq.AnonymousProjectionSelector)">
            <summary>
            Copy constructor.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:IdeaBlade.Linq.AnonymousProjectionSelector.#ctor(IdeaBlade.Core.IProjectionSelector[])">
            <summary>
            Creates an instance of this type from one or more <see cref="T:IdeaBlade.Linq.ProjectionSelector"/>s.
            </summary>
            <param name="selectors"></param>
        </member>
        <member name="M:IdeaBlade.Linq.AnonymousProjectionSelector.#ctor(System.Collections.Generic.IEnumerable{IdeaBlade.Core.IProjectionSelector})">
            <summary>
            Creates an instance of this type from a list of <see cref="T:IdeaBlade.Linq.ProjectionSelector"/>s.
            </summary>
            <param name="selectors"></param>
        </member>
        <member name="M:IdeaBlade.Linq.AnonymousProjectionSelector.ToLambdaExpression(System.Type)">
            <summary>
            Returns a <see cref="T:System.Linq.Expressions.LambdaExpression"/> representing this selector.
            </summary>
            <param name="delegateType"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.AnonymousProjectionSelector.IdeaBlade#Linq#IHasLazyInstanceType#SetInstanceType(System.Type)">
            <summary>
            
            </summary>
            <param name="instanceType"></param>
        </member>
        <member name="P:IdeaBlade.Linq.AnonymousProjectionSelector.ProjectionType">
            <summary>
            The type projected into.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.PropertyProjectionSelector">
            <summary>
            Obsolete. Provides the means to dynamically construct a "Select", 'SelectMany" or "GroupBy" projection.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.PropertyProjectionSelector.#ctor(System.Type,System.String,System.String)">
            <summary>
            Create a <b>PropertyProjectionSelector</b> for the specified type and property name.
            </summary>
            <param name="instanceType"></param>
            <param name="propertyName"></param>
            <param name="alias"></param>
            <example>
        <code lang="C#">
          <![CDATA[
    public void OrderBySample1() {
      var mgr = new DomainModelEntityManager();
      var selector = new PropertySortSelector(typeof(Customer), "Country", ListSortDirection.Descending);
      var results = mgr.Customers.OrderBySelector(selector).ToList();
    }
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PropertyProjectionSelector.#ctor(IdeaBlade.Linq.PropertyProjectionSelector)">
            <summary>
            Copy constructor.
            </summary>
            <param name="selector"></param>
        </member>
        <member name="M:IdeaBlade.Linq.PropertyProjectionSelector.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.PropertyProjectionSelector.Combine(System.Collections.Generic.IEnumerable{IdeaBlade.Linq.PropertyProjectionSelector})">
            <summary>
            Combines a collection of PropertySortSelectors. 
            </summary>
            <param name="propertyProjectionSelectors"></param>
            <remarks>
            Use the <b>Combine</b> method to chain order by / then by expressions.
            This operation clones each property selector so there are no side effects on the propertySortSelectors passed in.</remarks>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
    public void SampleCombine() {
      // Sample showing sort by Country and CompanyName properties of Customer.
      var mgr = new DomainModelEntityManager();
      var selector1 = new PropertySortSelector(typeof(Customer), "Country");
      var selector2 = new PropertySortSelector(typeof(Customer), "CompanyName");
      var combinedSelector = PropertySortSelector.Combine(new[] { selector1, selector2 });
      var results = mgr.Customers.OrderBySelector(combinedSelector).ToList();
    }
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PropertyProjectionSelector.ToLambdaExpression">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.PropertyProjectionSelector.Add(System.String,System.String)">
            <summary>
            Returns a new PropertyProjectionSelector with the additional projected property added.
            </summary>
            <param name="propertyName"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.PropertyProjectionSelector.Add(IdeaBlade.Linq.PropertyProjectionSelector)">
            <summary>
            Returns a new PropertyProjectionSelector with the additional projection selector added.
            </summary>
            <param name="propertyProjectionSelector"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.PropertyProjectionSelector.GetChainedSelectors">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.PropertyProjectionSelector.ToString">
            <summary>
            Returns a text representation of the selector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.PropertyProjectionSelector.ProjectionType">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.PropertyProjectionSelector.IsDynamicProjection">
            <summary>
            
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.PropertyProjectionSelector.Alias">
            <summary>
            Name that this property will be projected into.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.PropertySortSelector">
            <summary>
            Obsolete. Allows dynamic construction of a LINQ OrderBy or OrderByDescending expression.  Use <see cref="T:IdeaBlade.Linq.SortSelector"/> instead.
            </summary>
            <remarks>
            A PropertySortSelector is a linked list of sort criteria for use in the <see cref="M:IdeaBlade.Linq.QueryableExtensions.OrderBySelector(System.Linq.IQueryable,IdeaBlade.Core.ISortSelector)"/> extension method.
            You may combine any number of <b>PropertySortSelectors</b> to order query results.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Linq.PropertySortSelector.#ctor(System.Type,System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Create a <b>PropertySortSelector</b> for the specified type and property name.
            </summary>
            <param name="instanceType"></param>
            <param name="propertyName"></param>
            <param name="sortDirection">Sort direction.  Defaults to ascending.</param>
            <example>
        <code lang="C#">
          <![CDATA[
    public void OrderBySample1() {
      var mgr = new DomainModelEntityManager();
      var selector = new PropertySortSelector(typeof(Customer), "Country", ListSortDirection.Descending);
      var results = mgr.Customers.OrderBySelector(selector).ToList();
    }
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PropertySortSelector.Combine(System.Collections.Generic.IEnumerable{IdeaBlade.Linq.PropertySortSelector})">
            <summary>
            Combines a collection of PropertySortSelectors. 
            </summary>
            <param name="propertySortSelectors"></param>
            <remarks>
            Use the <b>Combine</b> method to chain order by / then by expressions.
            This operation clones each property selector so there are no side effects on the propertySortSelectors passed in.</remarks>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
    public void SampleCombine() {
      // Sample showing sort by Country and CompanyName properties of Customer.
      var mgr = new DomainModelEntityManager();
      var selector1 = new PropertySortSelector(typeof(Customer), "Country");
      var selector2 = new PropertySortSelector(typeof(Customer), "CompanyName");
      var combinedSelector = PropertySortSelector.Combine(new[] { selector1, selector2 });
      var results = mgr.Customers.OrderBySelector(combinedSelector).ToList();
    }
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PropertySortSelector.ThenBy(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Returns a new PropertySortSelector with the additional sort criteria to this propertySortSelector added.
            </summary>
            <param name="propertyName"></param>
            <param name="sortDirection"></param>
            <returns></returns>
            <example><code lang="C#">
          <![CDATA[
    public void ThenBySample1() {
      // Sample showing sort by Country and CompanyName properties of Customer.
      var mgr = new DomainModelEntityManager();
      var selector = new PropertySortSelector(typeof(Customer), "Country").ThenBy("CompanyName");
      var results = mgr.Customers.OrderBySelector(selector).ToList();
    }
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PropertySortSelector.ThenBy(IdeaBlade.Linq.PropertySortSelector)">
            <summary>
            Returns a new PropertySortSelector with the additional sort criteria to this propertySortSelector added.
            </summary>
            <param name="propertySortSelector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
    public void ThenBySample2() {
      // Sample showing sort by Country and CompanyName properties of Customer.
      var mgr = new DomainModelEntityManager();
      var selector1 = new PropertySortSelector(typeof(Customer), "Country");
      var selector2 = new PropertySortSelector(typeof(Customer), "CompanyName");
      var combinedSelector = selector1.ThenBy(selector2);
      var results = mgr.Customers.OrderBySelector(combinedSelector).ToList();
    }
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PropertySortSelector.ToString">
            <summary>
            Returns a text representation of the selector.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.PropertySortSelector.SortDirection">
            <summary>
            Direction is which property values should be sorted.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.QueryableExtensions">
            <summary>
            Static extensions methods providing LINQ methods to dynamically built queries.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.All(System.Linq.IQueryable,IdeaBlade.Core.IPredicateDescription)">
            <summary>
               Determines whether all the elements of a sequence satisfy a condition.
            </summary>
            <param name="source"></param>
            <param name="predicateDescription"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.Any(System.Linq.IQueryable)">
            <summary>
               Determines whether a sequence contains any elements.
            </summary>
            <param name="source"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[ 
var mgr1 = new DomainModelEntityManager();
bool any = mgr1.Customers.Any();          
          ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.Any(System.Linq.IQueryable,IdeaBlade.Core.IPredicateDescription)">
            <summary>
             Determines whether any element of a sequence satisfies a condition.
            </summary>
            <param name="source"></param>
            <param name="predicateDescription"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[  
var mgr1 = new DomainModelEntityManager();
bool any = mgr1.Customers.Any(c=> c.Country == "UK");          
          ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.Count(System.Linq.IQueryable)">
            <summary>
             Returns the number of elements in a sequence.
            </summary>
            <param name="source"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[  
var mgr1 = new DomainModelEntityManager();

var entityType = typeof(Customer);
var baseQuery = EntityQuery.Create(entityType);
var count = baseQuery.Count();          
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.Count(System.Linq.IQueryable,IdeaBlade.Core.IPredicateDescription)">
            <summary>
             Returns the number of elements in a sequence that satify a condition.
            </summary>
            <param name="source"></param>
            <param name="predicateDescription"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[  
var mgr1 = new DomainModelEntityManager();

var entityType = typeof(Customer);
var baseQuery = EntityQuery.Create(entityType);
var pd = new PredicateDescription(Customer.EntityPropertyNames.Country, FilterOperator.IsEqualTo, "UK");
var count = baseQuery.Count(pd);          
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.Distinct(System.Linq.IQueryable)">
            <summary>
            Returns distinct elements from a sequence by using the default equality comparer
            to compare values.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.Contains(System.Linq.IQueryable,System.Object)">
            <summary>
             Determines whether a sequence contains a specified element by using the default
             equality comparer.
            </summary>
            <param name="source"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.FirstOrDefault(System.Linq.IQueryable)">
            <summary>
            Returns the first element of a sequence, or the default value (usually null) if not found.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.Skip(System.Linq.IQueryable,System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the
            remaining elements.
            </summary>
            <param name="source"></param>
            <param name="count"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var entityType = typeof(Customer);
var baseQuery = EntityQuery.Create(entityType, mgr);
var pss = new SortSelector("Id");
var query = baseQuery.OrderBySelector(pss).Skip(10).Take(10);
var results = query.Execute();          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.Take(System.Linq.IQueryable,System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="source"></param>
            <param name="count"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var entityType = typeof(Customer);
var baseQuery = EntityQuery.Create(entityType, mgr);
var pss = new SortSelector("Id");
var query = baseQuery.OrderBySelector(pss).Skip(10).Take(10);
var results = query.Execute();          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.Where(System.Linq.IQueryable,IdeaBlade.Core.IPredicateDescription)">
            <summary>
            Filters a sequence of values based on a <see cref="T:IdeaBlade.Linq.PredicateDescription"/>. Loosely typed version.
            </summary>
            <param name="source"></param>
            <param name="predicateDescription"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var entityType = typeof(Customer);
var baseQuery = EntityQuery.Create(entityType, mgr);
var predicate = PredicateBuilder.Make(typeof(Customer), "Country", FilterOperator.StartsWith, "U");
var query = baseQuery.Where(predicate);
var list = query.Execute();          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.Where``1(System.Linq.IQueryable{``0},IdeaBlade.Core.IPredicateDescription)">
            <summary>
            Filters a sequence of values based on a <see cref="T:IdeaBlade.Linq.PredicateDescription"/>
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicateDescription"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
    public void WherePredicateQuery() {
      var mgr = new DomainModelEntityManager();
      var predicate = PredicateBuilder.Make(typeof(Customer), "Country", FilterOperator.StartsWith, "U");
      var query = mgr.Customers.Where(predicate);
      var list = query.ToList();
    }
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.GroupBy(System.Linq.IQueryable,IdeaBlade.Core.IProjectionSelector)">
            <summary>
            Groups the elements of a sequence according to a specified key selector projection.
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();
var entityType = typeof(Customer);
var rootQuery = EntityQuery.Create(entityType);
var ps = new ProjectionSelector("Country");

var query = rootQuery.GroupBy(ps);
var results = query.Execute();          
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.GroupBy``1(System.Linq.IQueryable{``0},IdeaBlade.Core.IProjectionSelector)">
            <summary>
            Groups the elements of a sequence according to a specified key selector projection.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();
var entityType = typeof(Customer);
var rootQuery = EntityQuery.Create(entityType);
var ps = new ProjectionSelector("Country");

var query = rootQuery.GroupBy(ps);
var results = query.Execute();          
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.GroupBy``1(System.Linq.IQueryable{``0},IdeaBlade.Core.IProjectionSelector,IdeaBlade.Core.IProjectionSelector)">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var keyPs = new ProjectionSelector("Country");
var elementPs = new ProjectionSelector("CompanyName");

var query = mgr.Customers.GroupBy(keyPs, elementPs);
var results = query.Execute();
var r0List = results.Cast<IGrouping<String, String>>().ToList();          
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.OrderBySelector(System.Linq.IQueryable,IdeaBlade.Core.ISortSelector)">
            <summary>
            Sorts the elements of a sequence according to an <see cref="T:IdeaBlade.Core.ISortSelector"/>. Sorts on multiple properties are supported.
            </summary>
            <param name="source"></param>
            <param name="sortSelector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
public void OrderBySample1() {
  var mgr = new DomainModelEntityManager();
  var selector = new SortSelector(typeof(Customer), "Country", ListSortDirection.Descending);
  var results = mgr.Customers.OrderBySelector(selector).ToList();    
}
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.OrderBySelector``1(System.Linq.IQueryable{``0},IdeaBlade.Core.ISortSelector)">
            <summary>
            Sorts the elements of a sequence according to a <see cref="T:IdeaBlade.Linq.SortSelector"/>. Sorts on multiple properties are supported.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="sortSelector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
public void OrderBySample1() {
  var mgr = new DomainModelEntityManager();
  var selector = new SortSelector(typeof(Customer), "Country", ListSortDirection.Descending);
  var results = mgr.Customers.OrderBySelector(selector).ToList();    
}
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.ThenBySelector``1(System.Linq.IOrderedQueryable{``0},IdeaBlade.Core.ISortSelector)">
            <summary>
            Sorts the elements of a sequence according to a <see cref="T:IdeaBlade.Linq.SortSelector"/>. Sorts on multiple properties are supported.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="sortSelector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
  public void ThenBySample1() {
    var mgr = new DomainModelEntityManager();
    var selector1 = new SortSelector(typeof(Customer), "Country");
    var selector2 = new SortSelector(typeof(Customer), "CompanyName");
    var results = mgr.Customers.OrderBySelector(selector1).ThenBySelector(selector2).ToList();
  }
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.Select(System.Linq.IQueryable,IdeaBlade.Core.IProjectionSelector)">
            <summary>
               Projects each element of a sequence into a new form.
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var entityType = typeof(Customer); 
var rootQuery = EntityQuery.Create(entityType, mgr);

var ps1 = new ProjectionSelector("CompanyName");
var ps2 = new ProjectionSelector("ContactName");
var pps = ps1.Combine(ps2);

var query = rootQuery.Select(pps);
var results = query.Execute();          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.Select``1(System.Linq.IQueryable{``0},IdeaBlade.Core.IProjectionSelector)">
            <summary>
               Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
 var mgr = new DomainModelEntityManager();

 var rootQuery = mgr.Customers;

 var ps1 = new ProjectionSelector("CompanyName");
 var ps2 = new ProjectionSelector("ContactName");
 var pps = ps1.Combine(ps2);

 var query = rootQuery.Select(pps);
 var results = query.Execute();          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.SelectMany(System.Linq.IQueryable,IdeaBlade.Core.IProjectionSelector)">
            <summary>
                Projects each element of a sequence to an System.Collections.Generic.IQueryable{T}
                and combines the resulting sequences into one sequence.
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var entityType = typeof(Customer);
var baseQuery = EntityQuery.Create(entityType, mgr);
var query = baseQuery.Take(2).SelectMany(new ProjectionSelector("OrderSummaries"));
var results = query.Execute();          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.SelectMany``1(System.Linq.IQueryable{``0},IdeaBlade.Core.IProjectionSelector)">
            <summary>
                Projects each element of a sequence to an System.Collections.Generic.IQueryable{T}
                and combines the resulting sequences into one sequence.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
 var mgr = new DomainModelEntityManager();

 var baseQuery = mgr.Customers;
 var query = baseQuery.Take(2).SelectMany(new ProjectionSelector("OrderSummaries"));
 var results = query.Execute();          
              ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.OrderBySingleSelector``1(System.Linq.IQueryable{``0},IdeaBlade.Linq.SortSelector)">
            <summary>
            Sorts the elements of a sequence according to an <see cref="T:IdeaBlade.Linq.PropertySortSelector"/>.
            </summary>
            <remarks>Ascending or descending order is handled by the propertySortSelector </remarks>
        </member>
        <member name="M:IdeaBlade.Linq.QueryableExtensions.BuildIQueryableFunc``4(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Type,``2,``3)">
            <summary>
            Converts an IQueryable and a method prototype into a strongly typed call to that method.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.IPredicateExpressionBuilder">
            <summary>
            Interface used by dynamic predicates to allow a LINQ expression to be built from parameters. 
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.IPredicateExpressionBuilder.Build(System.Linq.Expressions.ParameterExpression)">
            <summary>
            
            </summary>
            <param name="parameterExpr"></param>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Linq.PredicateDescription">
            <summary>
            Represents a dynamically built predicate.
            </summary>
            <remarks>
            Use either the constructor or <see cref="M:IdeaBlade.Linq.PredicateBuilder.Make(System.Type,System.String,IdeaBlade.Linq.FilterOperator,System.Object)"/> to
            create a <b>PredicateDescription</b>.  You can combine predicates using 
            the <see cref="M:IdeaBlade.Linq.PredicateBuilder.And(IdeaBlade.Core.IPredicateDescription[])">And</see> and 
            <see cref="M:IdeaBlade.Linq.PredicateBuilder.Or(IdeaBlade.Core.IPredicateDescription[])">Or</see> methods of the <see cref="T:IdeaBlade.Linq.PredicateBuilder"/>.
            You can build a filtered query using <see cref="M:IdeaBlade.Linq.PredicateBuilder.FilterQuery(System.Linq.IQueryable,IdeaBlade.Core.IPredicateDescription)"/>
            or create a lambda expression from the predicate using <see cref="M:IdeaBlade.Linq.PredicateDescription.ToLambdaExpression"/>.
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
    public void PredicateBuilderMake() {
      var mgr = new DomainModelEntityManager();

      var expr1 = PredicateBuilder.Make(typeof(Product), "UnitPrice", FilterOperator.IsLessThanOrEqualTo, 10);
      var expr2 = PredicateBuilder.Make(typeof(Product), "Discontinued", FilterOperator.IsEqualTo, false);

      var results = mgr.Products.Where(expr1.And(expr2)).ToList();
    }
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateDescription.#ctor(System.Type,System.String,IdeaBlade.Linq.FilterOperator,System.Object,System.Boolean)">
            <summary>
            Create a new instance of this class.
            </summary>
            <param name="instanceType">The type of object to be queried</param>
            <param name="propertyPath">The property name to use in the filter</param>
            <param name="filterOp">The filter operator</param>
            <param name="value">The filter value</param>
            <param name="ignoreCase">Whether string comparisons are case sensitive</param>
            <exception cref="T:System.Exception">Unable to locate property 'x' on type 'y'</exception>
            <exception cref="T:System.InvalidCastException">Unable to convert value to type 'x'</exception>
            <exception cref="T:System.InvalidOperationException">This operator can only operate on properties of type 'string'</exception>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var entityType = typeof(Customer);
var rootQuery = EntityQuery.Create(entityType, mgr);
// Two predicates - one a simple property, one a method
var pd1 = new PredicateDescription(entityType, "OrderSummaries.Count()", FilterOperator.IsGreaterThan, 10);
var pd2 = new PredicateDescription(entityType, "Country", FilterOperator.IsEqualTo, "USA");

var query = rootQuery.Where(pd1.And(pd2));
var results = query.Execute();                   

       ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateDescription.#ctor(System.String,IdeaBlade.Linq.FilterOperator,System.Object,System.Boolean)">
            <summary>
            Create a new instance of this class.
            </summary>
            <param name="propertyPath">The property name to use in the filter</param>
            <param name="filterOp">The filter operator</param>
            <param name="value">The filter value</param>
            <param name="ignoreCase">Whether string comparisons are case sensitive</param>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var entityType = typeof(Customer);
var rootQuery = EntityQuery.Create(entityType, mgr);
// Two predicates - one a simple property, one a method
var pd1 = new PredicateDescription("OrderSummaries.Count()", FilterOperator.IsGreaterThan, 10);
var pd2 = new PredicateDescription("Country", FilterOperator.IsEqualTo, "USA");

var query = rootQuery.Where(pd1.And(pd2));
var results = query.Execute();          
       ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateDescription.#ctor(IdeaBlade.Linq.ProjectionSelector,IdeaBlade.Linq.FilterOperator,System.Object,System.Boolean)">
            <summary>
            Create a new instance of this class.
            </summary>
            <param name="projectionSelector"></param>
            <param name="filterOp">The filter operator</param>
            <param name="value">The filter value</param>
            <param name="ignoreCase">Whether string comparisons are case sensitive</param>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateDescription.#ctor(System.Type,System.String,IdeaBlade.Core.IPredicateDescription,IdeaBlade.Linq.FilterOperator,System.Object,System.Boolean)">
            <summary>
            Create a new instance of this class.
            </summary>
            <param name="instanceType">The type of object to be queried</param>
            <param name="methodName">Any Enumerable method that takes either a predicate or a projection expression.  InstanceType must be an IEnumerable.</param>
            <param name="predicate"></param>
            <param name="filterOp">The filter operator</param>
            <param name="value">The filter value</param>
            <param name="ignoreCase">Whether string comparisons are case sensitive</param>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateDescription.#ctor(System.String,IdeaBlade.Core.IPredicateDescription,IdeaBlade.Linq.FilterOperator,System.Object,System.Boolean)">
            <summary>
            Create a new instance of this class.
            </summary>
            <param name="methodName">Any Enumerable method that takes either a predicate or a projection expression.  InstanceType must be an IEnumerable.</param>
            <param name="predicate"></param>
            <param name="filterOp">The filter operator</param>
            <param name="value">The filter value</param>
            <param name="ignoreCase">Whether string comparisons are case sensitive</param>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateDescription.#ctor(System.Type,System.String,IdeaBlade.Core.IProjectionSelector,IdeaBlade.Linq.FilterOperator,System.Object,System.Boolean)">
            <summary>
            Create a new instance of this class.
            </summary>
            <param name="instanceType"></param>
            <param name="methodName">Any Enumerable method that takes either a predicate or a projection expression.  InstanceType must be an IEnumerable.</param>
            <param name="projection"></param>
            <param name="filterOp">The filter operator</param>
            <param name="value">The filter value</param>
            <param name="ignoreCase">Whether string comparisons are case sensitive</param>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateDescription.#ctor(System.String,IdeaBlade.Core.IProjectionSelector,IdeaBlade.Linq.FilterOperator,System.Object,System.Boolean)">
            <summary>
            Create a new instance of this class.
            </summary>
            <param name="methodName">Any Enumerable method that takes either a predicate or a projection expression.  InstanceType must be an IEnumerable.</param>
            <param name="projection"></param>
            <param name="filterOp">The filter operator</param>
            <param name="value">The filter value</param>
            <param name="ignoreCase">Whether string comparisons are case sensitive</param>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateDescription.#ctor(IdeaBlade.Linq.PredicateDescription)">
            <summary>
            Copy constructor.
            </summary>
            <param name="predicateDescription"></param>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateDescription.ToLambdaExpression">
            <summary>
            Returns a <see cref="T:System.Linq.Expressions.LambdaExpression"/> representing this predicate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateDescription.CreateUnboundCopy">
            <summary>
            Returns a clone of this predicate description with a null instance type - used by ToPredicate{T}
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateDescription.ToString">
            <summary>
            Returns a string representation of the LambdaExpression for the predicate.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.PredicateDescription.InstanceType">
            <summary>
            Type of object on which the predicate is defined.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.PredicateDescription.MemberSelector">
            <summary>
            Represents the member references by the predicate.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.PredicateDescription.FilterOperator">
            <summary>
            The filter operator.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.PredicateDescription.Value">
            <summary>
            The filter value.
            </summary>
            <exception cref="T:System.InvalidCastException">Unable to convert value to type 'x'</exception>
        </member>
        <member name="P:IdeaBlade.Linq.PredicateDescription.IgnoreCase">
            <summary>
            Whether string comparisions are case sensitive.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.CompositePredicateDescription">
            <summary>
            Represents the conditional And/Or of two dynamically built predicate clauses.
            </summary>
            <remarks>
            A <b>CompositePredicateDescription</b> is returned when using the <see cref="M:IdeaBlade.Linq.DynamicQueryExtensions.And(IdeaBlade.Core.IPredicateDescription,IdeaBlade.Core.IPredicateDescription)"/>
            or <see cref="M:IdeaBlade.Linq.DynamicQueryExtensions.Or(IdeaBlade.Core.IPredicateDescription,IdeaBlade.Core.IPredicateDescription)"/> methods, or by similar methods on the <see cref="T:IdeaBlade.Linq.PredicateBuilder"/>.
            You can build a filtered query using <see cref="M:IdeaBlade.Linq.PredicateBuilder.FilterQuery(System.Linq.IQueryable,IdeaBlade.Core.IPredicateDescription)"/>
            or create a lambda expression from the predicate using <see cref="M:IdeaBlade.Linq.CompositePredicateDescription.ToLambdaExpression"/>.
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
    public void PredicateBuilderMake() {
      var mgr = new DomainModelEntityManager();

      var expr1 = PredicateBuilder.Make(typeof(Product), "UnitPrice", FilterOperator.IsLessThanOrEqualTo, 10);
      var expr2 = PredicateBuilder.Make(typeof(Product), "Discontinued", FilterOperator.IsEqualTo, false);

      var results = mgr.Products.Where(expr1.And(expr2)).ToList();
    }
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.CompositePredicateDescription.IdeaBlade#Linq#IHasLazyInstanceType#SetInstanceType(System.Type)">
            <summary>
            
            </summary>
            <param name="instanceType"></param>
        </member>
        <member name="M:IdeaBlade.Linq.CompositePredicateDescription.ToLambdaExpression">
            <summary>
            Returns a <see cref="T:System.Linq.Expressions.LambdaExpression"/> for the predicate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.CompositePredicateDescription.CreateUnboundCopy">
            <summary>
            Returns a clone of this predicate description with a null instance type - used by ToPredicate{T}
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.CompositePredicateDescription.IdeaBlade#Linq#IPredicateExpressionBuilder#Build(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Returns an <see cref="T:System.Linq.Expressions.Expression"/> representing the CompositePredicateDescription.
            </summary>
            <param name="parmExpr"></param>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.CompositePredicateDescription.InstanceType">
            <summary>
            The type the predicate acts upon.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.FilterOperator">
            <summary>
            Represents the filter operator in a <see cref="T:IdeaBlade.Linq.PredicateDescription"/>.
            </summary>
            <remarks>
            <see cref="F:IdeaBlade.Linq.FilterOperator.StartsWith"/>, <see cref="F:IdeaBlade.Linq.FilterOperator.EndsWith"/> and <see cref="F:IdeaBlade.Linq.FilterOperator.Contains"/> may
            only be used with string operands.
            </remarks>
        </member>
        <member name="F:IdeaBlade.Linq.FilterOperator.IsLessThan">
            <summary>"Less than" numeric comparison.</summary>
        </member>
        <member name="F:IdeaBlade.Linq.FilterOperator.IsLessThanOrEqualTo">
            <summary>"Less than or equal" numeric comparison.</summary>
        </member>
        <member name="F:IdeaBlade.Linq.FilterOperator.IsEqualTo">
            <summary>Equality comparison.</summary>
        </member>
        <member name="F:IdeaBlade.Linq.FilterOperator.IsNotEqualTo">
            <summary>Inequality comparison.</summary>
        </member>
        <member name="F:IdeaBlade.Linq.FilterOperator.IsGreaterThanOrEqualTo">
            <summary>"Greater than or equal" numeric comparison.</summary>
        </member>
        <member name="F:IdeaBlade.Linq.FilterOperator.IsGreaterThan">
            <summary>"Greater than" numeric comparison.</summary>
        </member>
        <member name="F:IdeaBlade.Linq.FilterOperator.StartsWith">
            <summary>Whether the beginning of a string matches a specified string.</summary>
        </member>
        <member name="F:IdeaBlade.Linq.FilterOperator.EndsWith">
            <summary>Whether the ending of a string matches a specified string.</summary>
        </member>
        <member name="F:IdeaBlade.Linq.FilterOperator.Contains">
            <summary>Whether the specified string occurs within this string.</summary>
        </member>
        <member name="F:IdeaBlade.Linq.FilterOperator.InList">
            <summary>Whether the value is within the specified list.</summary>
        </member>
        <member name="F:IdeaBlade.Linq.FilterOperator.Any">
            <summary>Whether any of the values satisfies the specified predicate.</summary>
        </member>
        <member name="F:IdeaBlade.Linq.FilterOperator.All">
            <summary>Whether all of the values satisfies the specified predicate.</summary>
        </member>
        <member name="T:IdeaBlade.Linq.PredicateBuilder">
            <summary>
            Contains helper and extension methods to dynamically compose expression predicates.
            </summary>
            <remarks>
            Use the <b>PredicateBuilder</b> to dynamically build query filtering criteria.  
            </remarks>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateBuilder.Make(System.Type,System.String,IdeaBlade.Linq.FilterOperator,System.Object)">
            <summary>
            Return a <see cref="T:IdeaBlade.Linq.PredicateDescription"/> from the filter information provided.
            </summary>
            <param name="type">The type of object to be queried</param>
            <param name="propertyName">The property name to use in the filter</param>
            <param name="filterOp">the filter operator</param>
            <param name="value">The filter value</param>
            <returns></returns>
            <remarks>
            Use <b>Make</b> to build a dynamic predicate.  
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
    public void PredicateBuilderMake() {
      var mgr = new DomainModelEntityManager();

      var expr1 = PredicateBuilder.Make(typeof(Product), "UnitPrice", FilterOperator.IsLessThanOrEqualTo, 10);
      var expr2 = PredicateBuilder.Make(typeof(Product), "Discontinued", FilterOperator.IsEqualTo, false);

      var results = mgr.Products.Where(expr1.And(expr2)).ToList();
    }
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateBuilder.Make(System.String,IdeaBlade.Linq.FilterOperator,System.Object)">
            <summary>
            Return a <see cref="T:IdeaBlade.Linq.PredicateDescription"/> from the filter information provided.
            </summary>  
            <param name="propertyName">The property name to use in the filter</param>
            <param name="filterOp">the filter operator</param>
            <param name="value">The filter value</param>
            <returns></returns>
            <remarks>
            Use <b>Make</b> to build a dynamic predicate.  
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
    public void PredicateBuilderMake() {
      var mgr = new DomainModelEntityManager();

      var expr1 = PredicateBuilder.Make(typeof(Product), "UnitPrice", FilterOperator.IsLessThanOrEqualTo, 10);
      var expr2 = PredicateBuilder.Make(typeof(Product), "Discontinued", FilterOperator.IsEqualTo, false);

      var results = mgr.Products.Where(expr1.And(expr2)).ToList();
    }
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateBuilder.FilterQuery(System.Linq.IQueryable,IdeaBlade.Core.IPredicateDescription)">
            <summary>
            Build a filtered query from the base query and predicate description(s) provided.
            </summary>
            <param name="baseQuery">The query to be appended to</param>
            <param name="predicateDescription">A <see cref="T:IdeaBlade.Linq.PredicateDescription"/> or <see cref="T:IdeaBlade.Linq.CompositePredicateDescription"/>
            containing dynamic filter criteria.
            </param>
            <returns>A new query</returns>
            <remarks>
            Use <b>FilterQuery</b> to create a new query using dynamic filter criteria.
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
    public void PredicateBuilderFilterQuery() {
      var mgr = new DomainModelEntityManager();

      var expr1 = PredicateBuilder.Make(typeof(Product), "UnitPrice", FilterOperator.IsLessThanOrEqualTo, 10);
      var expr2 = PredicateBuilder.Make(typeof(Product), "Discontinued", FilterOperator.IsEqualTo, false);

      var query = PredicateBuilder.FilterQuery(mgr.Products, expr1.And(expr2)) as IEntityQuery<Product>;
      var results = query.ToList();
    }
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateBuilder.And(IdeaBlade.Core.IPredicateDescription[])">
            <summary>
            Returns a <see cref="T:IdeaBlade.Linq.CompositePredicateDescription"/> which represents a conditional AND operation.
            </summary>
            <param name="predicateDescriptions"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
    public void AndQuery() {
      var mgr = new DomainModelEntityManager();

      var expr1 = new PredicateDescription(typeof(Customer), "Country", FilterOperator.IsEqualTo, "Mexico");
      var expr2 = new PredicateDescription(typeof(Customer), "CompanyName", FilterOperator.StartsWith, "A");

      // Where companyname starts with A and country = mexico
      var finalcrit = PredicateBuilder.And(expr1, expr2);
      var query = mgr.Customers.Where(finalcrit);
      var list = query.ToList();
    }
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateBuilder.Or(IdeaBlade.Core.IPredicateDescription[])">
            <summary>
            Returns a <see cref="T:IdeaBlade.Linq.CompositePredicateDescription"/> which represents a conditional OR operation.
            </summary>
            <param name="predicateDescriptions"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();

var expr1 = new PredicateDescription(typeof(Customer), "Country", FilterOperator.IsEqualTo, "Mexico");
var expr2 = new PredicateDescription(typeof(Customer), "CompanyName", FilterOperator.StartsWith, "A");

// Where companyname starts with A or country = mexico
var finalcrit = PredicateBuilder.Or(expr1, expr2);
var query = mgr.Customers.Where(finalcrit);
var list = query.ToList();
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateBuilder.Make``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns the expression provided.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
    public void PredicateBuilderMake2() {
      var mgr = new DomainModelEntityManager();

      var expr1 = PredicateBuilder.Make<Customer>(c => c.Country.Equals("Mexico"));
      var results = mgr.Customers.Where(expr1).ToList();
    }
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateBuilder.True``1">
            <summary>
            Returns an expression evaluating to true.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <remarks>
            Can be used as the base expression when building a dynamic predicate containing an unknown number of expressions.
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
private void GetProducts(bool checkDiscontinued, bool checkLevel) {
  var predicate = PredicateBuilder.True<Product>();
  if (checkDiscontinued) predicate = predicate.And(p => p.Discontinued == false);
  if (checkLevel) predicate = predicate.And(p => p.ReorderLevel < 10);

  var query = mgr.Products.Where(predicate);
  var list = query.ToList();
}          
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateBuilder.False``1">
            <summary>
            Returns an expression evaluating to false.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <remarks>
            Can be used as the base expression when building a dynamic predicate containing an unknown number of expressions.
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
var mgr = new DomainModelEntityManager();          
var predicate = PredicateBuilder.False<Product>();

foreach (string category in new string[] { "Meat", "Dairy", "Grains" }) {
  string temp = category;
  predicate = predicate.Or(p => p.Category.Name.StartsWith(temp));
}

var query = mgr.Products.Where(predicate);
var list = query.ToList();
]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns an expression which represents a conditional AND operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">First operand</param>
            <param name="right">Second operation</param>
            <returns></returns>
            <remarks>
            The resulting expression is an "AndAlso" binary expression, where the second operand will be evaluated
            only if the first operand is true.
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
    public void AndQuery() {
      var mgr = new DomainModelEntityManager();
      Expression<Func<Customer, bool>> crit1 = c => c.Country.Equals("Mexico");
      Expression<Func<Customer, bool>> crit2 = c => c.CompanyName.StartsWith("A");

      // Where companyname starts with A and country = mexico
      var finalcrit = crit1.And(crit2);
      var query = mgr.Customers.Where(finalcrit);
      var list = query.ToList();
    }          
       ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns an expression which represents a conditional OR operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns></returns>
            <remarks>
            The resulting expression is an "OrElse" binary expression, where the second operand will be evaluated
            only if the first operand is true.
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
    public void OrQuery() {
      var mgr = new DomainModelEntityManager();
      Expression<Func<Customer, bool>> crit1 = c => c.Country.Equals("Mexico");
      Expression<Func<Customer, bool>> crit2 = c => c.CompanyName.StartsWith("A");

      // Where companyname starts with A or country = mexico
      var finalcrit = crit1.Or(crit2);
      var query = mgr.Customers.Where(finalcrit);
      var list = query.ToList();
    }    
       ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Returns an expression which represents a conditional AND operation of the specified operands.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expressions">Expressions to be AND'ed</param>
            <returns></returns>
            <remarks>
            The resulting expression is an "AndAlso" binary expression of all operands provided.
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
    public void AndQuery() {
      var mgr = new DomainModelEntityManager();
      Expression<Func<Customer, bool>> crit1 = c => c.Country.Equals("Mexico");
      Expression<Func<Customer, bool>> crit2 = c => c.CompanyName.StartsWith("A");
      Expression<Func<Customer, bool>> crit3 = c => c.City.StartsWith("M");

      // 'and' all criteria.
      var finalcrit = PredicateBuilder.And(crit1, crit2, crit3);
      var results = mgr.Customers.Where(finalcrit).ToList();
    }          
       ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Returns an expression which represents a conditional OR operation of the specified operands.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expressions">Expressions to be OR'ed</param>
            <returns></returns>
            <remarks>
            The resulting expression is an "OrElse" binary expression of all operands provided.
            </remarks>
            <example>
        <code lang="C#">
          <![CDATA[
    public void OrQuery2() {
      var mgr = new DomainModelEntityManager();
      Expression<Func<Customer, bool>> crit1 = c => c.Country.Equals("Mexico");
      Expression<Func<Customer, bool>> crit2 = c => c.CompanyName.StartsWith("A");
      Expression<Func<Customer, bool>> crit3 = c => c.City.StartsWith("M");

      // 'or' all criteria.
      var finalcrit = PredicateBuilder.Or(crit1, crit2, crit3);
      var results = mgr.Customers.Where(finalcrit).ToList();
    }         
    ]]>
        </code>
      </example>
        </member>
        <member name="M:IdeaBlade.Linq.PredicateBuilder.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a NOT'd version of the specified expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr"></param>
            <returns></returns>
            <example>
        <code lang="C#">
          <![CDATA[
 public void NotQuery() {
   var mgr = new DomainModelEntityManager();
   Expression<Func<Customer, bool>> crit1 = c => c.Country.Equals("Mexico");
   var finalcrit = PredicateBuilder.Not(crit1);
   var results = mgr.Customers.Where(finalcrit).ToList();
 }                   
    ]]>
        </code>
      </example>
        </member>
        <member name="T:IdeaBlade.Linq.TransformExpressionVisitor">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Linq.ExpressionVisitor">
            <summary>
            Base expression visitor implementation.
            </summary>
            <remarks>
            This class simply walks an <see cref="T:System.Linq.Expressions.Expression"/> tree without modifying it, but can be used
            as the base class for more complex visitors.  You can also use the static <see cref="M:IdeaBlade.Linq.ExpressionVisitor.GetLog(System.Linq.Expressions.Expression)"/>
            method to return a string representation of an Expression tree for debugging purposes.
            </remarks>
            <returns></returns>
            <!-- No matching elements were found for the following include tag --><include file="ExpressionVisitor.Examples.xml" path="//Class[@name=&quot;ExpressionVisitor&quot;]/method[@name=&quot;ctor&quot;]/*"/>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.#ctor">
            <summary>
            Constructs an instance of this class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.GetLog(System.Linq.Expressions.Expression)">
            <summary>
            Retrieve the string representation of the specified Expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visit the Expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitExpression(System.Linq.Expressions.Expression)">
            <summary>
            Visit the Expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visit the MemberBinding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitExpressionCore(System.Linq.Expressions.Expression)">
            <summary>
            Core implementation to visit the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Visit the BinaryExpression - the base implementation simply returns the expression passed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression,System.Linq.Expressions.Expression)">
            <summary>
            Visit the TypeBinaryExpression - the base implementation simply returns the expression passed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression,System.Linq.Expressions.Expression)">
            <summary>
            Visit the UnaryExpression - the base implementation simply returns the expression passed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visit the ParameterExpression - the base implementation simply returns the expression passed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visit the ConstantExpression - the base implementation simply returns the expression passed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Visit the NewArrayExpression - the base implementation simply returns the expression passed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Visit the NewExpression - the base implementation simply returns the expression passed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Visit the LambdaExpression - the base implementation simply returns the expression passed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitCall(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Visit the MethodCallExpression - the base implementation simply returns the expression passed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
            <summary>
            Visit the MemberInitExpression - the base implementation simply returns the expression passed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression)">
            <summary>
            Visit the MemberExpression - the base implementation simply returns the expression passed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
            <summary>
            Visit the ListInitExpression - the base implementation simply returns the expression passed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Visit the ConditionalExpression - the base implementation simply returns the expression passed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitBindingCore(System.Linq.Expressions.MemberBinding)">
            <summary>
            Core implementation to visit the binding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitBindingAssignment(System.Linq.Expressions.MemberAssignment,System.Linq.Expressions.Expression)">
            <summary>
            Visit the MemberAssignment - the base implementation simply returns the binding passed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitBindingListBinding(System.Linq.Expressions.MemberListBinding,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
            <summary>
            Visit the MemberListBinding - the base implementation simply returns the binding passed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitBindingMemberBinding(System.Linq.Expressions.MemberMemberBinding,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
            <summary>
            Visit the MemberMemberBinding - the base implementation simply returns the binding passed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitInitializer(System.Linq.Expressions.ElementInit,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Visit the ElementInit - the base implementation simply returns the initializer passed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitExpressions(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Visit all expressions in the specified list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitExpressions(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Visit all parameter expressions in the specified list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitBindings(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
            <summary>
            Visit all bindings in the specified list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.VisitInitializers(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
            <summary>
            Visit all initializers in the specified list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.ShowExpression(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Logs debugging information for the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionVisitor.ShowBinding(System.Linq.Expressions.MemberBinding,System.Boolean)">
            <summary>
            Logs debugging information for the binding.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.ExpressionVisitor.Debugging">
            <summary>
            To turn logging on or off.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.ExpressionVisitor.Depth">
            <summary>
            Gets the current depth in the expression tree.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.ExpressionVisitor.LogBefore">
            <summary>
            Whether to capture debugging information for an expression prior to visiting it.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.ExpressionVisitor.LogAfter">
            <summary>
            Whether to capture debugging information for an expression after visiting it.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.ExpressionVisitor.LoggingEnabled">
            <summary>
            Returns whether logging has been enabled.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.ExpressionVisitor.Log">
            <summary>
            Gets the string representation of the Expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.#ctor">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.VisitExpressionCore(System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.VisitBindingCore(System.Linq.Expressions.MemberBinding)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression,System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression,System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.VisitCall(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.VisitBindingMemberBinding(System.Linq.Expressions.MemberMemberBinding,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.VisitBindingListBinding(System.Linq.Expressions.MemberListBinding,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.VisitBindingAssignment(System.Linq.Expressions.MemberAssignment,System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TransformExpressionVisitor.VisitInitializer(System.Linq.Expressions.ElementInit,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.TransformExpressionVisitor.TypeTranslator">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.TransformExpressionVisitor.ExpressionMap">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.TransformExpressionVisitor.BindingMap">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Core.TypeTranslator">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Core.TypeTranslator.#ctor">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Core.TypeTranslator.InitializeMappings(System.Collections.Generic.Dictionary{System.Type,System.Type})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Core.TypeTranslator.AddMapping(System.Type,System.Type)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Core.TypeTranslator.RemoveMapping(System.Type)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Core.TypeTranslator.ContainsType(System.Type)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Core.TypeTranslator.TranslateTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Core.TypeTranslator.TranslateType(System.Type)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Core.TypeTranslator.TranslateConstructor(System.Reflection.ConstructorInfo,System.Type[])">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Core.TypeTranslator.TranslateMethod(System.Type,System.Reflection.MethodInfo)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Core.TypeTranslator.TranslateMember(System.Type,System.Reflection.MemberInfo)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Linq.IConstructorInfoWrapper">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.ExpressionBlock">
            <summary>
            This class is for internal use only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.AbstractBlock">
            <summary>
            Internal user only - Base class for serializable expression and binding "block" classes.
            </summary>
            <remarks>
            Contains the dictionary of <b>AbstractBlock</b> to <see cref="T:System.Linq.Expressions.Expression"/> mappings used 
            when serializating and deserializing an expression tree.
            The <see cref="T:IdeaBlade.Linq.SerializingExpressionVisitor"/> constructs the dictionary prior to 
            visiting the expression tree.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Linq.AbstractBlock.#ctor(IdeaBlade.Linq.SerializedExpression,System.Object)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.AbstractBlock.GetCachedItem">
            <summary>
            Returns the object mapped to this <b>AbstractBlock</b>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.AbstractBlock.SetCachedItem(System.Object)">
            <summary>
            Sets the object mapped to this <b>AbstractBlock</b>.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:IdeaBlade.Linq.AbstractBlock.TranslateType(System.Type)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.AbstractBlock.TranslateType(System.Type,IdeaBlade.Core.DynamicTypeInfo@)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.AbstractBlock.TranslateConstructor(System.Reflection.ConstructorInfo)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.AbstractBlock.TranslateMethod(System.Reflection.MethodInfo)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.AbstractBlock.TranslateMember(System.Reflection.MemberInfo)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.AbstractBlock.GetHashCode">
            <summary>
            Returns a hash code for the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.AbstractBlock.Context">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.AbstractBlock.WasTranslated">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.AbstractBlock.InternalHashCode">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionBlock.#ctor(IdeaBlade.Linq.SerializedExpression,System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionBlock.ToExpression">
            <summary>
            Returns an <see cref="T:System.Linq.Expressions.Expression"/> for the <b>ExpressionBlock</b>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionBlock.GetExpression(System.Func{System.Linq.Expressions.Expression})">
            <summary>
            Returns the <see cref="T:System.Linq.Expressions.Expression"/> mapped to this <b>ExpressionBlock</b>.
            </summary>
            <param name="buildExpression">Delegate to a method returning an <see cref="T:System.Linq.Expressions.Expression"/></param>
            <returns></returns>
            <remarks>
            Returns the cached <see cref="T:System.Linq.Expressions.Expression"/> if found in the map for this <b>ExpressionBlock</b>; otherwise 
            returns the <see cref="T:System.Linq.Expressions.Expression"/> returned by <paramref name="buildExpression"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionBlock.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionBlock.GetHashCode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.ExpressionBlock.WasTranslated">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.ExpressionBlock.OriginalExpression">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.ExpressionBlock.TranslatedExpression">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.BinaryExpressionBlock">
            <summary>
            This class is for internal use only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.MethodExpressionBlock">
            <summary>
            This class is for internal use only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.MethodExpressionBlock.#ctor(IdeaBlade.Linq.SerializedExpression,System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.BinaryExpressionBlock.ToExpression">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.BinaryExpressionBlock.Equals(System.Object)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.BinaryExpressionBlock.GetHashCode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.BinaryExpressionBlock.IsLiftedToNull">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.BinaryExpressionBlock.LeftBlock">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.BinaryExpressionBlock.RightBlock">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Linq.TypeBinaryExpressionBlock">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.TypeBinaryExpressionBlock.ToExpression">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.TypeBinaryExpressionBlock.Equals(System.Object)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.TypeBinaryExpressionBlock.GetHashCode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.TypeBinaryExpressionBlock.ExpressionBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.UnaryExpressionBlock">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.UnaryExpressionBlock.ToExpression">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.UnaryExpressionBlock.Equals(System.Object)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.UnaryExpressionBlock.GetHashCode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.UnaryExpressionBlock.OperandBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.ParameterExpressionBlock">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ParameterExpressionBlock.ToExpression">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.ParameterExpressionBlock.Equals(System.Object)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.ParameterExpressionBlock.GetHashCode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.ParameterExpressionBlock.Name">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.ConstantExpressionBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.ConstantExpressionBlock.ToExpression">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.ConstantExpressionBlock.Equals(System.Object)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.ConstantExpressionBlock.GetHashCode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.ConstantExpressionBlock.Value">
            <summary>
            For internal use only.  Note value must be a primitive or known type.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.NewArrayExpressionBlock">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.NewArrayExpressionBlock.ToExpression">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.NewArrayExpressionBlock.Equals(System.Object)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.NewArrayExpressionBlock.GetHashCode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.NewArrayExpressionBlock.ExpressionBlocks">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.NewExpressionBlock">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.NewExpressionBlock.ToExpression">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.NewExpressionBlock.Equals(System.Object)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.NewExpressionBlock.GetHashCode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.NewExpressionBlock.Constructor">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.NewExpressionBlock.ExpressionBlocks">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.LambdaExpressionBlock">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.LambdaExpressionBlock.ToExpression">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.LambdaExpressionBlock.Equals(System.Object)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.LambdaExpressionBlock.GetHashCode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.LambdaExpressionBlock.BodyBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.LambdaExpressionBlock.ParameterBlocks">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.MethodCallExpressionBlock">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.MethodCallExpressionBlock.ToExpression">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.MethodCallExpressionBlock.Equals(System.Object)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.MethodCallExpressionBlock.GetHashCode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.MethodCallExpressionBlock.Method">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.MethodCallExpressionBlock.ArgumentBlocks">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.MethodCallExpressionBlock.ObjectBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.MemberInitExpressionBlock">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.MemberInitExpressionBlock.ToExpression">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.MemberInitExpressionBlock.Equals(System.Object)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.MemberInitExpressionBlock.GetHashCode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.MemberInitExpressionBlock.BindingBlocks">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.MemberInitExpressionBlock.NewExpressionBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.MemberExpressionBlock">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.MemberExpressionBlock.ToExpression">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.MemberExpressionBlock.Equals(System.Object)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.MemberExpressionBlock.GetHashCode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.MemberExpressionBlock.ExpressionBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.MemberExpressionBlock.Member">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.ListInitExpressionBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.ListInitExpressionBlock.ToExpression">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.ListInitExpressionBlock.Equals(System.Object)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.ListInitExpressionBlock.GetHashCode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.ListInitExpressionBlock.InitializerBlocks">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.ListInitExpressionBlock.NewExpressionBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.ConditionalExpressionBlock">
            <summary>
            This class is for internal use only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.ConditionalExpressionBlock.ToExpression">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ConditionalExpressionBlock.Equals(System.Object)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ConditionalExpressionBlock.GetHashCode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.ConditionalExpressionBlock.TestBlock">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.ConditionalExpressionBlock.IfTrueBlock">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.ConditionalExpressionBlock.IfFalseBlock">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Linq.InitializerBlock">
            <summary>
            This class is for internal use only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.InitializerBlock.ToInitializer">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.InitializerBlock.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.InitializerBlock.GetHashCode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.InitializerBlock.OriginalInitializer">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.InitializerBlock.TranslatedInitializer">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.InitializerBlock.AddMethod">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.InitializerBlock.WasTranslated">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.InitializerBlock.ArgumentBlocks">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.MemberMemberBindingBlock">
            <summary>
            This class is for internal use only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.MemberBindingBlock">
            <summary>
            This class is for internal use only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.MemberBindingBlock.#ctor(IdeaBlade.Linq.SerializedExpression,System.Linq.Expressions.MemberBinding)">
            <summary>
            Constructs an instance of this class from a <see cref="T:System.Linq.Expressions.MemberBinding"/>.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.MemberBindingBlock.ToBinding">
            <summary>
            Returns a <see cref="T:System.Linq.Expressions.MemberBinding"/> for the <b>MemberBindingBlock</b>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.MemberBindingBlock.GetBinding(System.Func{System.Linq.Expressions.MemberBinding})">
            <summary>
            Returns the <see cref="T:System.Linq.Expressions.MemberBinding"/> mapped to this <b>MemberBindingBlock</b>.
            </summary>
            <param name="buildBinding">Delegate to a method returning a <see cref="T:System.Linq.Expressions.MemberBinding"/></param>
            <returns></returns>
            <remarks>
            Returns the cached <see cref="T:System.Linq.Expressions.MemberBinding"/> if found in the map for this <b>MemberBindingBlock</b>; otherwise 
            returns the <see cref="T:System.Linq.Expressions.MemberBinding"/> returned by <paramref name="buildBinding"/>.
            </remarks>
        </member>
        <member name="M:IdeaBlade.Linq.MemberBindingBlock.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.MemberBindingBlock.GetHashCode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.MemberBindingBlock.BindingType">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.MemberBindingBlock.Member">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.MemberBindingBlock.WasTranslated">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.MemberBindingBlock.OriginalBinding">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.MemberBindingBlock.TranslatedBinding">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.MemberMemberBindingBlock.ToBinding">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.MemberMemberBindingBlock.Equals(System.Object)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.MemberMemberBindingBlock.GetHashCode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.MemberMemberBindingBlock.BindingBlocks">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.MemberListBindingBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.MemberListBindingBlock.ToBinding">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.MemberListBindingBlock.Equals(System.Object)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.MemberListBindingBlock.GetHashCode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.MemberListBindingBlock.InitializerBlocks">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.MemberAssignmentBindingBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.MemberAssignmentBindingBlock.ToBinding">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.MemberAssignmentBindingBlock.Equals(System.Object)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.MemberAssignmentBindingBlock.GetHashCode">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.MemberAssignmentBindingBlock.ExpressionBlock">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.SerializedExpression">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.SerializedExpression.ToSerializedExpression(System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializedExpression.ToExpression">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializedExpression.AddDynamicTypeInfo(IdeaBlade.Core.DynamicTypeInfo)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.SerializedExpression.BlockMap">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.SerializedExpression.DynamicTypeInfoList">
            <summary>
            Insure that this is the first property of an expression block to be deserialized.
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.SerializedExpression.ExpressionBlock">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Linq.SerializedExpression.DynamicTypeInfoLinkedList">
            <summary>
            For internal use only.
            Inner class to help serialize dynamic type info information and 
            have it deserialize in a specific order
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.SerializedExpression.DynamicTypeInfoLinkedList.#ctor">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializedExpression.DynamicTypeInfoLinkedList.Add(IdeaBlade.Core.DynamicTypeInfo)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.SerializedExpression.DynamicTypeInfoLinkedList.OnSerialize">
            <summary>
            Only called during serialization/deserialization
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.SerializedExpression.DynamicTypeInfoLinkedList.Head">
            <summary>
            Only called during serialization/deserialization.
            The ParameterTypeWrappers contained within the DynamicTypeInfo
            will deserialize as the DynamicTypeInfo is deserialized - these
            can reference a preceding dynamic type, so we need to ensure we
            deserialize each DynamicTypeInfo one at a time. 
            </summary>
        </member>
        <member name="P:IdeaBlade.Linq.SerializedExpression.DynamicTypeInfoLinkedList.Tail">
            <summary>
            Only called during serialization/deserialization
            </summary>
        </member>
        <member name="T:IdeaBlade.Linq.ExpressionHashCodeCalculator">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.CalculateHashCode(System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetExpressionHashCode(System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeNew(System.Linq.Expressions.NewExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeBindingMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeBindingListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeBindingAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeExpressions(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeExpressions(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeBindings(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionHashCodeCalculator.GetHashCodeInitializers(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Linq.LocalizingExpressionVisitor">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.LocalizingExpressionVisitor.#ctor">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.LocalizingExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.LocalizingExpressionVisitor.VisitExpressionCore(System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.LocalizingExpressionVisitor.IsLocalExpression(System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.LocalizingExpressionVisitor.MakeLocal(System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Linq.SerializingExpressionVisitor">
            <summary>
            Expression tree visitor providing serialization.  Serializes an expression tree
            into an ExpressionBlock tree.  Retrieve result from SerializedExpression property.
            </summary>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.#ctor(IdeaBlade.Linq.SerializedExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression,System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression,System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitCall(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitBindingMemberBinding(System.Linq.Expressions.MemberMemberBinding,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitBindingListBinding(System.Linq.Expressions.MemberListBinding,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitBindingAssignment(System.Linq.Expressions.MemberAssignment,System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitInitializer(System.Linq.Expressions.ElementInit,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitExpressions(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitExpressions(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitBindings(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.SerializingExpressionVisitor.VisitInitializers(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.SerializingExpressionVisitor.SerializedExpression">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Linq.ExpressionComparer">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.#ctor">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.AreEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareExpressionCore(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareBinary(System.Linq.Expressions.BinaryExpression,System.Linq.Expressions.BinaryExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareTypeIs(System.Linq.Expressions.TypeBinaryExpression,System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareUnary(System.Linq.Expressions.UnaryExpression,System.Linq.Expressions.UnaryExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareParameter(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareConstant(System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareNewArray(System.Linq.Expressions.NewArrayExpression,System.Linq.Expressions.NewArrayExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareNew(System.Linq.Expressions.NewExpression,System.Linq.Expressions.NewExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareLambda(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareCall(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.MethodCallExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareMemberInit(System.Linq.Expressions.MemberInitExpression,System.Linq.Expressions.MemberInitExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareMemberAccess(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.MemberExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareListInit(System.Linq.Expressions.ListInitExpression,System.Linq.Expressions.ListInitExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareInitializer(System.Linq.Expressions.ElementInit,System.Linq.Expressions.ElementInit)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareBinding(System.Linq.Expressions.MemberBinding,System.Linq.Expressions.MemberBinding)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareBindingCore(System.Linq.Expressions.MemberBinding,System.Linq.Expressions.MemberBinding)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareBindingMemberBinding(System.Linq.Expressions.MemberMemberBinding,System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareBindingListBinding(System.Linq.Expressions.MemberListBinding,System.Linq.Expressions.MemberListBinding)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareBindingAssignment(System.Linq.Expressions.MemberAssignment,System.Linq.Expressions.MemberAssignment)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.AreEquals(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit},System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.AreEquals(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.AreEquals(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.CompareBindings(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding},System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.Equals(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.GetHashCode(System.Linq.Expressions.Expression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.Equals(System.Linq.Expressions.MemberBinding,System.Linq.Expressions.MemberBinding)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.GetHashCode(System.Linq.Expressions.MemberBinding)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.Equals(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.GetHashCode(System.Linq.Expressions.ParameterExpression)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.Equals(System.Linq.Expressions.ElementInit,System.Linq.Expressions.ElementInit)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdeaBlade.Linq.ExpressionComparer.GetHashCode(System.Linq.Expressions.ElementInit)">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.ExpressionComparer.Debugging">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.ExpressionComparer.LoggingEnabled">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IdeaBlade.Linq.ExpressionComparer.Log">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="T:IdeaBlade.Linq.WrapperInfoFns">
            <summary>
            Internal use only.  Use the appropriate wrapper (data contract) based on the
            serializer in use.
            We have two wrapper data contracts - one for use when types can be serialized,
            the other when types cannot be serialized.  The contracts are orthogonal.
            </summary>
        </member>
    </members>
</doc>
